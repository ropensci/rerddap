http_interactions:
- request:
    method: get
    uri: https://upwell.pfeg.noaa.gov/erddap/info/erdCinpKfmBT/index.json
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.71.1 r-curl/4.3 crul/0.9.4.91
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: 'HTTP/1.1 200 '
      date: Wed, 15 Jul 2020 22:22:47 GMT
      strict-transport-security: max-age=31536000; includeSubDomains
      content-disposition: attachment;filename=erdCinpKfmBT_info.json
      content-encoding: gzip
      content-type: application/json;charset=UTF-8
      connection: close
      transfer-encoding: chunked
    body:
      encoding: ASCII-8BIT
      file: no
      string: {
  "table": {
    "columnNames": ["Row Type", "Variable Name", "Attribute Name", "Data Type", "Value"],
    "columnTypes": ["String", "String", "String", "String", "String"],
    "rows": [
      ["attribute", "NC_GLOBAL", "acknowledgement", "String", "NOAA NESDIS COASTWATCH, NOAA SWFSC ERD, Channel Islands National Park, National Park Service"],
      ["attribute", "NC_GLOBAL", "cdm_data_type", "String", "TimeSeries"],
      ["attribute", "NC_GLOBAL", "cdm_timeseries_variables", "String", "station, longitude, latitude"],
      ["attribute", "NC_GLOBAL", "contributor_email", "String", "David_Kushner@nps.gov"],
      ["attribute", "NC_GLOBAL", "contributor_name", "String", "Channel Islands National Park, National Park Service"],
      ["attribute", "NC_GLOBAL", "contributor_role", "String", "Source of data."],
      ["attribute", "NC_GLOBAL", "Conventions", "String", "COARDS, CF-1.6, ACDD-1.3, NCCSV-1.0"],
      ["attribute", "NC_GLOBAL", "creator_email", "String", "erd.data@noaa.gov"],
      ["attribute", "NC_GLOBAL", "creator_name", "String", "NOAA NMFS SWFSC ERD"],
      ["attribute", "NC_GLOBAL", "creator_type", "String", "institution"],
      ["attribute", "NC_GLOBAL", "creator_url", "String", "https://www.pfeg.noaa.gov"],
      ["attribute", "NC_GLOBAL", "date_created", "String", "2008-06-11T21:36:06Z"],
      ["attribute", "NC_GLOBAL", "date_issued", "String", "2008-06-11T21:36:06Z"],
      ["attribute", "NC_GLOBAL", "Easternmost_Easting", "double", "-118.4"],
      ["attribute", "NC_GLOBAL", "featureType", "String", "TimeSeries"],
      ["attribute", "NC_GLOBAL", "geospatial_lat_max", "double", "34.05"],
      ["attribute", "NC_GLOBAL", "geospatial_lat_min", "double", "32.8"],
      ["attribute", "NC_GLOBAL", "geospatial_lat_units", "String", "degrees_north"],
      ["attribute", "NC_GLOBAL", "geospatial_lon_max", "double", "-118.4"],
      ["attribute", "NC_GLOBAL", "geospatial_lon_min", "double", "-120.4"],
      ["attribute", "NC_GLOBAL", "geospatial_lon_units", "String", "degrees_east"],
      ["attribute", "NC_GLOBAL", "geospatial_vertical_max", "double", "17.0"],
      ["attribute", "NC_GLOBAL", "geospatial_vertical_min", "double", "5.0"],
      ["attribute", "NC_GLOBAL", "geospatial_vertical_positive", "String", "down"],
      ["attribute", "NC_GLOBAL", "geospatial_vertical_units", "String", "m"],
      ["attribute", "NC_GLOBAL", "history", "String", "Channel Islands National Park, National Park Service\n2008-06-11T21:36:06Z NOAA CoastWatch (West Coast Node) and NOAA SFSC ERD"],
      ["attribute", "NC_GLOBAL", "infoUrl", "String", "http://www.nps.gov/chis/naturescience/index.htm"],
      ["attribute", "NC_GLOBAL", "institution", "String", "CINP"],
      ["attribute", "NC_GLOBAL", "keywords", "String", "anamesus, aplysia, aquatic, atmosphere, aurantia, band, biology, biosphere, californica, channel, chilensis, cinp, coastal, corrugata, crassedoma, crenulata, density, depth, Earth Science > Biosphere > Aquatic Ecosystems > Coastal Habitat, Earth Science > Biosphere > Aquatic Ecosystems > Marine Habitat, ecosystems, forest, fruticosa, fulgens, giganteum, habitat, haliotis, height, helianthoides, identifier, interruptus, islands, kelletia, kelletii, kelp, lofotensis, lophogorgia, lytechinus, marine, mean, megathura, monitoring, muricea, panulirus, pycnopodia, rufescens, station, statistics, stddev, stderr, stylaster, survey, tethya, time, transect, urticina"],
      ["attribute", "NC_GLOBAL", "keywords_vocabulary", "String", "GCMD Science Keywords"],
      ["attribute", "NC_GLOBAL", "license", "String", "The data may be used and redistributed for free but is not intended for legal use, since it may contain inaccuracies. Neither the data Contributor, CoastWatch, NOAA, nor the United States Government, nor any of their employees or contractors, makes any warranty, express or implied, including warranties of merchantability and fitness for a particular purpose, or assumes any legal liability for the accuracy, completeness, or usefulness, of this information.  National Park Service Disclaimer: The National Park Service shall not be held liable for improper or incorrect use of the data described and/or contained herein. These data and related graphics are not legal documents and are not intended to be used as such. The information contained in these data is dynamic and may change over time. The data are not better than the original sources from which they were derived. It is the responsibility of the data user to use the data appropriately and consistent within the limitation of geospatial data in general and these data in particular. The related graphics are intended to aid the data user in acquiring relevant data; it is not appropriate to use the related graphics as data. The National Park Service gives no warranty, expressed or implied, as to the accuracy, reliability, or completeness of these data. It is strongly recommended that these data are directly acquired from an NPS server and not indirectly through other sources which may have changed the data in some way. Although these data have been processed successfully on computer systems at the National Park Service, no warranty expressed or implied is made regarding the utility of the data on other systems for general or scientific purposes, nor shall the act of distribution constitute any such warranty. This disclaimer applies both to individual use of the data and aggregate use with other data."],
      ["attribute", "NC_GLOBAL", "naming_authority", "String", "gov.noaa.pfeg.coastwatch"],
      ["attribute", "NC_GLOBAL", "Northernmost_Northing", "double", "34.05"],
      ["attribute", "NC_GLOBAL", "project", "String", "NOAA NMFS SWFSC ERD (https://www.pfeg.noaa.gov/)"],
      ["attribute", "NC_GLOBAL", "references", "String", "Channel Islands National Parks Inventory and Monitoring information: http://nature.nps.gov/im/units/medn . Kelp Forest Monitoring Protocols: http://www.nature.nps.gov/im/units/chis/Reports_PDF/Marine/KFM-HandbookVol1.pdf ."],
      ["attribute", "NC_GLOBAL", "sourceUrl", "String", "(local files)"],
      ["attribute", "NC_GLOBAL", "Southernmost_Northing", "double", "32.8"],
      ["attribute", "NC_GLOBAL", "standard_name_vocabulary", "String", "CF Standard Name Table v70"],
      ["attribute", "NC_GLOBAL", "subsetVariables", "String", "station, longitude, latitude"],
      ["attribute", "NC_GLOBAL", "summary", "String", "This dataset from the Channel Islands National Park's Kelp Forest Monitoring Program has measurements of the abundance and distribution of rare and clumped organisms not adequately sampled by quadrats. The summary data presented here represents the mean density per square meter. Sampling is conducted annually between the months of May-October, so the Time data in this file is July 1 of each year (a nominal value). The actual measurements were taken at various depths, so the Depth data in this file is the depth of the station's temperature logger, which is a typical depth."],
      ["attribute", "NC_GLOBAL", "time_coverage_end", "String", "2007-07-01T00:00:00Z"],
      ["attribute", "NC_GLOBAL", "time_coverage_start", "String", "1983-07-01T00:00:00Z"],
      ["attribute", "NC_GLOBAL", "title", "String", "Channel Islands, Kelp Forest Monitoring, Survey, Band Transect, 1983-2007"],
      ["attribute", "NC_GLOBAL", "Westernmost_Easting", "double", "-120.4"],
      ["variable", "station", "", "String", ""],
      ["attribute", "station", "cf_role", "String", "timeseries_id"],
      ["attribute", "station", "ioos_category", "String", "Identifier"],
      ["attribute", "station", "long_name", "String", "Station"],
      ["variable", "longitude", "", "double", ""],
      ["attribute", "longitude", "_CoordinateAxisType", "String", "Lon"],
      ["attribute", "longitude", "actual_range", "double", "-120.4, -118.4"],
      ["attribute", "longitude", "axis", "String", "X"],
      ["attribute", "longitude", "colorBarMaximum", "double", "-118.4"],
      ["attribute", "longitude", "colorBarMinimum", "double", "-120.4"],
      ["attribute", "longitude", "ioos_category", "String", "Location"],
      ["attribute", "longitude", "long_name", "String", "Longitude"],
      ["attribute", "longitude", "standard_name", "String", "longitude"],
      ["attribute", "longitude", "units", "String", "degrees_east"],
      ["variable", "latitude", "", "double", ""],
      ["attribute", "latitude", "_CoordinateAxisType", "String", "Lat"],
      ["attribute", "latitude", "actual_range", "double", "32.8, 34.05"],
      ["attribute", "latitude", "axis", "String", "Y"],
      ["attribute", "latitude", "colorBarMaximum", "double", "34.5"],
      ["attribute", "latitude", "colorBarMinimum", "double", "32.5"],
      ["attribute", "latitude", "ioos_category", "String", "Location"],
      ["attribute", "latitude", "long_name", "String", "Latitude"],
      ["attribute", "latitude", "standard_name", "String", "latitude"],
      ["attribute", "latitude", "units", "String", "degrees_north"],
      ["variable", "depth", "", "double", ""],
      ["attribute", "depth", "_CoordinateAxisType", "String", "Height"],
      ["attribute", "depth", "_CoordinateZisPositive", "String", "down"],
      ["attribute", "depth", "actual_range", "double", "5.0, 17.0"],
      ["attribute", "depth", "axis", "String", "Z"],
      ["attribute", "depth", "colorBarMaximum", "double", "20.0"],
      ["attribute", "depth", "colorBarMinimum", "double", "0.0"],
      ["attribute", "depth", "ioos_category", "String", "Location"],
      ["attribute", "depth", "long_name", "String", "Depth"],
      ["attribute", "depth", "positive", "String", "down"],
      ["attribute", "depth", "standard_name", "String", "depth"],
      ["attribute", "depth", "units", "String", "m"],
      ["variable", "time", "", "double", ""],
      ["attribute", "time", "_CoordinateAxisType", "String", "Time"],
      ["attribute", "time", "actual_range", "double", "4.258656E8, 1.183248E9"],
      ["attribute", "time", "axis", "String", "T"],
      ["attribute", "time", "colorBarMaximum", "double", "1.183248E9"],
      ["attribute", "time", "colorBarMinimum", "double", "4.258656E8"],
      ["attribute", "time", "ioos_category", "String", "Time"],
      ["attribute", "time", "long_name", "String", "Time"],
      ["attribute", "time", "standard_name", "String", "time"],
      ["attribute", "time", "time_origin", "String", "01-JAN-1970 00:00:00"],
      ["attribute", "time", "units", "String", "seconds since 1970-01-01T00:00:00Z"],
      ["variable", "Aplysia_californica_Mean_Density", "", "float", ""],
      ["attribute", "Aplysia_californica_Mean_Density", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Aplysia_californica_Mean_Density", "actual_range", "float", "0.0, 0.95"],
      ["attribute", "Aplysia_californica_Mean_Density", "comment", "String", "Common name: California brown sea hare"],
      ["attribute", "Aplysia_californica_Mean_Density", "ioos_category", "String", "Biology"],
      ["attribute", "Aplysia_californica_Mean_Density", "long_name", "String", "Aplysia californica Mean Density"],
      ["attribute", "Aplysia_californica_Mean_Density", "missing_value", "float", "-9999999.0"],
      ["attribute", "Aplysia_californica_Mean_Density", "units", "String", "m-2"],
      ["variable", "Aplysia_californica_StdDev", "", "float", ""],
      ["attribute", "Aplysia_californica_StdDev", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Aplysia_californica_StdDev", "actual_range", "float", "0.0, 0.35"],
      ["attribute", "Aplysia_californica_StdDev", "ioos_category", "String", "Statistics"],
      ["attribute", "Aplysia_californica_StdDev", "long_name", "String", "Aplysia californica StdDev"],
      ["attribute", "Aplysia_californica_StdDev", "missing_value", "float", "-9999999.0"],
      ["variable", "Aplysia_californica_StdErr", "", "float", ""],
      ["attribute", "Aplysia_californica_StdErr", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Aplysia_californica_StdErr", "actual_range", "float", "0.0, 0.1"],
      ["attribute", "Aplysia_californica_StdErr", "ioos_category", "String", "Statistics"],
      ["attribute", "Aplysia_californica_StdErr", "long_name", "String", "Aplysia californica StdErr"],
      ["attribute", "Aplysia_californica_StdErr", "missing_value", "float", "-9999999.0"],
      ["variable", "Crassedoma_giganteum_Mean_Density", "", "float", ""],
      ["attribute", "Crassedoma_giganteum_Mean_Density", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Crassedoma_giganteum_Mean_Density", "actual_range", "float", "0.0, 0.92"],
      ["attribute", "Crassedoma_giganteum_Mean_Density", "comment", "String", "Common name: Rock scallop"],
      ["attribute", "Crassedoma_giganteum_Mean_Density", "ioos_category", "String", "Biology"],
      ["attribute", "Crassedoma_giganteum_Mean_Density", "long_name", "String", "Crassedoma giganteum Mean Density"],
      ["attribute", "Crassedoma_giganteum_Mean_Density", "missing_value", "float", "-9999999.0"],
      ["attribute", "Crassedoma_giganteum_Mean_Density", "units", "String", "m-2"],
      ["variable", "Crassedoma_giganteum_StdDev", "", "float", ""],
      ["attribute", "Crassedoma_giganteum_StdDev", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Crassedoma_giganteum_StdDev", "actual_range", "float", "0.0, 0.71"],
      ["attribute", "Crassedoma_giganteum_StdDev", "ioos_category", "String", "Statistics"],
      ["attribute", "Crassedoma_giganteum_StdDev", "long_name", "String", "Crassedoma giganteum StdDev"],
      ["attribute", "Crassedoma_giganteum_StdDev", "missing_value", "float", "-9999999.0"],
      ["variable", "Crassedoma_giganteum_StdErr", "", "float", ""],
      ["attribute", "Crassedoma_giganteum_StdErr", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Crassedoma_giganteum_StdErr", "actual_range", "float", "0.0, 0.2"],
      ["attribute", "Crassedoma_giganteum_StdErr", "ioos_category", "String", "Statistics"],
      ["attribute", "Crassedoma_giganteum_StdErr", "long_name", "String", "Crassedoma giganteum StdErr"],
      ["attribute", "Crassedoma_giganteum_StdErr", "missing_value", "float", "-9999999.0"],
      ["variable", "Haliotis_corrugata_Mean_Density", "", "float", ""],
      ["attribute", "Haliotis_corrugata_Mean_Density", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Haliotis_corrugata_Mean_Density", "actual_range", "float", "0.0, 0.18"],
      ["attribute", "Haliotis_corrugata_Mean_Density", "comment", "String", "Common name: Pink abalone"],
      ["attribute", "Haliotis_corrugata_Mean_Density", "ioos_category", "String", "Biology"],
      ["attribute", "Haliotis_corrugata_Mean_Density", "long_name", "String", "Haliotis corrugata Mean Density"],
      ["attribute", "Haliotis_corrugata_Mean_Density", "missing_value", "float", "-9999999.0"],
      ["attribute", "Haliotis_corrugata_Mean_Density", "units", "String", "m-2"],
      ["variable", "Haliotis_corrugata_StdDev", "", "float", ""],
      ["attribute", "Haliotis_corrugata_StdDev", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Haliotis_corrugata_StdDev", "actual_range", "float", "0.0, 0.1"],
      ["attribute", "Haliotis_corrugata_StdDev", "ioos_category", "String", "Statistics"],
      ["attribute", "Haliotis_corrugata_StdDev", "long_name", "String", "Haliotis corrugata StdDev"],
      ["attribute", "Haliotis_corrugata_StdDev", "missing_value", "float", "-9999999.0"],
      ["variable", "Haliotis_corrugata_StdErr", "", "float", ""],
      ["attribute", "Haliotis_corrugata_StdErr", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Haliotis_corrugata_StdErr", "actual_range", "float", "0.0, 0.03"],
      ["attribute", "Haliotis_corrugata_StdErr", "ioos_category", "String", "Statistics"],
      ["attribute", "Haliotis_corrugata_StdErr", "long_name", "String", "Haliotis corrugata StdErr"],
      ["attribute", "Haliotis_corrugata_StdErr", "missing_value", "float", "-9999999.0"],
      ["variable", "Haliotis_fulgens_Mean_Density", "", "float", ""],
      ["attribute", "Haliotis_fulgens_Mean_Density", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Haliotis_fulgens_Mean_Density", "actual_range", "float", "0.0, 0.005555556"],
      ["attribute", "Haliotis_fulgens_Mean_Density", "comment", "String", "Common name: Green abalone"],
      ["attribute", "Haliotis_fulgens_Mean_Density", "ioos_category", "String", "Biology"],
      ["attribute", "Haliotis_fulgens_Mean_Density", "long_name", "String", "Haliotis fulgens Mean Density"],
      ["attribute", "Haliotis_fulgens_Mean_Density", "missing_value", "float", "-9999999.0"],
      ["attribute", "Haliotis_fulgens_Mean_Density", "units", "String", "m-2"],
      ["variable", "Haliotis_fulgens_StdDev", "", "float", ""],
      ["attribute", "Haliotis_fulgens_StdDev", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Haliotis_fulgens_StdDev", "actual_range", "float", "0.0, 0.008206099"],
      ["attribute", "Haliotis_fulgens_StdDev", "ioos_category", "String", "Statistics"],
      ["attribute", "Haliotis_fulgens_StdDev", "long_name", "String", "Haliotis fulgens StdDev"],
      ["attribute", "Haliotis_fulgens_StdDev", "missing_value", "float", "-9999999.0"],
      ["variable", "Haliotis_fulgens_StdErr", "", "float", ""],
      ["attribute", "Haliotis_fulgens_StdErr", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Haliotis_fulgens_StdErr", "actual_range", "float", "0.0, 0.002368897"],
      ["attribute", "Haliotis_fulgens_StdErr", "ioos_category", "String", "Statistics"],
      ["attribute", "Haliotis_fulgens_StdErr", "long_name", "String", "Haliotis fulgens StdErr"],
      ["attribute", "Haliotis_fulgens_StdErr", "missing_value", "float", "-9999999.0"],
      ["variable", "Haliotis_rufescens_Mean_Density", "", "float", ""],
      ["attribute", "Haliotis_rufescens_Mean_Density", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Haliotis_rufescens_Mean_Density", "actual_range", "float", "0.0, 0.99"],
      ["attribute", "Haliotis_rufescens_Mean_Density", "comment", "String", "Common name: Red abalone"],
      ["attribute", "Haliotis_rufescens_Mean_Density", "ioos_category", "String", "Biology"],
      ["attribute", "Haliotis_rufescens_Mean_Density", "long_name", "String", "Haliotis rufescens Mean Density"],
      ["attribute", "Haliotis_rufescens_Mean_Density", "missing_value", "float", "-9999999.0"],
      ["attribute", "Haliotis_rufescens_Mean_Density", "units", "String", "m-2"],
      ["variable", "Haliotis_rufescens_StdDev", "", "float", ""],
      ["attribute", "Haliotis_rufescens_StdDev", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Haliotis_rufescens_StdDev", "actual_range", "float", "0.0, 0.6"],
      ["attribute", "Haliotis_rufescens_StdDev", "ioos_category", "String", "Statistics"],
      ["attribute", "Haliotis_rufescens_StdDev", "long_name", "String", "Haliotis rufescens StdDev"],
      ["attribute", "Haliotis_rufescens_StdDev", "missing_value", "float", "-9999999.0"],
      ["variable", "Haliotis_rufescens_StdErr", "", "float", ""],
      ["attribute", "Haliotis_rufescens_StdErr", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Haliotis_rufescens_StdErr", "actual_range", "float", "0.0, 0.17"],
      ["attribute", "Haliotis_rufescens_StdErr", "ioos_category", "String", "Statistics"],
      ["attribute", "Haliotis_rufescens_StdErr", "long_name", "String", "Haliotis rufescens StdErr"],
      ["attribute", "Haliotis_rufescens_StdErr", "missing_value", "float", "-9999999.0"],
      ["variable", "Kelletia_kelletii_Mean_Density", "", "float", ""],
      ["attribute", "Kelletia_kelletii_Mean_Density", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Kelletia_kelletii_Mean_Density", "actual_range", "float", "0.0, 0.55"],
      ["attribute", "Kelletia_kelletii_Mean_Density", "comment", "String", "Common name: Kellet's whelk"],
      ["attribute", "Kelletia_kelletii_Mean_Density", "ioos_category", "String", "Biology"],
      ["attribute", "Kelletia_kelletii_Mean_Density", "long_name", "String", "Kelletia kelletii Mean Density"],
      ["attribute", "Kelletia_kelletii_Mean_Density", "missing_value", "float", "-9999999.0"],
      ["attribute", "Kelletia_kelletii_Mean_Density", "units", "String", "m-2"],
      ["variable", "Kelletia_kelletii_StdDev", "", "float", ""],
      ["attribute", "Kelletia_kelletii_StdDev", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Kelletia_kelletii_StdDev", "actual_range", "float", "0.0, 0.29"],
      ["attribute", "Kelletia_kelletii_StdDev", "ioos_category", "String", "Statistics"],
      ["attribute", "Kelletia_kelletii_StdDev", "long_name", "String", "Kelletia kelletii StdDev"],
      ["attribute", "Kelletia_kelletii_StdDev", "missing_value", "float", "-9999999.0"],
      ["variable", "Kelletia_kelletii_StdErr", "", "float", ""],
      ["attribute", "Kelletia_kelletii_StdErr", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Kelletia_kelletii_StdErr", "actual_range", "float", "0.0, 0.08"],
      ["attribute", "Kelletia_kelletii_StdErr", "ioos_category", "String", "Statistics"],
      ["attribute", "Kelletia_kelletii_StdErr", "long_name", "String", "Kelletia kelletii StdErr"],
      ["attribute", "Kelletia_kelletii_StdErr", "missing_value", "float", "-9999999.0"],
      ["variable", "Lophogorgia_chilensis_Mean_Density", "", "float", ""],
      ["attribute", "Lophogorgia_chilensis_Mean_Density", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Lophogorgia_chilensis_Mean_Density", "actual_range", "float", "0.0, 0.7"],
      ["attribute", "Lophogorgia_chilensis_Mean_Density", "comment", "String", "Common name: Red gorgonian"],
      ["attribute", "Lophogorgia_chilensis_Mean_Density", "ioos_category", "String", "Biology"],
      ["attribute", "Lophogorgia_chilensis_Mean_Density", "long_name", "String", "Lophogorgia chilensis Mean Density"],
      ["attribute", "Lophogorgia_chilensis_Mean_Density", "missing_value", "float", "-9999999.0"],
      ["attribute", "Lophogorgia_chilensis_Mean_Density", "units", "String", "m-2"],
      ["variable", "Lophogorgia_chilensis_StdDev", "", "float", ""],
      ["attribute", "Lophogorgia_chilensis_StdDev", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Lophogorgia_chilensis_StdDev", "actual_range", "float", "0.0, 0.44"],
      ["attribute", "Lophogorgia_chilensis_StdDev", "ioos_category", "String", "Statistics"],
      ["attribute", "Lophogorgia_chilensis_StdDev", "long_name", "String", "Lophogorgia chilensis StdDev"],
      ["attribute", "Lophogorgia_chilensis_StdDev", "missing_value", "float", "-9999999.0"],
      ["variable", "Lophogorgia_chilensis_StdErr", "", "float", ""],
      ["attribute", "Lophogorgia_chilensis_StdErr", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Lophogorgia_chilensis_StdErr", "actual_range", "float", "0.0, 0.12"],
      ["attribute", "Lophogorgia_chilensis_StdErr", "ioos_category", "String", "Statistics"],
      ["attribute", "Lophogorgia_chilensis_StdErr", "long_name", "String", "Lophogorgia chilensis StdErr"],
      ["attribute", "Lophogorgia_chilensis_StdErr", "missing_value", "float", "-9999999.0"],
      ["variable", "Lytechinus_anamesus_Mean_Density", "", "float", ""],
      ["attribute", "Lytechinus_anamesus_Mean_Density", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Lytechinus_anamesus_Mean_Density", "actual_range", "float", "0.0, 22.45"],
      ["attribute", "Lytechinus_anamesus_Mean_Density", "comment", "String", "Common name: White sea urchin"],
      ["attribute", "Lytechinus_anamesus_Mean_Density", "ioos_category", "String", "Biology"],
      ["attribute", "Lytechinus_anamesus_Mean_Density", "long_name", "String", "Lytechinus anamesus Mean Density"],
      ["attribute", "Lytechinus_anamesus_Mean_Density", "missing_value", "float", "-9999999.0"],
      ["attribute", "Lytechinus_anamesus_Mean_Density", "units", "String", "m-2"],
      ["variable", "Lytechinus_anamesus_StdDev", "", "float", ""],
      ["attribute", "Lytechinus_anamesus_StdDev", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Lytechinus_anamesus_StdDev", "actual_range", "float", "0.0, 9.2"],
      ["attribute", "Lytechinus_anamesus_StdDev", "ioos_category", "String", "Statistics"],
      ["attribute", "Lytechinus_anamesus_StdDev", "long_name", "String", "Lytechinus anamesus StdDev"],
      ["attribute", "Lytechinus_anamesus_StdDev", "missing_value", "float", "-9999999.0"],
      ["variable", "Lytechinus_anamesus_StdErr", "", "float", ""],
      ["attribute", "Lytechinus_anamesus_StdErr", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Lytechinus_anamesus_StdErr", "actual_range", "float", "0.0, 2.65"],
      ["attribute", "Lytechinus_anamesus_StdErr", "ioos_category", "String", "Statistics"],
      ["attribute", "Lytechinus_anamesus_StdErr", "long_name", "String", "Lytechinus anamesus StdErr"],
      ["attribute", "Lytechinus_anamesus_StdErr", "missing_value", "float", "-9999999.0"],
      ["variable", "Megathura_crenulata_Mean_Density", "", "float", ""],
      ["attribute", "Megathura_crenulata_Mean_Density", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Megathura_crenulata_Mean_Density", "actual_range", "float", "0.0, 0.5"],
      ["attribute", "Megathura_crenulata_Mean_Density", "comment", "String", "Common name: Giant keyhole limpet"],
      ["attribute", "Megathura_crenulata_Mean_Density", "ioos_category", "String", "Biology"],
      ["attribute", "Megathura_crenulata_Mean_Density", "long_name", "String", "Megathura crenulata Mean Density"],
      ["attribute", "Megathura_crenulata_Mean_Density", "missing_value", "float", "-9999999.0"],
      ["attribute", "Megathura_crenulata_Mean_Density", "units", "String", "m-2"],
      ["variable", "Megathura_crenulata_StdDev", "", "float", ""],
      ["attribute", "Megathura_crenulata_StdDev", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Megathura_crenulata_StdDev", "actual_range", "float", "0.0, 0.22"],
      ["attribute", "Megathura_crenulata_StdDev", "ioos_category", "String", "Statistics"],
      ["attribute", "Megathura_crenulata_StdDev", "long_name", "String", "Megathura crenulata StdDev"],
      ["attribute", "Megathura_crenulata_StdDev", "missing_value", "float", "-9999999.0"],
      ["variable", "Megathura_crenulata_StdErr", "", "float", ""],
      ["attribute", "Megathura_crenulata_StdErr", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Megathura_crenulata_StdErr", "actual_range", "float", "0.0, 0.07"],
      ["attribute", "Megathura_crenulata_StdErr", "ioos_category", "String", "Statistics"],
      ["attribute", "Megathura_crenulata_StdErr", "long_name", "String", "Megathura crenulata StdErr"],
      ["attribute", "Megathura_crenulata_StdErr", "missing_value", "float", "-9999999.0"],
      ["variable", "Muricea_californica_Mean_Density", "", "float", ""],
      ["attribute", "Muricea_californica_Mean_Density", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Muricea_californica_Mean_Density", "actual_range", "float", "0.0, 0.31"],
      ["attribute", "Muricea_californica_Mean_Density", "comment", "String", "Common name: California golden gorgonian"],
      ["attribute", "Muricea_californica_Mean_Density", "ioos_category", "String", "Biology"],
      ["attribute", "Muricea_californica_Mean_Density", "long_name", "String", "Muricea californica Mean Density"],
      ["attribute", "Muricea_californica_Mean_Density", "missing_value", "float", "-9999999.0"],
      ["attribute", "Muricea_californica_Mean_Density", "units", "String", "m-2"],
      ["variable", "Muricea_californica_StdDev", "", "float", ""],
      ["attribute", "Muricea_californica_StdDev", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Muricea_californica_StdDev", "actual_range", "float", "0.0, 0.16"],
      ["attribute", "Muricea_californica_StdDev", "ioos_category", "String", "Statistics"],
      ["attribute", "Muricea_californica_StdDev", "long_name", "String", "Muricea californica StdDev"],
      ["attribute", "Muricea_californica_StdDev", "missing_value", "float", "-9999999.0"],
      ["variable", "Muricea_californica_StdErr", "", "float", ""],
      ["attribute", "Muricea_californica_StdErr", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Muricea_californica_StdErr", "actual_range", "float", "0.0, 0.04"],
      ["attribute", "Muricea_californica_StdErr", "ioos_category", "String", "Statistics"],
      ["attribute", "Muricea_californica_StdErr", "long_name", "String", "Muricea californica StdErr"],
      ["attribute", "Muricea_californica_StdErr", "missing_value", "float", "-9999999.0"],
      ["variable", "Muricea_fruticosa_Mean_Density", "", "float", ""],
      ["attribute", "Muricea_fruticosa_Mean_Density", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Muricea_fruticosa_Mean_Density", "actual_range", "float", "0.0, 0.04"],
      ["attribute", "Muricea_fruticosa_Mean_Density", "comment", "String", "Common name: Brown gorgonian"],
      ["attribute", "Muricea_fruticosa_Mean_Density", "ioos_category", "String", "Biology"],
      ["attribute", "Muricea_fruticosa_Mean_Density", "long_name", "String", "Muricea fruticosa Mean Density"],
      ["attribute", "Muricea_fruticosa_Mean_Density", "missing_value", "float", "-9999999.0"],
      ["attribute", "Muricea_fruticosa_Mean_Density", "units", "String", "m-2"],
      ["variable", "Muricea_fruticosa_StdDev", "", "float", ""],
      ["attribute", "Muricea_fruticosa_StdDev", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Muricea_fruticosa_StdDev", "actual_range", "float", "0.0, 0.09"],
      ["attribute", "Muricea_fruticosa_StdDev", "ioos_category", "String", "Statistics"],
      ["attribute", "Muricea_fruticosa_StdDev", "long_name", "String", "Muricea fruticosa StdDev"],
      ["attribute", "Muricea_fruticosa_StdDev", "missing_value", "float", "-9999999.0"],
      ["variable", "Muricea_fruticosa_StdErr", "", "float", ""],
      ["attribute", "Muricea_fruticosa_StdErr", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Muricea_fruticosa_StdErr", "actual_range", "float", "0.0, 0.02"],
      ["attribute", "Muricea_fruticosa_StdErr", "ioos_category", "String", "Statistics"],
      ["attribute", "Muricea_fruticosa_StdErr", "long_name", "String", "Muricea fruticosa StdErr"],
      ["attribute", "Muricea_fruticosa_StdErr", "missing_value", "float", "-9999999.0"],
      ["variable", "Panulirus_interruptus_Mean_Density", "", "float", ""],
      ["attribute", "Panulirus_interruptus_Mean_Density", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Panulirus_interruptus_Mean_Density", "actual_range", "float", "0.0, 0.11"],
      ["attribute", "Panulirus_interruptus_Mean_Density", "comment", "String", "Common name: California spiny lobster"],
      ["attribute", "Panulirus_interruptus_Mean_Density", "ioos_category", "String", "Biology"],
      ["attribute", "Panulirus_interruptus_Mean_Density", "long_name", "String", "Panulirus interruptus Mean Density"],
      ["attribute", "Panulirus_interruptus_Mean_Density", "missing_value", "float", "-9999999.0"],
      ["attribute", "Panulirus_interruptus_Mean_Density", "units", "String", "m-2"],
      ["variable", "Panulirus_interruptus_StdDev", "", "float", ""],
      ["attribute", "Panulirus_interruptus_StdDev", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Panulirus_interruptus_StdDev", "actual_range", "float", "0.0, 0.32"],
      ["attribute", "Panulirus_interruptus_StdDev", "ioos_category", "String", "Statistics"],
      ["attribute", "Panulirus_interruptus_StdDev", "long_name", "String", "Panulirus interruptus StdDev"],
      ["attribute", "Panulirus_interruptus_StdDev", "missing_value", "float", "-9999999.0"],
      ["variable", "Panulirus_interruptus_StdErr", "", "float", ""],
      ["attribute", "Panulirus_interruptus_StdErr", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Panulirus_interruptus_StdErr", "actual_range", "float", "0.0, 0.09"],
      ["attribute", "Panulirus_interruptus_StdErr", "ioos_category", "String", "Statistics"],
      ["attribute", "Panulirus_interruptus_StdErr", "long_name", "String", "Panulirus interruptus StdErr"],
      ["attribute", "Panulirus_interruptus_StdErr", "missing_value", "float", "-9999999.0"],
      ["variable", "Pycnopodia_helianthoides_Mean_Density", "", "float", ""],
      ["attribute", "Pycnopodia_helianthoides_Mean_Density", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Pycnopodia_helianthoides_Mean_Density", "actual_range", "float", "0.0, 0.33"],
      ["attribute", "Pycnopodia_helianthoides_Mean_Density", "comment", "String", "Common name: Sunflower star"],
      ["attribute", "Pycnopodia_helianthoides_Mean_Density", "ioos_category", "String", "Biology"],
      ["attribute", "Pycnopodia_helianthoides_Mean_Density", "long_name", "String", "Pycnopodia helianthoides Mean Density"],
      ["attribute", "Pycnopodia_helianthoides_Mean_Density", "missing_value", "float", "-9999999.0"],
      ["attribute", "Pycnopodia_helianthoides_Mean_Density", "units", "String", "m-2"],
      ["variable", "Pycnopodia_helianthoides_StdDev", "", "float", ""],
      ["attribute", "Pycnopodia_helianthoides_StdDev", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Pycnopodia_helianthoides_StdDev", "actual_range", "float", "0.0, 0.21"],
      ["attribute", "Pycnopodia_helianthoides_StdDev", "ioos_category", "String", "Statistics"],
      ["attribute", "Pycnopodia_helianthoides_StdDev", "long_name", "String", "Pycnopodia helianthoides StdDev"],
      ["attribute", "Pycnopodia_helianthoides_StdDev", "missing_value", "float", "-9999999.0"],
      ["variable", "Pycnopodia_helianthoides_StdErr", "", "float", ""],
      ["attribute", "Pycnopodia_helianthoides_StdErr", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Pycnopodia_helianthoides_StdErr", "actual_range", "float", "0.0, 0.06"],
      ["attribute", "Pycnopodia_helianthoides_StdErr", "ioos_category", "String", "Statistics"],
      ["attribute", "Pycnopodia_helianthoides_StdErr", "long_name", "String", "Pycnopodia helianthoides StdErr"],
      ["attribute", "Pycnopodia_helianthoides_StdErr", "missing_value", "float", "-9999999.0"],
      ["variable", "Stylaster_californica_Mean_Density", "", "float", ""],
      ["attribute", "Stylaster_californica_Mean_Density", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Stylaster_californica_Mean_Density", "actual_range", "float", "0.0, 0.13"],
      ["attribute", "Stylaster_californica_Mean_Density", "comment", "String", "Common name: California hydrocoral"],
      ["attribute", "Stylaster_californica_Mean_Density", "ioos_category", "String", "Biology"],
      ["attribute", "Stylaster_californica_Mean_Density", "long_name", "String", "Stylaster californica Mean Density"],
      ["attribute", "Stylaster_californica_Mean_Density", "missing_value", "float", "-9999999.0"],
      ["attribute", "Stylaster_californica_Mean_Density", "units", "String", "m-2"],
      ["variable", "Stylaster_californica_StdDev", "", "float", ""],
      ["attribute", "Stylaster_californica_StdDev", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Stylaster_californica_StdDev", "actual_range", "float", "0.0, 0.18"],
      ["attribute", "Stylaster_californica_StdDev", "ioos_category", "String", "Statistics"],
      ["attribute", "Stylaster_californica_StdDev", "long_name", "String", "Stylaster californica StdDev"],
      ["attribute", "Stylaster_californica_StdDev", "missing_value", "float", "-9999999.0"],
      ["variable", "Stylaster_californica_StdErr", "", "float", ""],
      ["attribute", "Stylaster_californica_StdErr", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Stylaster_californica_StdErr", "actual_range", "float", "0.0, 0.05"],
      ["attribute", "Stylaster_californica_StdErr", "ioos_category", "String", "Statistics"],
      ["attribute", "Stylaster_californica_StdErr", "long_name", "String", "Stylaster californica StdErr"],
      ["attribute", "Stylaster_californica_StdErr", "missing_value", "float", "-9999999.0"],
      ["variable", "Tethya_aurantia_Mean_Density", "", "float", ""],
      ["attribute", "Tethya_aurantia_Mean_Density", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Tethya_aurantia_Mean_Density", "actual_range", "float", "0.0, 0.41"],
      ["attribute", "Tethya_aurantia_Mean_Density", "comment", "String", "Common name: Orange puffball sponge"],
      ["attribute", "Tethya_aurantia_Mean_Density", "ioos_category", "String", "Biology"],
      ["attribute", "Tethya_aurantia_Mean_Density", "long_name", "String", "Tethya aurantia Mean Density"],
      ["attribute", "Tethya_aurantia_Mean_Density", "missing_value", "float", "-9999999.0"],
      ["attribute", "Tethya_aurantia_Mean_Density", "units", "String", "m-2"],
      ["variable", "Tethya_aurantia_StdDev", "", "float", ""],
      ["attribute", "Tethya_aurantia_StdDev", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Tethya_aurantia_StdDev", "actual_range", "float", "0.0, 0.18"],
      ["attribute", "Tethya_aurantia_StdDev", "ioos_category", "String", "Statistics"],
      ["attribute", "Tethya_aurantia_StdDev", "long_name", "String", "Tethya aurantia StdDev"],
      ["attribute", "Tethya_aurantia_StdDev", "missing_value", "float", "-9999999.0"],
      ["variable", "Tethya_aurantia_StdErr", "", "float", ""],
      ["attribute", "Tethya_aurantia_StdErr", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Tethya_aurantia_StdErr", "actual_range", "float", "0.0, 0.05"],
      ["attribute", "Tethya_aurantia_StdErr", "ioos_category", "String", "Statistics"],
      ["attribute", "Tethya_aurantia_StdErr", "long_name", "String", "Tethya aurantia StdErr"],
      ["attribute", "Tethya_aurantia_StdErr", "missing_value", "float", "-9999999.0"],
      ["variable", "Urticina_lofotensis_Mean_Density", "", "float", ""],
      ["attribute", "Urticina_lofotensis_Mean_Density", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Urticina_lofotensis_Mean_Density", "actual_range", "float", "0.0, 0.39"],
      ["attribute", "Urticina_lofotensis_Mean_Density", "comment", "String", "Common name: White-spotted rose anemone"],
      ["attribute", "Urticina_lofotensis_Mean_Density", "ioos_category", "String", "Biology"],
      ["attribute", "Urticina_lofotensis_Mean_Density", "long_name", "String", "Urticina lofotensis Mean Density"],
      ["attribute", "Urticina_lofotensis_Mean_Density", "missing_value", "float", "-9999999.0"],
      ["attribute", "Urticina_lofotensis_Mean_Density", "units", "String", "m-2"],
      ["variable", "Urticina_lofotensis_StdDev", "", "float", ""],
      ["attribute", "Urticina_lofotensis_StdDev", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Urticina_lofotensis_StdDev", "actual_range", "float", "0.0, 0.28"],
      ["attribute", "Urticina_lofotensis_StdDev", "ioos_category", "String", "Statistics"],
      ["attribute", "Urticina_lofotensis_StdDev", "long_name", "String", "Urticina lofotensis StdDev"],
      ["attribute", "Urticina_lofotensis_StdDev", "missing_value", "float", "-9999999.0"],
      ["variable", "Urticina_lofotensis_StdErr", "", "float", ""],
      ["attribute", "Urticina_lofotensis_StdErr", "_FillValue", "float", "-9999999.0"],
      ["attribute", "Urticina_lofotensis_StdErr", "actual_range", "float", "0.0, 0.08"],
      ["attribute", "Urticina_lofotensis_StdErr", "ioos_category", "String", "Statistics"],
      ["attribute", "Urticina_lofotensis_StdErr", "long_name", "String", "Urticina lofotensis StdErr"],
      ["attribute", "Urticina_lofotensis_StdErr", "missing_value", "float", "-9999999.0"]
    ]
  }
}

  recorded_at: 2020-07-15 22:22:35 GMT
  recorded_with: vcr/0.5.4, webmockr/0.6.2
- request:
    method: get
    uri: https://upwell.pfeg.noaa.gov/erddap/tabledap/index.json?page=1&itemsPerPage=10000
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.71.1 r-curl/4.3 crul/0.9.4.91
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '200'
      message: OK
      explanation: Request fulfilled, document follows
    headers:
      status: 'HTTP/1.1 200 '
      date: Wed, 15 Jul 2020 22:22:47 GMT
      strict-transport-security: max-age=31536000; includeSubDomains
      last-modified: Wed, 15 Jul 2020 22:22:47 GMT
      xdods-server: dods/3.7
      erddap-server: '2.02'
      content-disposition: attachment;filename=tabledap.json
      content-encoding: gzip
      content-type: application/json;charset=UTF-8
      connection: close
      transfer-encoding: chunked
    body:
      encoding: ASCII-8BIT
      file: no
      string: {
  "table": {
    "columnNames": ["griddap", "Subset", "tabledap", "Make A Graph", "wms", "files", "Accessible", "Title", "Summary", "FGDC", "ISO 19115", "Info", "Background Info", "RSS", "Email", "Institution", "Dataset ID"],
    "columnTypes": ["String", "String", "String", "String", "String", "String", "String", "String", "String", "String", "String", "String", "String", "String", "String", "String", "String"],
    "rows": [
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/allDatasets.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/allDatasets", "https://upwell.pfeg.noaa.gov/erddap/tabledap/allDatasets.graph", "", "", "public", "* The List of All Active Datasets in this ERDDAP *", "This dataset is a table which has a row of information for each dataset currently active in this ERDDAP.\n\ncdm_data_type = Other\nVARIABLES:\ndatasetID (Dataset ID)\naccessible\ninstitution\ndataStructure (Data Structure)\ncdm_data_type (Common Data Model Type)\nclass (ERDDAP Class)\ntitle\nminLongitude (Minimum Longitude, degrees_east)\nmaxLongitude (Maximum Longitude, degrees_east)\nlongitudeSpacing (Average Grid Longitude Spacing, degrees_east)\nminLatitude (Minimum Latitude, degrees_north)\nmaxLatitude (Maximum Latitude, degrees_north)\nlatitudeSpacing (Average Grid Latitude Spacing, degrees_north)\nminAltitude (Minimum Altitude or -Depth, m)\nmaxAltitude (Maximum Altitude or -Depth, m)\nminTime (Minimum Time, seconds since 1970-01-01T00:00:00Z)\nmaxTime (Maximum Time, seconds since 1970-01-01T00:00:00Z)\ntimeSpacing (Average Grid Time Spacing, seconds)\ngriddap (Base URL of OPeNDAP Grid Service)\nsubset (URL of Subset Web Page)\ntabledap (Base URL of OPeNDAP Table/Sequence Service)\nMakeAGraph (URL of Make-A-Graph Web Page)\nsos (Base URL of SOS Service)\nwcs (Base URL of WCS Service)\nwms (Base URL of WMS Service)\nfiles (Base URL of /files/ Service)\n... (10 more variables)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/allDatasets/index.json", "https://upwell.pfeg.noaa.gov/erddap", "", "", "NOAA NMFS SWFSC Environmental Research Division", "allDatasets"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ais_hi_20112012", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ais_hi_20112012.graph", "", "", "public", "AIS Ship Traffic: Hawaii: 2011-2012", "Ship position data from a satellite-based Automatic Identification System (AIS) were obtained jointly by PacIOOS (J. Potemra), SOEST/ORE of the University of Hawaii (E. Roth), and the Papahanaumokuakea Marine National Monument (PNMN) (D. Graham) through a one-time purchase from ORBCOMM LLC. The purchase agreement was made in late 2012 and was for a 30-by-30 degree section of historical AIS data that included the region of the Hawaiian Islands. The data include AIS long and unchecked reports for a one year period: August 2011 through mid-August 2012. The raw, monthly GPS files were locally converted to NetCDF for the PacIOOS data servers. Due to vendor constraints, release of the raw data is limited.\n\ncdm_data_type = Point\nVARIABLES:\nobs (observation, 0)\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nship_id_mmsi (ship identification number (MMSI), 0)\nnavigational_status (0)\nspeed_over_ground (kts)\ncourse_over_ground (deg)\ntrue_heading (deg)\nrate_of_turn (degrees minutes-1)\nposition_accuracy (0)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/ais_hi_20112012_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/ais_hi_20112012_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/ais_hi_20112012/index.json", "http://www.navcen.uscg.gov/?pageName=AISmain", "http://upwell.pfeg.noaa.gov/erddap/rss/ais_hi_20112012.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=ais_hi_20112012&showErrors=false&email=", "Pacific Islands Ocean Observing System (PacIOOS)", "ais_hi_20112012"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ais_john_20112012", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ais_john_20112012.graph", "", "", "public", "AIS Ship Traffic: Johnston Atoll: 2011-2012", "Ship position data from a satellite-based Automatic Identification System (AIS) were obtained jointly by PacIOOS (J. Potemra), SOEST/ORE of the University of Hawaii (E. Roth), and the Papahanaumokuakea Marine National Monument (PNMN) (D. Graham) through a one-time purchase from ORBCOMM LLC. The purchase agreement was made in late 2012 and was for a 30-by-30 degree section of historical AIS data that included the region surrounding Johnston Atoll. The data include AIS long and unchecked reports for a one year period: August 2011 through mid-August 2012. The raw, monthly GPS files were locally converted to NetCDF for the PacIOOS data servers. Due to vendor constraints, release of the raw data is limited.\n\ncdm_data_type = Point\nVARIABLES:\nobs (observation, 0)\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nship_id_mmsi (ship identification number (MMSI), 0)\nnavigational_status (0)\nspeed_over_ground (kts)\ncourse_over_ground (deg)\ntrue_heading (deg)\nrate_of_turn (degrees minutes-1)\nposition_accuracy (0)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/ais_john_20112012_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/ais_john_20112012_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/ais_john_20112012/index.json", "http://www.navcen.uscg.gov/?pageName=AISmain", "http://upwell.pfeg.noaa.gov/erddap/rss/ais_john_20112012.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=ais_john_20112012&showErrors=false&email=", "Pacific Islands Ocean Observing System (PacIOOS)", "ais_john_20112012"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ais_mari_20112012", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ais_mari_20112012.graph", "", "", "public", "AIS Ship Traffic: Mariana and Wake: 2011-2012", "Ship position data from a satellite-based Automatic Identification System (AIS) were obtained jointly by PacIOOS (J. Potemra), SOEST/ORE of the University of Hawaii (E. Roth), and the Papahanaumokuakea Marine National Monument (PNMN) (D. Graham) through a one-time purchase from ORBCOMM LLC. The purchase agreement was made in late 2012 and was for a 30-by-30 degree section of historical AIS data that included the region of the Mariana Islands. The data include AIS long and unchecked reports for a one year period: August 2011 through mid-August 2012. The raw, monthly GPS files were locally converted to NetCDF for the PacIOOS data servers. Due to vendor constraints, release of the raw data is limited.\n\ncdm_data_type = Point\nVARIABLES:\nobs (observation, 0)\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nship_id_mmsi (ship identification number (MMSI), 0)\nnavigational_status (0)\nspeed_over_ground (kts)\ncourse_over_ground (deg)\ntrue_heading (deg)\nrate_of_turn (degrees minutes-1)\nposition_accuracy (0)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/ais_mari_20112012_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/ais_mari_20112012_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/ais_mari_20112012/index.json", "http://www.navcen.uscg.gov/?pageName=AISmain", "http://upwell.pfeg.noaa.gov/erddap/rss/ais_mari_20112012.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=ais_mari_20112012&showErrors=false&email=", "Pacific Islands Ocean Observing System (PacIOOS)", "ais_mari_20112012"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ais_rose_20112012", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ais_rose_20112012.graph", "", "", "public", "AIS Ship Traffic: Rose Atoll: 2011-2012", "Ship position data from a satellite-based Automatic Identification System (AIS) were obtained jointly by PacIOOS (J. Potemra), SOEST/ORE of the University of Hawaii (E. Roth), and the Papahanaumokuakea Marine National Monument (PNMN) (D. Graham) through a one-time purchase from ORBCOMM LLC. The purchase agreement was made in late 2012 and was for a 30-by-30 degree section of historical AIS data that included the region surrounding Rose Atoll in American Samoa. The data include AIS long and unchecked reports for a one year period: August 2011 through mid-August 2012. The raw, monthly GPS files were locally converted to NetCDF for the PacIOOS data servers. Due to vendor constraints, release of the raw data is limited.\n\ncdm_data_type = Point\nVARIABLES:\nobs (observation, 0)\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nship_id_mmsi (ship identification number (MMSI), 0)\nnavigational_status (0)\nspeed_over_ground (kts)\ncourse_over_ground (deg)\ntrue_heading (deg)\nrate_of_turn (degrees minutes-1)\nposition_accuracy (0)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/ais_rose_20112012_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/ais_rose_20112012_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/ais_rose_20112012/index.json", "http://www.navcen.uscg.gov/?pageName=AISmain", "http://upwell.pfeg.noaa.gov/erddap/rss/ais_rose_20112012.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=ais_rose_20112012&showErrors=false&email=", "Pacific Islands Ocean Observing System (PacIOOS)", "ais_rose_20112012"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/aco_adcp_temp", "https://upwell.pfeg.noaa.gov/erddap/tabledap/aco_adcp_temp.graph", "", "", "public", "ALOHA Cabled Observatory (ACO): Acoustic Doppler Current Profiler (ADCP): Temperature", "The University of Hawaii's ALOHA (\"A Long-term Oligotrophic Habitat Assessment\") Cabled Observatory (ACO) is located 100 km north of the island of Oahu, Hawaii (22 45'N, 158W) in the North Pacific Ocean. It provides real-time oceanographic observations from a depth of about 4,800 m via a submarine fiber optic cable that comes ashore at Makaha on Oahu. This data set provides measurements of sea water temperature at the ACO at 1.83 m above the ocean bottom for the most recent 7 days.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstation_name\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\ndepth (m)\nsea_water_temperature (degree_Celsius)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/aco_adcp_temp_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/aco_adcp_temp_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/aco_adcp_temp/index.json", "http://aco-ssds.soest.hawaii.edu", "http://upwell.pfeg.noaa.gov/erddap/rss/aco_adcp_temp.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=aco_adcp_temp&showErrors=false&email=", "University of Hawaii", "aco_adcp_temp"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/aco_adcp_vel", "https://upwell.pfeg.noaa.gov/erddap/tabledap/aco_adcp_vel.graph", "", "", "public", "ALOHA Cabled Observatory (ACO): Acoustic Doppler Current Profiler (ADCP): Velocity", "The University of Hawaii's ALOHA (\"A Long-term Oligotrophic Habitat Assessment\") Cabled Observatory (ACO) is located 100 km north of the island of Oahu, Hawaii (22 45'N, 158W) in the North Pacific Ocean. It provides real-time oceanographic observations from a depth of about 4,800 m via a submarine fiber optic cable that comes ashore at Makaha on Oahu. This data set provides measurements of ocean current velocity at the ACO from a 250 kHz SonTek acoustic doppler current profiler (ADCP) at 1.83 m above the ocean bottom for the most recent 7 days. Velocities are flagged bad if the amplitude is excessively low or high. An amplitude is high if it exceeds the average of the ping before and the ping after by 20 counts. An amplitude is low if less than 6 counts. After this the velocities are flagged bad if the absolute deviation of the vertical velocity from its ensemble median exceeds 0.15 m/s or if its value is less than -0.25 m/s.\n\ncdm_data_type = Profile\nVARIABLES:\nstation_name\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (Depth of each location, m)\nlatitude (degrees_north)\nlongitude (degrees_east)\neastward_sea_water_velocity (current east component, meters/second)\nnorthward_sea_water_velocity (current north component, meters/second)\nupward_sea_water_velocity (current upward component, meters/second)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/aco_adcp_vel_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/aco_adcp_vel_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/aco_adcp_vel/index.json", "http://aco-ssds.soest.hawaii.edu", "http://upwell.pfeg.noaa.gov/erddap/rss/aco_adcp_vel.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=aco_adcp_vel&showErrors=false&email=", "University of Hawaii", "aco_adcp_vel"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nodcPJJU", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nodcPJJU.graph", "", "", "public", "AN EXPERIMENTAL DATASET: Underway Sea Surface Temperature and Salinity Aboard the Oleander, 2007-2010", "The data being submitted to NODC contain information about temperature and salinity obtained with the use of thermosalinographs (TSG) installed in ships of the NOAA fleet and other cargo and cruise ships. The data is transmitted to AOML/NOAA in real-time and submitted to a quality control procedure developed at AOML based on the Global Ocean Surface Underway Data Pilot Project (GOSUD) real-time control test. Data approved in these tests are submitted to the GTS. The data set submitted to NODC for distribution constitute the complete data set received by AOML with the corresponding flags after the quality control.\n\ncdm_data_type = Trajectory\nVARIABLES:\ncallSign (Call Sign)\ntime (seconds since 1970-01-01T00:00:00Z)\nlongitude (degrees_east)\nlatitude (degrees_north)\nintp (Internal TSG Temperature, degree_C)\nsal (TSG Practial Salinity, PSU)\ncond (TSG Conductivity, degree_C)\next (Thermistor Water Temperature, degrees_Celsius)\nsst (Sea Surface Temperature, degrees_Celsius)\nflag_a (QC flag-platform identification)\nflag_b (QC flag-impossible date)\nflag_c (QC flag-impossible location)\nflag_d (QC flag-position on land step)\nflag_e (QC flag-impossible speed)\nflag_f (QC flag-global ranges)\nflag_g (QC flag-regional ranges)\nflag_h (QC flag-spike test)\nflag_i (QC flag-constant value)\nflag_j (QC flag-gradient test)\nflag_k (QC flag-climatology and NCEP weekly analysis)\nflag_l (QC flag-buddy check)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nodcPJJU_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nodcPJJU_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nodcPJJU/index.json", "https://www.aoml.noaa.gov/phod/tsg/index.php", "http://upwell.pfeg.noaa.gov/erddap/rss/nodcPJJU.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nodcPJJU&showErrors=false&email=", "NOAA OAR AOML", "nodcPJJU"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/gtoppAT.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/gtoppAT", "https://upwell.pfeg.noaa.gov/erddap/tabledap/gtoppAT.graph", "", "", "public", "Animal Telemetry Network (ATN)", "These data (updated daily) are from the Animal Telemetry Network (ATN) program.  Begun as one of the field projects in the international Census of Marine Life, the Pacific-focused TOPP (Tagging of Pacific Predators) program was an international multidisciplinary collaboration of more than 75 scientists from 7 nations.  Over the decade beginning in 2000, TOPP researchers deployed more than 4,300 electronic tags on 23 different species of marine animals - yielding a dataset of more than 335,000 tracking days. To learn more please visit https://oceanview.pfeg.noaa.gov/ATN.\n\ncdm_data_type = Trajectory\nVARIABLES:\ncommonName (Common Name)\nyearDeployed (Year Deployed)\nproject\ntoppID (TOPP ID (unique))\nserialNumber (The Tag's Serial Number (not unique))\nisDrifter (Is Drifter?)\ntime (seconds since 1970-01-01T00:00:00Z)\nlongitude (degrees_east)\nlatitude (degrees_north)\nLC (Location Quality Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/gtoppAT_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/gtoppAT_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/gtoppAT/index.json", "https://gtopp.org/", "http://upwell.pfeg.noaa.gov/erddap/rss/gtoppAT.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=gtoppAT&showErrors=false&email=", "Animal Telemetry Network", "gtoppAT"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIcufes.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIcufes", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIcufes.graph", "", "", "public", "CalCOFI Continuous Underway Fish-Egg Sampler", "Samples collected using the Continuous Underway Fish-Egg Sampler, known as CUFES. The data include numbers of anchovy, sardine, jack mackerel, squid, hake, and unidentified fish eggs captured, and associated environmental.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\nsample_number\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nlatitude (Start Latitude, degrees_north)\nlongitude (Start Longitude, degrees_east)\nstart_temperature (degree C)\nstart_salinity (psu)\nstart_wind_speed (knots)\nstart_wind_direction (degrees)\nstart_pump_speed (M^3 per minute)\nstop_time (seconds since 1970-01-01T00:00:00Z)\nstop_latitude (degrees_north)\nstop_longitude (degrees_east)\nstop_temperature (degree C)\nstop_salinity (psu)\nstop_wind_speed (knots)\nstop_wind_direction (degrees)\nstop_pump_speed (M^3 per minute)\nsardine_eggs (count)\nanchovy_eggs (count)\njack_mackerel_eggs (count)\nhake_eggs (count)\nsquid_eggs (count)\nother_fish_eggs (count)\ncomments\nresorted\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIcufes_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIcufes_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIcufes/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIcufes.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIcufes&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIcufes"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIcruises.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIcruises", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIcruises.graph", "", "", "public", "CalCOFI Cruises", "Cruises using one or more ships conducted as part of the California Cooperative Oceanic Fisheries Investigations (CalCOFI) program and other related cruises conducted by the NOAA Southwest Fisheries Science Center from 1951 to present. Multi-purpose cruises e.g., CalCOFI and trawling, include a listing for each cruise type.\n\ncdm_data_type = Other\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\nyear\nmonth\ncruise_type\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIcruises/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIcruises.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIcruises&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIcruises"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIeggcnt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIeggcnt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIeggcnt.graph", "", "", "public", "CalCOFI Egg Counts", "Fish egg counts and standardized counts for eggs captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero eggs were captured for the species, i.e., negative tows. The \"Egg Counts Positive Tows\" table includes only tows where one or more eggs were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code (CalCOI Species Code)\negg_count (raw count)\neggs_10m2 (Standardized count of eggs for oblique tows, Eggs per ten meters squared of water sampled)\neggs_1000m3 (Standardized count of eggs for manta tows, Eggs per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIeggcnt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIeggcnt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIeggcnt/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIeggcnt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIeggcnt&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIeggcnt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIeggcntpos.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIeggcntpos", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIeggcntpos.graph", "", "", "public", "CalCOFI Egg Counts Positive Tows", "Fish egg counts and standardized counts for eggs captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes only tows where one or more eggs were captured for the species selected by the user, i.e., no \"zero\" tows. The \"Egg Counts\" table includes all tows by species, i.e., both positive and negative tows.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\negg_count (raw count)\neggs_10m2 (Standardized count of eggs for oblique tows, Eggs per ten meters squared of water sampled)\neggs_1000m3 (Standardized count of eggs for manta tows, Eggs per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIeggcntpos_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIeggcntpos_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIeggcntpos/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIeggcntpos.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIeggcntpos&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIeggcntpos"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIeggstg.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIeggstg", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIeggstg.graph", "", "", "public", "CalCOFI Egg Stages", "Egg morphological developmental stage for eggs of selected species captured in CalCOFI icthyoplankton nets. Sequential developmental stages are described by Moser and Ahlstrom (1985; see the info url references section).\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type (Tow Type Name)\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\negg_stage\negg_stage_count (Raw count of eggs in the stage)\neggs_10m2 (Standardized count of eggs for oblique tows, Eggs per ten meters squared of water sampled)\neggs_1000m3 (Standardized count of eggs for manta tows, Eggs per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIeggstg_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIeggstg_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIeggstg/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIeggstg.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIeggstg&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIeggstg"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntpos.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntpos", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntpos.graph", "", "", "public", "CalCOFI Larvae Counts Positive Tows", "Fish larvae counts and standardized counts for eggs captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]) . Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes only tows where one or more larvae were captured for the species selected by the user, i.e., no \"zero\" tows. The \"Larvae Counts\" table includes all tows by species, i.e., both positive and negative tows.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae in the size class for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae in the size class for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntpos_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntpos_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntpos/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntpos.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntpos&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntpos"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntAtoAM.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntAtoAM", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntAtoAM.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names A to AM", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntAtoAM_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntAtoAM_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntAtoAM/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntAtoAM.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntAtoAM&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntAtoAM"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntANtoAR.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntANtoAR", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntANtoAR.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names AN to AR", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntANtoAR_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntANtoAR_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntANtoAR/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntANtoAR.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntANtoAR&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntANtoAR"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntAStoBA.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntAStoBA", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntAStoBA.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names AS to BA", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntAStoBA_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntAStoBA_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntAStoBA/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntAStoBA.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntAStoBA&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntAStoBA"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntBCEtoBZ.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntBCEtoBZ", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntBCEtoBZ.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names BCE to BZ", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntBCEtoBZ_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntBCEtoBZ_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntBCEtoBZ/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntBCEtoBZ.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntBCEtoBZ&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntBCEtoBZ"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntCtoCE.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntCtoCE", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntCtoCE.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names C to CE", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntCtoCE_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntCtoCE_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntCtoCE/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntCtoCE.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntCtoCE&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntCtoCE"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntCDtoCH.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntCDtoCH", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntCDtoCH.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names CD to CH", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntCDtoCH_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntCDtoCH_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntCDtoCH/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntCDtoCH.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntCDtoCH&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntCDtoCH"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntCItoCO.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntCItoCO", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntCItoCO.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names CI to CO", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntCItoCO_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntCItoCO_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntCItoCO/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntCItoCO.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntCItoCO&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntCItoCO"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntCPtoDE.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntCPtoDE", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntCPtoDE.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names CP to DE", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntCPtoDE_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntCPtoDE_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntCPtoDE/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntCPtoDE.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntCPtoDE&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntCPtoDE"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntDHtoEC.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntDHtoEC", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntDHtoEC.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names DH to EC", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntDHtoEC_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntDHtoEC_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntDHtoEC/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntDHtoEC.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntDHtoEC&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntDHtoEC"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntEDtoEU.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntEDtoEU", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntEDtoEU.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names ED to EU", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntEDtoEU_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntEDtoEU_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntEDtoEU/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntEDtoEU.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntEDtoEU&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntEDtoEU"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntEVtoGN.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntEVtoGN", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntEVtoGN.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names EV to GN", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntEVtoGN_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntEVtoGN_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntEVtoGN/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntEVtoGN.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntEVtoGN&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntEVtoGN"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntGOtoHA.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntGOtoHA", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntGOtoHA.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names GO to HA", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntGOtoHA_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntGOtoHA_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntGOtoHA/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntGOtoHA.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntGOtoHA&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntGOtoHA"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntHBtoHI.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntHBtoHI", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntHBtoHI.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names HB to HI", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntHBtoHI_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntHBtoHI_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntHBtoHI/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntHBtoHI.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntHBtoHI&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntHBtoHI"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntHJtoID.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntHJtoID", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntHJtoID.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names HJ to ID", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntHJtoID_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntHJtoID_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntHJtoID/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntHJtoID.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntHJtoID&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntHJtoID"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntIEtoLA.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntIEtoLA", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntIEtoLA.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names IE to LA", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntIEtoLA_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntIEtoLA_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntIEtoLA/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntIEtoLA.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntIEtoLA&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntIEtoLA"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntLBtoLI.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntLBtoLI", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntLBtoLI.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names LB to LI", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntLBtoLI_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntLBtoLI_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntLBtoLI/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntLBtoLI.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntLBtoLI&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntLBtoLI"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntLJtoMA.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntLJtoMA", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntLJtoMA.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names LJ to MA", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntLJtoMA_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntLJtoMA_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntLJtoMA/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntLJtoMA.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntLJtoMA&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntLJtoMA"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntMBtoMO.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntMBtoMO", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntMBtoMO.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names MB to MO", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntMBtoMO_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntMBtoMO_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntMBtoMO/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntMBtoMO.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntMBtoMO&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntMBtoMO"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntMPtoNA.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntMPtoNA", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntMPtoNA.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names MP to NA", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntMPtoNA_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntMPtoNA_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntMPtoNA/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntMPtoNA.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntMPtoNA&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntMPtoNA"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntNBtoOL.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntNBtoOL", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntNBtoOL.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names NB to OL", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntNBtoOL_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntNBtoOL_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntNBtoOL/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntNBtoOL.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntNBtoOL&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntNBtoOL"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntOMtoOX.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntOMtoOX", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntOMtoOX.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names OM to OX", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntOMtoOX_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntOMtoOX_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntOMtoOX/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntOMtoOX.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntOMtoOX&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntOMtoOX"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntOYtoPI.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntOYtoPI", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntOYtoPI.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names OY to PI", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntOYtoPI_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntOYtoPI_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntOYtoPI/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntOYtoPI.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntOYtoPI&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntOYtoPI"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntPLtoPO.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntPLtoPO", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntPLtoPO.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names PL to PO", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntPLtoPO_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntPLtoPO_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntPLtoPO/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntPLtoPO.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntPLtoPO&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntPLtoPO"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntPPtoPZ.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntPPtoPZ", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntPPtoPZ.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names PP to PZ", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntPPtoPZ_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntPPtoPZ_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntPPtoPZ/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntPPtoPZ.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntPPtoPZ&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntPPtoPZ"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntQtoSA.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntQtoSA", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntQtoSA.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names Q to SA", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntQtoSA_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntQtoSA_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntQtoSA/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntQtoSA.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntQtoSA&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntQtoSA"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntSBtoSC.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntSBtoSC", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntSBtoSC.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names SB to SC", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntSBtoSC_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntSBtoSC_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntSBtoSC/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntSBtoSC.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntSBtoSC&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntSBtoSC"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntSDtoSI.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntSDtoSI", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntSDtoSI.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names SD to SI", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntSDtoSI_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntSDtoSI_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntSDtoSI/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntSDtoSI.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntSDtoSI&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntSDtoSI"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntSJtoST.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntSJtoST", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntSJtoST.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names SJ to ST", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntSJtoST_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntSJtoST_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntSJtoST/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntSJtoST.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntSJtoST&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntSJtoST"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntSUtoTE.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntSUtoTE", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntSUtoTE.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names SU to TE", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntSUtoTE_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntSUtoTE_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntSUtoTE/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntSUtoTE.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntSUtoTE&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntSUtoTE"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntTFtoU.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntTFtoU", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntTFtoU.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names TF to U", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntTFtoU_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntTFtoU_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntTFtoU/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntTFtoU.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntTFtoU&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntTFtoU"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntVtoZ.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntVtoZ", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvcntVtoZ.graph", "", "", "public", "CalCOFI Larvae Counts, Scientific Names V to Z", "Fish larvae counts and standardized counts for larvae captured in CalCOFI icthyoplankton nets (primarily vertical [Calvet or Pairovet], oblique [bongo or ring nets], and surface tows [Manta nets]). Surface tows are normally standardized to count per 1,000 m3 strained. Oblique tows are normally standardized to count per 10 m2 of surface sampled. This table includes all tows by species, even if zero larvae were captured for the species, i.e., negative tows. The \"Larvae Counts Positive Tows\" table includes only tows where one or more larvae were captured for the species selected by the user.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvcntVtoZ_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvcntVtoZ_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvcntVtoZ/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvcntVtoZ.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvcntVtoZ&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvcntVtoZ"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvsiz.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvsiz", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvsiz.graph", "", "", "public", "CalCOFI Larvae Sizes", "Size data for selected larval fish captured in CalCOFI icthyoplankton nets.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type (Tow Type Name)\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_size (Total length of the larvae, mm)\nlarvae_count (Raw count of larvae)\nlarvae_10m2 (Standardized count of larvae in the size class for oblique tows, Fish larvae per ten meters squared of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvsiz_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvsiz_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvsiz/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvsiz.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvsiz&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvsiz"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvstg.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvstg", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIlrvstg.graph", "", "", "public", "CalCOFI Larvae Stages", "Developmental stages (yolk sac, preflexion, flexion, postflexion, or transformation) of selected fish larvae captured in CalCOFI icthyoplankton nets.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type (Tow Type Name)\nnet_type\ntow_number\nnet_location\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nsample_quality\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nscientific_name\ncommon_name\nitis_tsn (Intergrated Taxomomic Information System Taxonomic Serial Number)\ncalcofi_species_code\nlarvae_stage\nlarvae_stage_count (Raw count of larvae in the stage)\nlarvae_10m2 (Standardized count of larvae in the stage for oblique tows, Fish larvae per ten meters squared of water sampled)\nlarvae_1000m3 (Standardized count of larvae in the stage for manta tows, Fish larvae per 1,000 cubic meters of water sampled)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIlrvstg_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIlrvstg_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIlrvstg/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIlrvstg.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIlrvstg&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIlrvstg"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdNOAAhydros.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdNOAAhydros", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdNOAAhydros.graph", "", "", "public", "CalCOFI NOAAHydros", "Hydrographic data collected by bucket, CTD, or 10-m Niskin bottle as part of CalCOFI and related cruises. Note that most oxygen and salinity values in this table have not been calibrated with water samples. Most users will want to use the Scripps hydrographic data instead.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntime (Estimated datetime, seconds since 1970-01-01T00:00:00Z)\ncast_type\nstandard_depth (meters)\ntemperature (Water Temperature, degree C)\nsalinity (psu)\ndensity (Water Density, 1000*(g/l - 1))\noxygen (Dissolved Oxygen Content, ml/l)\ndynamic_height (dynamic meter)\npercent_saturation (Percent Oxygen saturation, %)\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdNOAAhydros_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdNOAAhydros_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdNOAAhydros/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdNOAAhydros.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdNOAAhydros&showErrors=false&email=", "NOAA SWFSC", "erdNOAAhydros"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/siocalcofiHydroBottle.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/siocalcofiHydroBottle", "https://upwell.pfeg.noaa.gov/erddap/tabledap/siocalcofiHydroBottle.graph", "", "", "public", "CalCOFI SIO Hydrographic Bottle Data", "SIO Hydrographic data\n\ncdm_data_type = Point\nVARIABLES:\ncst_cnt (Cast Count)\nbtl_cnt (Bottle Count)\nsta_id (Line and Station)\ndepth_id (Bottle Identifier)\ndepthm (Bottle Depth, meters)\nt_degc (Temperature, degree C)\nsalinity (psu)\no2ml_l (Measured Oxygen, ml/L of seawater)\nstheta (Potential Density of water)\nbtlnum (Bottle Number)\nrecind (Data Descriptor Code)\nt_prec (Temperature Precision)\nt_qual (Temperature Quality)\ns_prec (Salinity Precision)\ns_qual (Salinity Quality)\np_qual (Pressure Quality)\no_qual (Oxygen Precision)\nsthtaq (Potential Density Quality)\no2satq (Oxygen saturation Quality)\nchlora (Chlorophyll-a, ug/L of seawater)\nchlqua (Chlorophyll-a quality)\nphaeop (Phaeopigment Concentration, ug/L of seawater)\nphaqua (Phaeopigments quality)\npo4ug (Measured Phosphate Concentration, uM/L of seawater)\npo4q (Phosphate quality)\nsio3ug (Measured Silicate concentration, uM/L of seawater)\nsio3qu (Silicate quality)\n... (33 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/siocalcofiHydroBottle_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/siocalcofiHydroBottle_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/siocalcofiHydroBottle/index.json", "https://calcofi.org/ccdata/data-formats/77-database-tables.html", "http://upwell.pfeg.noaa.gov/erddap/rss/siocalcofiHydroBottle.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=siocalcofiHydroBottle&showErrors=false&email=", "UCSD SIO", "siocalcofiHydroBottle"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/siocalcofiHydroBottleReport.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/siocalcofiHydroBottleReport", "https://upwell.pfeg.noaa.gov/erddap/tabledap/siocalcofiHydroBottleReport.graph", "", "", "public", "CalCOFI SIO Hydrographic Bottle Report data", "SIO Hydrographic data\n\ncdm_data_type = Point\nVARIABLES:\ncst_cnt (Cast Count)\nbtl_cnt (Bottle Count)\nsta_id (Line and Station)\ndepth_id (Bottle Identifier)\nr_depth (Reported Bottle Depth, meters)\nr_temp (Reported Temperature, degree C)\nr_potemp (Reported Potential Temperature, degree C)\nr_salinity (Reported Salinity, psu)\nr_sigma (Reported Potential Density of water)\nr_sva (Reported Specific Volume Anomaly, degree C)\nr_dynht (Reported Dynamic Height, dynamic meters)\nr_o2 (Reported Oxygen, ml/L of seawater)\nr_o2sat (Reported Oxygen Saturation, %)\nr_sio3 (Reported Silicate Concentration, uM/L of seawater)\nr_po4 (Reported Phosphate Concentration, uM/L of seawater)\nr_no3 (Reported Nitrate Concentration, uM/L of seawater)\nr_no2 (Reported Nitrite Concentration, uM/L of seawater)\nr_chla (Reported Chlorophyll-a, ug/L of seawater)\nr_phaeo (Reported Phaeophytin, ug/L of seawater)\nr_pres (Reported Pressure, db)\nr_samp (Sample Number)\nlatitude (degrees_north)\nlongitude (degrees_east)\ntime (seconds since 1970-01-01T00:00:00Z)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/siocalcofiHydroBottleReport_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/siocalcofiHydroBottleReport_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/siocalcofiHydroBottleReport/index.json", "https://calcofi.org/ccdata/data-formats/77-database-tables.html", "http://upwell.pfeg.noaa.gov/erddap/rss/siocalcofiHydroBottleReport.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=siocalcofiHydroBottleReport&showErrors=false&email=", "UCSD SIO", "siocalcofiHydroBottleReport"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/siocalcofiHydroCasts.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/siocalcofiHydroCasts", "https://upwell.pfeg.noaa.gov/erddap/tabledap/siocalcofiHydroCasts.graph", "", "", "public", "CalCOFI SIO Hydrographic Cast Data", "SIO Hydrographic data\n\ncdm_data_type = Point\nVARIABLES:\ncst_cnt (Cast Count)\ncruise_id\ncruz_sta (Cruise Id)\ndbsta_id (CalCOFI Line and Station)\ncast_id\nsta_id (Line and Station)\nquarter (Quarter of Year)\nsta_code (Station Type)\ndistance (Distance from shore)\ndate\nyear\nmonth\njulian_date\njulian_day\ntime_ascii (Time of Cast)\nlatitude (degrees_north)\nlatitude_degrees\nlatitude_minutes\nlatitude_hemisphere\nlongitude (degrees_east)\nlongitude_degrees\nlongitude_minutes\nlongitude_hemisphere\nrpt_line (Reported Line Number)\nst_line (Nominal CalCOFI Line)\nac_line (Actual Line Number)\nrpt_sta (Reported Station)\n... (34 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/siocalcofiHydroCasts_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/siocalcofiHydroCasts_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/siocalcofiHydroCasts/index.json", "https://calcofi.org/ccdata/data-formats/77-database-tables.html", "http://upwell.pfeg.noaa.gov/erddap/rss/siocalcofiHydroCasts.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=siocalcofiHydroCasts&showErrors=false&email=", "UCSD SIO", "siocalcofiHydroCasts"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIstns.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIstns", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFIstns.graph", "", "", "public", "CalCOFI Stations", "Summary information about sample locations for NOAA CalCOFI and related cruises.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nbottom_depth (fathoms)\nremarks\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFIstns_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFIstns_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFIstns/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFIstns.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFIstns&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFIstns"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFItowtyp.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFItowtyp", "", "", "", "public", "CalCOFI Tow Types", "Description of each CalCOFI net type and its associated abbreviation in the CalCOFI database.\n\ncdm_data_type = Other\nVARIABLES:\nnet_type\nlong_net_type\ndescription\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFItowtyp/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFItowtyp.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFItowtyp&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFItowtyp"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFItows.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFItows", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCalCOFItows.graph", "", "", "public", "CalCOFI Tows", "Location, performance, and summary information about individual net tows.\n\ncdm_data_type = Point\nVARIABLES:\ncruise (Cruise Code)\nship (Ship Name)\nship_code\norder_occupied\ntow_type\nnet_type\ntow_number\nnet_location\ntime (Start Time, seconds since 1970-01-01T00:00:00Z)\nstandard_haul_factor\nvolume_sampled (cubic meters)\npercent_sorted (%/100)\nmesh_size (Net Mesh Size, microns)\ntotal_eggs\nsorted_plankton_volume (ml/1000 m^3)\nsample_quality\nsmall_plankton_volume (ml/1000 m^3 of water strained)\ntotal_plankton_volume (ml/1000 m^3 of water strained)\ntotal_larvae\nend_time (End Timestamp, seconds since 1970-01-01T00:00:00Z)\ntotal_juveniles_or_adults (Total Juvenile/Adults)\nlatitude (degrees_north)\nlongitude (degrees_east)\nline\nstation\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCalCOFItows_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCalCOFItows_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCalCOFItows/index.json", "https://oceanview.pfeg.noaa.gov/CalCOFI/calcofi_info.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCalCOFItows.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCalCOFItows&showErrors=false&email=", "NOAA SWFSC", "erdCalCOFItows"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fedCalLandings.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fedCalLandings", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fedCalLandings.graph", "", "", "public", "California Commercial Fish Landings, 1931-1978", "The Groundfish Analysis Team at the SWFSC Fisheries Ecology Division (Santa\nCruz) completed work on a California commercial landings database, which\nincludes landings from 1931 through 2007. Landings from 1931 through 1968\nwere recovered using funds and services provided by the NESDIS Climate\nDatabase Modernization Program (CDMP). The recovered data, when combined with\nmore recent landings estimates from the California Cooperative Groundfish\nSurvey from 1969 to 2007, forms one of the longest detailed catch records in\nthe US. The 1931-68 period includes monthly summaries of catches by 10-minute\ngeographic blocks.  These data are now openly available to the public for use\nin stock assessments and monitoring of climate effects. Pearson is currently\nworking with the California Department of Fish and Game to extend the\ngeographic summary information to more recent years. Also, the taxa reported\nin the historical data are the \"market categories\" used by fish processors,\nand may involve multiple species groupings. A project has been initiated to\nresolve historical landings to provide best estimates for individual species.\n\nWhen using this data it is critical to understand that a market category is\nNOT a species code - it is a sort group.  While landings in some market\ncategories may consist entirely of the species for which they are named,\nlandings in other market categories may contain few of the species for which\nthey are named.\n\nGeneral Notes:\nThe data from 1930-1932 has a lot of unknown block data.  When the trawl\nlanding data is entered, some of this may be resolved.  At the same time,\nsome gear data will be available.\n\nWhen Source Corp finishes data entry of the landing receipt data, gear code\ndata will be available from 1951-1968; however, this will not be completed\nuntil around 2011.\n\nBlock Maps: https://oceanview.pfeg.noaa.gov/PaCOOS/mkt_catch/ca_landings_info.html\nData Source: California Department of Fish & Game.\nData Assembly: NOAA SWFSC FED; Contact: Don.Pearson@noaa.gov\n\ncdm_data_type = Other\nVARIABLES:\nmarket_category\n... (13 more variables)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/fedCalLandings/index.json", "https://oceanview.pfeg.noaa.gov/PaCOOS/mkt_catch", "http://upwell.pfeg.noaa.gov/erddap/rss/fedCalLandings.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fedCalLandings&showErrors=false&email=", "NOAA SWFSC FED", "fedCalLandings"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCAMarCatLM.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCAMarCatLM", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCAMarCatLM.graph", "", "", "public", "California Fish Market Catch Landings, Long List, 1928-2002, Monthly", "Database of fish and invertebrates caught off California and landed in California, including commercial freshwater catches in California through but not after 1971 and some maricultured shellfish such as oysters through 1980.  For more information, see\nhttps://oceanview.pfeg.noaa.gov/las_fish1/doc/names_describe.html and\nhttps://oceanview.pfeg.noaa.gov/las_fish1/doc/marketlist.html .\n\ncdm_data_type = Other\nVARIABLES:\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\nyear\nfish (Fish Name)\nport\nlandings (pounds)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/erdCAMarCatLM/index.json", "https://oceanview.pfeg.noaa.gov/las_fish1/doc/names_describe.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCAMarCatLM.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCAMarCatLM&showErrors=false&email=", "CA DFG, NOAA ERD", "erdCAMarCatLM"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCAMarCatLY.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCAMarCatLY", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCAMarCatLY.graph", "", "", "public", "California Fish Market Catch Landings, Long List, 1928-2002, Yearly", "Database of fish and invertebrates caught off California and landed in California, including commercial freshwater catches in California through but not after 1971 and some maricultured shellfish such as oysters through 1980.  For more information, see\nhttps://oceanview.pfeg.noaa.gov/las_fish1/doc/names_describe.html and\nhttps://oceanview.pfeg.noaa.gov/las_fish1/doc/marketlist.html .\n\nThis dataset has the sums of the monthly values for each calendar year.\n\ncdm_data_type = Other\nVARIABLES:\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\nyear\nfish (Fish Name)\nport\nlandings (pounds)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/erdCAMarCatLY/index.json", "https://oceanview.pfeg.noaa.gov/las_fish1/doc/names_describe.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCAMarCatLY.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCAMarCatLY&showErrors=false&email=", "CA DFG, NOAA ERD", "erdCAMarCatLY"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCAMarCatSM.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCAMarCatSM", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCAMarCatSM.graph", "", "", "public", "California Fish Market Catch Landings, Short List, 1928-2002, Monthly", "Database of fish and invertebrates caught off California and landed in California, including commercial freshwater catches in California through but not after 1971 and some maricultured shellfish such as oysters through 1980.  For more information, see\nhttps://oceanview.pfeg.noaa.gov/las_fish1/doc/names_describe.html and\nhttps://oceanview.pfeg.noaa.gov/las_fish1/doc/marketlist.html .\n\ncdm_data_type = Other\nVARIABLES:\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\nyear\nfish (Fish Name)\nport\nlandings (pounds)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/erdCAMarCatSM/index.json", "https://oceanview.pfeg.noaa.gov/las_fish1/doc/names_describe.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCAMarCatSM.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCAMarCatSM&showErrors=false&email=", "CA DFG, NOAA ERD", "erdCAMarCatSM"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCAMarCatSY.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCAMarCatSY", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCAMarCatSY.graph", "", "", "public", "California Fish Market Catch Landings, Short List, 1928-2002, Yearly", "Database of fish and invertebrates caught off California and landed in California, including commercial freshwater catches in California through but not after 1971 and some maricultured shellfish such as oysters through 1980.  For more information, see\nhttps://oceanview.pfeg.noaa.gov/las_fish1/doc/names_describe.html and\nhttps://oceanview.pfeg.noaa.gov/las_fish1/doc/marketlist.html .\n\nThis dataset has the sums of the monthly values for each calendar year.\n\ncdm_data_type = Other\nVARIABLES:\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\nyear\nfish (Fish Name)\nport\nlandings (pounds)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/erdCAMarCatSY/index.json", "https://oceanview.pfeg.noaa.gov/las_fish1/doc/names_describe.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCAMarCatSY.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCAMarCatSY&showErrors=false&email=", "CA DFG, NOAA ERD", "erdCAMarCatSY"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfmT.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfmT", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfmT.graph", "", "", "public", "Channel Islands, Kelp Forest Monitoring, Sea Temperature, 1993-2007", "This dataset from the Channel Islands National Park's Kelp Forest Monitoring Program has subtidal temperature data taken at permanent monitoring sites.  Since 1993, remote temperature loggers manufactured by Onset Computer Corporation were deployed at each site approximately 10-20 cm from the bottom in a underwater housing.  Since 1993, three models of temperature loggers (HoboTemp (tm), StowAway (R) and Tidbit(R)) were used to collect temperature data every 1-5 hours depending on the model used.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstation\nlongitude (degrees_east)\nlatitude (degrees_north)\ndepth (m)\ntime (seconds since 1970-01-01T00:00:00Z)\ntemperature (Sea Water Temperature, degree_C)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCinpKfmT_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCinpKfmT_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCinpKfmT/index.json", "http://www.nps.gov/chis/naturescience/index.htm", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCinpKfmT.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCinpKfmT&showErrors=false&email=", "CINP", "erdCinpKfmT"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfmSFNH.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfmSFNH", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfmSFNH.graph", "", "", "public", "Channel Islands, Kelp Forest Monitoring, Size and Frequency, Natural Habitat, 1985-2007", "This dataset has measurements of the size of selected animal species at selected locations in the Channel Islands National Park. Sampling is conducted annually between the months of May-October, so the Time data in this file is July 1 of each year (a nominal value). The size frequency measurements were taken within 10 meters of the transect line at each site.  Depths at the site vary some, but we describe the depth of the site along the transect line where that station's temperature logger is located, a typical depth for the site.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nid (Station Identifier)\nlongitude (degrees_east)\nlatitude (degrees_north)\ndepth (m)\ntime (seconds since 1970-01-01T00:00:00Z)\ncommon_name\nspecies_name\nsize (mm)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCinpKfmSFNH_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCinpKfmSFNH_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCinpKfmSFNH/index.json", "http://www.nps.gov/chis/naturescience/index.htm", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCinpKfmSFNH.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCinpKfmSFNH&showErrors=false&email=", "CINP", "erdCinpKfmSFNH"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfm1Q.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfm1Q", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfm1Q.graph", "", "", "public", "Channel Islands, Kelp Forest Monitoring, Survey, 1m Quadrat, 1982-2007", "This dataset from the Channel Islands National Park's Kelp Forest Monitoring Program has measurements of the abundance (density) of relatively abundant selected sedentary indicator species.  The summary data presented here represents the mean density per square meter. Sampling is conducted annually between the months of May-October, so the Time data in this file is July 1 of each year (a nominal value). The actual measurements were taken at various depths, so the Depth data in this file is the depth of the station's temperature logger, which is a typical depth.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstation\nlongitude (degrees_east)\nlatitude (degrees_north)\ndepth (m)\ntime (seconds since 1970-01-01T00:00:00Z)\nAgarum_fimbriatum_adult_Mean_Density (m-2)\nAgarum_fimbriatum_adult_StdDev\nAgarum_fimbriatum_adult_StdErr\nAgarum_fimbriatum_juvenile_Mean_Density (m-2)\nAgarum_fimbriatum_juvenile_StdDev\nAgarum_fimbriatum_juvenile_StdErr\nAlloclinus_holderi_Mean_Density (m-2)\nAlloclinus_holderi_StdDev\nAlloclinus_holderi_StdErr\nAplysia_californica_Mean_Density (m-2)\nAplysia_californica_StdDev\nAplysia_californica_StdErr\nAsterina_miniata_Mean_Density (m-2)\nAsterina_miniata_StdDev\nAsterina_miniata_StdErr\nCentrostephanus_coronatus_Mean_Density (m-2)\nCentrostephanus_coronatus_StdDev\n... (91 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCinpKfm1Q_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCinpKfm1Q_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCinpKfm1Q/index.json", "http://www.nps.gov/chis/naturescience/index.htm", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCinpKfm1Q.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCinpKfm1Q&showErrors=false&email=", "CINP", "erdCinpKfm1Q"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfm5Q.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfm5Q", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfm5Q.graph", "", "", "public", "Channel Islands, Kelp Forest Monitoring, Survey, 5m Quadrat, 1996-2007", "This dataset from the Channel Islands National Park's Kelp Forest Monitoring Program has measurements of the abundance of selected rare, clumped, sedentary indicator species. The summary data presented here represents the mean density per square meter. Sampling is conducted annually between the months of May-October, so the Time data in this file is July 1 of each year (a nominal value). The original measurements were taken at various depths, so the Depth data in this file is the depth of the station's temperature logger, which is a typical depth.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstation\nlongitude (degrees_east)\nlatitude (degrees_north)\ndepth (m)\ntime (seconds since 1970-01-01T00:00:00Z)\nMacrocystis_pyrifera_Adult_Mean_Density (m-2)\nMacrocystis_pyrifera_Adult_StdDev\nMacrocystis_pyrifera_Adult_StdErr\nMacrocystis_pyrifera_Subadult_Mean_Density (m-2)\nMacrocystis_pyrifera_Subadult_StdDev\nMacrocystis_pyrifera_Subadult_StdErr\nPisaster_giganteus_Mean_Density (m-2)\nPisaster_giganteus_StdDev\nPisaster_giganteus_StdErr\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCinpKfm5Q_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCinpKfm5Q_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCinpKfm5Q/index.json", "http://www.nps.gov/chis/naturescience/index.htm", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCinpKfm5Q.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCinpKfm5Q&showErrors=false&email=", "CINP", "erdCinpKfm5Q"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfmBT.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfmBT", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfmBT.graph", "", "", "public", "Channel Islands, Kelp Forest Monitoring, Survey, Band Transect, 1983-2007", "This dataset from the Channel Islands National Park's Kelp Forest Monitoring Program has measurements of the abundance and distribution of rare and clumped organisms not adequately sampled by quadrats. The summary data presented here represents the mean density per square meter. Sampling is conducted annually between the months of May-October, so the Time data in this file is July 1 of each year (a nominal value). The actual measurements were taken at various depths, so the Depth data in this file is the depth of the station's temperature logger, which is a typical depth.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstation\nlongitude (degrees_east)\nlatitude (degrees_north)\ndepth (m)\ntime (seconds since 1970-01-01T00:00:00Z)\nAplysia_californica_Mean_Density (m-2)\nAplysia_californica_StdDev\nAplysia_californica_StdErr\nCrassedoma_giganteum_Mean_Density (m-2)\nCrassedoma_giganteum_StdDev\nCrassedoma_giganteum_StdErr\nHaliotis_corrugata_Mean_Density (m-2)\nHaliotis_corrugata_StdDev\nHaliotis_corrugata_StdErr\nHaliotis_fulgens_Mean_Density (m-2)\nHaliotis_fulgens_StdDev\nHaliotis_fulgens_StdErr\nHaliotis_rufescens_Mean_Density (m-2)\nHaliotis_rufescens_StdDev\nHaliotis_rufescens_StdErr\nKelletia_kelletii_Mean_Density (m-2)\nKelletia_kelletii_StdDev\n... (31 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCinpKfmBT_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCinpKfmBT_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCinpKfmBT/index.json", "http://www.nps.gov/chis/naturescience/index.htm", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCinpKfmBT.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCinpKfmBT&showErrors=false&email=", "CINP", "erdCinpKfmBT"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfmFT.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfmFT", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfmFT.graph", "", "", "public", "Channel Islands, Kelp Forest Monitoring, Survey, Fish Transect, 1985-2007", "This dataset from the Channel Islands National Park's Kelp Forest Monitoring Program has measurements of the abundance of fish species. The original measurements were taken at various depths, so the Depth data in this file is the depth of the station's temperature logger, which is a typical depth.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstation\nlongitude (degrees_east)\nlatitude (degrees_north)\ndepth (m)\ntime (seconds since 1970-01-01T00:00:00Z)\nChromis_punctipinnis_Adult (Number of Chromis punctipinnis Adult, per 100mX2mX30m transect)\nChromis_punctipinnis_Juvenile (Number of Chromis punctipinnis Juvenile, per 100mX2mX30m transect)\nDamalichthys_vacca_Adult (Number of Damalichthys vacca Adult, per 100mX2mX30m transect)\nDamalichthys_vacca_Juvenile (Number of Damalichthys vacca Juvenile, per 100mX2mX30m transect)\nEmbiotoca_jacksoni_Adult (Number of Embiotoca jacksoni Adult, per 100mX2mX30m transect)\nEmbiotoca_jacksoni_Juvenile (Number of Embiotoca jacksoni Juvenile, per 100mX2mX30m transect)\nEmbiotoca_lateralis_Adult (Number of Embiotoca lateralis Adult, per 100mX2mX30m transect)\nEmbiotoca_lateralis_Juvenile (Number of Embiotoca lateralis Juvenile, per 100mX2mX30m transect)\nGirella_nigricans_Adult (Number of Girella nigricans Adult, per 100mX2mX30m transect)\nGirella_nigricans_Juvenile (Number of Girella nigricans Juvenile, per 100mX2mX30m transect)\nHalichoeres_semicinctus_Female (Number of Halichoeres semicinctus Female, per 100mX2mX30m transect)\nHalichoeres_semicinctus_Male (Number of Halichoeres semicinctus Male, per 100mX2mX30m transect)\nHypsypops_rubicundus_Adult (Number of Hypsypops rubicundus Adult, per 100mX2mX30m transect)\nHypsypops_rubicundus_Juvenile (Number of Hypsypops rubicundus Juvenile, per 100mX2mX30m transect)\nOxyjulis_californica_Adult (Number of Oxyjulis californica Adult, per 100mX2mX30m transect)\nOxyjulis_californica_Juvenile (Number of Oxyjulis californica Juvenile, per 100mX2mX30m transect)\nParalabrax_clathratus_Adult (Number of Paralabrax clathratus Adult, per 100mX2mX30m transect)\nParalabrax_clathratus_Juvenile (Number of Paralabrax clathratus Juvenile, per 100mX2mX30m transect)\nSebastes_atrovirens_Adult (Number of Sebastes atrovirens Adult, per 100mX2mX30m transect)\n... (8 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCinpKfmFT_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCinpKfmFT_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCinpKfmFT/index.json", "http://www.nps.gov/chis/naturescience/index.htm", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCinpKfmFT.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCinpKfmFT&showErrors=false&email=", "CINP", "erdCinpKfmFT"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfmRPC.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfmRPC", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfmRPC.graph", "", "", "public", "Channel Islands, Kelp Forest Monitoring, Survey, Random Point Contact, 1982-2007", "This dataset from the Channel Islands National Park's Kelp Forest Monitoring Program has estimates of substrate composition and percent cover of selected algal and invertebrate taxa. The data summary data presented here represents the mean percent cover of the indicator species at the site. Sampling is conducted annually between the months of May-October, so the Time data in this file is July 1 of each year (a nominal value). The actual measurements were taken at various depths, so the Depth data in this file is the depth of the station's temperature logger, which is a typical depth.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstation\nlongitude (degrees_east)\nlatitude (degrees_north)\ndepth (m)\ntime (seconds since 1970-01-01T00:00:00Z)\nArticulated_Coralline_Algae_Mean (percent cover)\nArticulated_Coralline_Algae_StdDev\nArticulated_Coralline_Algae_StdErr\nAstrangia_lajollaensis_Mean (percent cover)\nAstrangia_lajollaensis_StdDev\nAstrangia_lajollaensis_StdErr\nBalanophyllia_elegans_Mean (percent cover)\nBalanophyllia_elegans_StdDev\nBalanophyllia_elegans_StdErr\nBalanus_spp_Mean (percent cover)\nBalanus_spp_StdDev\nBalanus_spp_StdErr\nBare_Substrate_Mean (percent cover)\nBare_Substrate_StdDev\nBare_Substrate_StdErr\nCobble_Mean (percent cover)\nCobble_StdDev\n... (100 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdCinpKfmRPC_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdCinpKfmRPC_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdCinpKfmRPC/index.json", "http://www.nps.gov/chis/naturescience/index.htm", "http://upwell.pfeg.noaa.gov/erddap/rss/erdCinpKfmRPC.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdCinpKfmRPC&showErrors=false&email=", "CINP", "erdCinpKfmRPC"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/FRDCPSTrawlLHHaulCatch.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/FRDCPSTrawlLHHaulCatch", "https://upwell.pfeg.noaa.gov/erddap/tabledap/FRDCPSTrawlLHHaulCatch.graph", "", "", "public", "CPS Trawl Life History Haul Catch Data", "Weight in kilograms for all species (identified to lowest taxonomic criteria) caught during SWFSC-FRD fishery independent surveys (including DEPM, ATM, SaKe) of coastal pelagic species using mid-water trawls (with most tows performed near the surface) at position and times listed. Additional information for a subset of individuals from some species can be found in either CPS Trawl Life History Length Frequency or the CPS Trawl Life History Specimen datasets.\n\ncdm_data_type = Point\nVARIABLES:\ncruise\nship\nhaul (Haul Number)\ncollection\nlatitude (Start Latitude, degrees_north)\nlongitude (Start Longitude, degrees_east)\nstop_latitude\nstop_longitude\ntime (Equilibrium Time, seconds since 1970-01-01T00:00:00Z)\nhaulback_time (Haul Back Time, seconds since 1970-01-01T00:00:00Z)\nsurface_temp (Surface Temperature, degree C)\nsurface_temp_method (Surface Temperature Method)\nship_spd_through_water (Ship Speed Through Water, knot)\nitis_tsn (ItisTSN)\nscientific_name\nsubsample_count\nsubsample_weight (kg)\nremaining_weight (kg)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/FRDCPSTrawlLHHaulCatch_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/FRDCPSTrawlLHHaulCatch_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/FRDCPSTrawlLHHaulCatch/index.json", "https://swfsc.noaa.gov/FRD/", "http://upwell.pfeg.noaa.gov/erddap/rss/FRDCPSTrawlLHHaulCatch.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=FRDCPSTrawlLHHaulCatch&showErrors=false&email=", "NOAA-Fisheries/Southwest Fisheries Science Center", "FRDCPSTrawlLHHaulCatch"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/FRDCPSTrawlLHLengthFrequency.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/FRDCPSTrawlLHLengthFrequency", "https://upwell.pfeg.noaa.gov/erddap/tabledap/FRDCPSTrawlLHLengthFrequency.graph", "", "", "public", "CPS Trawl Life History Length Frequency Data", "Length distribution of a subset of individuals from a species (mainly non-target) caught during SWFSC-FRD fishery independent trawl surveys of coastal pelagic species. Measured lengths for indicated length type (fork, standard, total, or mantle) were grouped in 10 mm bins (identified by the midpoint of the length class) and counts are recorded by sex. Does not include species with individual lengths recorded in the CPS Trawl Life History Specimen dataset.\n\ncdm_data_type = Other\nVARIABLES:\ncruise\nship\nhaul (Haul Number)\ncollection\nlatitude (degrees_north)\nlongitude (degrees_east)\ntime (seconds since 1970-01-01T00:00:00Z)\nitis_tsn (ItisTSN)\nscientific_name\nlength_class\nlength_type\nmale\nfemale\nunknown\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/FRDCPSTrawlLHLengthFrequency_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/FRDCPSTrawlLHLengthFrequency_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/FRDCPSTrawlLHLengthFrequency/index.json", "https://swfsc.noaa.gov/FRD/", "http://upwell.pfeg.noaa.gov/erddap/rss/FRDCPSTrawlLHLengthFrequency.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=FRDCPSTrawlLHLengthFrequency&showErrors=false&email=", "NOAA-Fisheries/Southwest Fisheries Science Center", "FRDCPSTrawlLHLengthFrequency"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/FRDCPSTrawlLHSpecimen.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/FRDCPSTrawlLHSpecimen", "https://upwell.pfeg.noaa.gov/erddap/tabledap/FRDCPSTrawlLHSpecimen.graph", "", "", "public", "CPS Trawl Life History Specimen Data", "Individual specimens measured (weight in grams and length in mm) and sexed from mainly targeted species caught during SWFSC-FRD fishery independent trawl surveys of coastal pelagic species. Individuals are categorized as random or non-random samples. Does not include species with length bins recorded in the CPS Trawl Life History Length Frequency dataset.\n\ncdm_data_type = Other\nVARIABLES:\ncruise\nship\nhaul (Haul Number)\ncollection\nlatitude (degrees_north)\nlongitude (degrees_east)\ntime (seconds since 1970-01-01T00:00:00Z)\nitis_tsn (ItisTSN)\nscientific_name\nspecimen_number\nsex\nis_random_sample\nweight (g)\nstandard_length (mm)\nfork_length (mm)\ntotal_length (mm)\nmantle_length (mm)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/FRDCPSTrawlLHSpecimen_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/FRDCPSTrawlLHSpecimen_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/FRDCPSTrawlLHSpecimen/index.json", "https://swfsc.noaa.gov/FRD/", "http://upwell.pfeg.noaa.gov/erddap/rss/FRDCPSTrawlLHSpecimen.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=FRDCPSTrawlLHSpecimen&showErrors=false&email=", "NOAA-Fisheries/Southwest Fisheries Science Center", "FRDCPSTrawlLHSpecimen"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/AWS-CRRF", "https://upwell.pfeg.noaa.gov/erddap/tabledap/AWS-CRRF.graph", "", "", "public", "CRRF Weather Station: Palau: Koror: Ngeanges Island", "Since 2007, the Coral Reef Research Foundation (CRRF) has operated a Campbell Scientific automatic weather station (AWS) in Palau designed to measure meteorological/atmospheric conditions relevant to Koror State's Rock Islands Southern Lagoon, a World Heritage Site. With little flat land in the Rock Islands, the weather station is located on a 40-ft tower situated on a karst ridge on Ngeanges Island at 100 ft elevation, about 5.4 km (3.5 mi) from CRRF's study site at Jellyfish Lake. It measures a suite of atmospheric conditions for comparison with CRRF's temporary, floating weather station located on a tripod in Jellyfish Lake, and provides vital data for studying how local weather conditions and ENSO events affect the marine lake environment.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\naltitude (Distance above mean sea level, m)\nstation_name (AWS-CRRF: CRRF Weather Station: Palau: Koror: Ngeanges Island)\nair_temperature (Celsius)\nair_temperature_max (maximum air temperature, Celsius)\nair_temperature_max_time (maximum air temperature: observation time, seconds since 1970-01-01T00:00:00Z)\nair_temperature_min (minimum air temperature, Celsius)\nair_temperature_min_time (minimum air temperature: observation time, seconds since 1970-01-01T00:00:00Z)\nair_temperature_std (air temperature standard deviation, Celsius)\nwind_speed (m/s)\nwind_speed_max (gust speed, m/s)\nwind_speed_max_time (gust speed: observation time, seconds since 1970-01-01T00:00:00Z)\nwind_speed_min (minimum wind speed, m/s)\nwind_speed_min_time (minimum wind speed: observation time, seconds since 1970-01-01T00:00:00Z)\nwind_speed_std (wind speed standard deviation, m/s)\nwind_from_direction (wind direction, degrees)\nwind_from_direction_std (wind direction standard deviation, degrees)\nrainfall_amount (total rainfall, mm)\n... (23 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/AWS-CRRF_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/AWS-CRRF_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/AWS-CRRF/index.json", "https://www.pacioos.hawaii.edu/weather/obs-koror/", "http://upwell.pfeg.noaa.gov/erddap/rss/AWS-CRRF.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=AWS-CRRF&showErrors=false&email=", "Coral Reef Research Foundation (CRRF)", "AWS-CRRF"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ecocast_inputs", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ecocast_inputs.graph", "", "", "public", "Ecocast species weightings and environmental data dates", "The dataset contains the species weightings and the dates of the environmental data used for each EcoCast Map dataset (https://coastwatch.pfeg.noaa.gov/erddap/griddap/ecocast)\n\ncdm_data_type = Grid\nVARIABLES:\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndate\nblueshark (Blue Shark Bycatch Model Weighting)\nbluesharkTRK (Blue Shark Tracking Model Weighting)\nsealions (California Sea Lions Tracking Model Weighting)\nleatherbacks (Leatherback Turtles Model Weighting)\nswordfish (Swordfish Model Weighting)\nsst_time (Date of Sea Surface Temperature Data, seconds since 1970-01-01T00:00:00Z)\nchl_time (Date of Chlorophyll-a Data, seconds since 1970-01-01T00:00:00Z)\neke_time (Date of Eddy Kinetic Energy Data, seconds since 1970-01-01T00:00:00Z)\nssh_time (Date of Sea Surface Height Data, seconds since 1970-01-01T00:00:00Z)\nwind_time (Date of Wind Data, seconds since 1970-01-01T00:00:00Z)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/ecocast_inputs/index.json", "https://coastwatch.pfeg.noaa.gov/ecocast", "http://upwell.pfeg.noaa.gov/erddap/rss/ecocast_inputs.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=ecocast_inputs&showErrors=false&email=", "NOAA NMFS SWFSC ERD", "ecocast_inputs"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/prboSefiDiet", "https://upwell.pfeg.noaa.gov/erddap/tabledap/prboSefiDiet.graph", "", "", "public", "Farallon Island Seabird Diet Summary", "Diet summary data for Cassin's Auklets, Common Murres, Pigeon Guillemots, and Rhinoceros Auklets from the Farallon Islands. Data presented are the proportion by number of the most important prey items for each species.\n\nThe proportions presented in this table are defined as the number of the specific prey items observed divided by the total number of identified prey items for that season. Data for the most important prey species are presented here with all other prey lumped together as \"other\". See the SEFI Research Plans and Protocols document under Research Tools for more information on how diet data is collected for each species.\n\ncdm_data_type = Other\nVARIABLES:\nyear\nRHAU_Rockfish (Rockfish in Rhinoceros Auklet's Diet, percent)\nRHAU_Anchovy (Anchovy in Rhinoceros Auklet's Diet, percent)\nRHAU_Saury (Saury in Rhinoceros Auklet's Diet, percent)\nRHAU_Other (Other in Rhinoceros Auklet's Diet, percent)\nCOMU_Rockfish (Rockfish in Common Murre's Diet, percent)\nCOMU_AnchovySardine (Anchovy&Sardine in Common Murre's Diet, percent)\nCOMU_Other (Other in Common Murre's Diet, percent)\nPIGU_Rockfish (Rockfish in Pigeon Guillemot's Diet, percent)\nPIGU_Sculpin (Sculpin in Pigeon Guillemot's Diet, percent)\nPIGU_Flatfish (Flatfish in Pigeon Guillemot's Diet, percent)\nPIGU_Other (Other in Pigeon Guillemot's Diet, percent)\nCAAU_Eupahusiids (Eupahusiids in Cassin's Auklet's Diet, percent)\nCAAU_Mysiids (Mysiids in Cassin's Auklet's Diet, percent)\nCAAU_Amphipods (Amphipods in Cassin's Auklet's Diet, percent)\nCAAU_Pices (Pices in Cassin's Auklet's Diet, percent)\nCAAU_Other (Other in Cassin's Auklet's Diet, percent)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/prboSefiDiet/index.json", "http://data.prbo.org/cadc2/index.php?mact=LinkedArticles,cntnt01,detail,0&cntnt01article_id=155&cntnt01returnid=150", "http://upwell.pfeg.noaa.gov/erddap/rss/prboSefiDiet.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=prboSefiDiet&showErrors=false&email=", "PRBO", "prboSefiDiet"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/prboSefiPhen", "https://upwell.pfeg.noaa.gov/erddap/tabledap/prboSefiPhen.graph", "", "", "public", "Farallon Island Seabird Phenology Summary", "Phenology (timing of breeding) summary data for Brandt's Cormorant, Cassin's Auklet, Common Murre, Pigeon Guillemot, and Rhinoceros Auklet breeding at the Farallon Islands. Data presented are annual mean laying date for the first or only egg laid along with the standard deviation.\n\nThe mean laying date is calculated from all sites where the exact laying date is known within the check period for that species (1-5 days). The mean lay dates are presented as julian dates (day of year) and the standard deviation is in days. See the SEFI Research Plans and Protocols document under Research Tools for more information on how lay dates are determined for each species.\n\ncdm_data_type = Other\nVARIABLES:\nyear\nBRAC_mean (Brandt's Cormorant Mean, day_of_year)\nBRAC_sd (Brandt's Cormorant Standard Deviation, days)\nCAAU_mean (Cassin's Auklet Mean, day_of_year)\nCAAU_sd (Cassin's Auklet Standard Deviation, days)\nCOMU_mean (Common Murre Mean, day_of_year)\nCOMU_sd (Common Murre Standard Deviation, days)\nPIGU_mean (Pigeon Guillemot Mean, day_of_year)\nPIGU_sd (Pigeon Guillemot Standard Deviation, days)\nRHAU_mean (Rhinoceros Auklet Mean, day_of_year)\nRHAU_sd (Rhinoceros Auklet Standard Deviation, days)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/prboSefiPhen/index.json", "http://data.prbo.org/cadc2/index.php?mact=LinkedArticles,cntnt01,detail,0&cntnt01article_id=156&cntnt01returnid=150", "http://upwell.pfeg.noaa.gov/erddap/rss/prboSefiPhen.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=prboSefiPhen&showErrors=false&email=", "PRBO", "prboSefiPhen"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/prboSefiPop", "https://upwell.pfeg.noaa.gov/erddap/tabledap/prboSefiPop.graph", "", "", "public", "Farallon Island Seabird Population Summary", "Annual breeding population estimates for Brandt's Cormorant, Cassin's Auklet, Common Murre, Double-crested Cormorant, Pelagic Cormorant, Pigeon Guillemot, Tufted Puffin, and Western Gull at the Farallon Islands. Data presented are the number of breeding adults estimated for each season.\n\nBreeding population estimates for most species are based on either direct counts of animals or nests. Cassin's auklet estimates are based on the percent change in burrow/crevice density within a series of index plots. This relative change is then applied to the last full census from 1989 to arrive at a current population estimate. See the SEFI Research Plans and Protocols document under Research Tools for more information on how these estimates were determined.\n\nNote: Cassin's auklet population estimate is for Southeast Farallon Island only.\n\ncdm_data_type = Other\nVARIABLES:\nyear\nBRAC (Population of Brandt's Cormorant, count)\nCAAU (Population of Cassin's Auklet, count)\nCOMU (Population of Common Murre, count)\nDCCO (Population of Double-crested Cormorant, count)\nPECO (Population of Pelagic Cormorant, count)\nPIGU (Population of Pigeon Guillemot, count)\nTUPU (Population of Tufted Puffin, count)\nWEGU (Population of Western Gull, count)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/prboSefiPop/index.json", "http://data.prbo.org/cadc2/index.php?mact=LinkedArticles,cntnt01,detail,0&cntnt01article_id=154&cntnt01returnid=150", "http://upwell.pfeg.noaa.gov/erddap/rss/prboSefiPop.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=prboSefiPop&showErrors=false&email=", "PRBO", "prboSefiPop"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/prboSefiProd", "https://upwell.pfeg.noaa.gov/erddap/tabledap/prboSefiProd.graph", "", "", "public", "Farallon Island Seabird Productivity Summary", "Annual mean productivity for Ashy Storm-petrel, Brandt's Cormorant, Cassin's Auklet, Common Murre, Pelagic Cormorant, Pigeon Guillemot, Rhinoceros Auklet and Western Gull breeding on the Farallon Islands. Data presented are the mean number of chicks fledged per breeding pair along with the standard deviation.\n\nMean annual productivity (number of chicks fledged per breeding pair) is determined through regular checks of breeding sites and includes data from all breeding attempts within that season. See the SEFI Research Plans and Protocols document under Research Tools for more information on how these estimates were determined.\n\ncdm_data_type = Other\nVARIABLES:\nyear\nASSP_rs (Ashy Storm-petrel Chicks per Breeding Pair, mean)\nASSP_sd (Ashy Storm-petrel Standard Deviation)\nBRAC_rs (Brandt's Cormorant Chicks per Breeding Pair, mean)\nBRAC_sd (Brandt's Cormorant Standard Deviation)\nCAAU_rs (Cassin's Auklet Chicks per Breeding Pair, mean)\nCAAU_sd (Cassin's Auklet Standard Deviation)\nCOMU_rs (Common Murre Chicks per Breeding Pair, mean)\nCOMU_sd (Common Murre Standard Deviation)\nPIGU_rs (Pigeon Guillemot Chicks per Breeding Pair, mean)\nPIGU_sd (Pigeon Guillemot Standard Deviation)\nPECO_rs (Pelagic Cormorant Chicks per Breeding Pair, mean)\nPECO_sd (Pelagic Cormorant Standard Deviation)\nRHAU_rs (Rhinoceros Auklet Chicks per Breeding Pair, mean)\nRHAU_sd (Rhinoceros Auklet Standard Deviation)\nWEGU_rs (Western Gull Chicks per Breeding Pair, mean)\nWEGU_sd (Western Gull Standard Deviation)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/prboSefiProd/index.json", "http://data.prbo.org/cadc2/index.php?mact=LinkedArticles,cntnt01,detail,0&cntnt01article_id=153&cntnt01returnid=150", "http://upwell.pfeg.noaa.gov/erddap/rss/prboSefiProd.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=prboSefiProd&showErrors=false&email=", "PRBO", "prboSefiProd"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_1000genomes", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_1000genomes.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_1000genomes/", "public", "File Names from the AWS S3 1000genomes Bucket: 1000 Genomes", "This dataset has file information from the AWS S3 1000genomes bucket at https://1000genomes.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: 1000 Genomes\nName2: http://www.internationalgenome.org/formats\nDescription: The 1000 Genomes Project is an international collaboration which has established the most detailed catalogue of human genetic variation, including SNPs, structural variants, and their haplotype context. The final phase of the project sequenced more than 2500 individuals from 26 different populations around the world and produced an integrated set of phased haplotypes with more than 80 million variants for these individuals.\n\nDocumentation: https://docs.opendata.aws/1000genomes/readme.html\nContact: http://www.internationalgenome.org/contact\nUpdateFrequency: Not updated\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_1000genomes/index.json", "https://registry.opendata.aws/1000-genomes/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_1000genomes.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_1000genomes&showErrors=false&email=", "Amazon Web Services", "awsS3Files_1000genomes"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_3kricegenome", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_3kricegenome.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_3kricegenome/", "public", "File Names from the AWS S3 3kricegenome Bucket: 3000 Rice Genomes Project", "This dataset has file information from the AWS S3 3kricegenome bucket at https://3kricegenome.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: 3000 Rice Genomes Project\nName2: http://s3.amazonaws.com/3kricegenome/README-snp_pipeline.txt\nDescription: The 3000 Rice Genome Project is an international effort to sequence the genomes of 3,024 rice varieties from 89 countries.\n\nDocumentation: https://docs.opendata.aws/3kricegenome/readme.html\nContact: http://iric.irri.org/contact-us\nUpdateFrequency: Not updated\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_3kricegenome/index.json", "https://registry.opendata.aws/3kricegenome/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_3kricegenome.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_3kricegenome&showErrors=false&email=", "Amazon Web Services", "awsS3Files_3kricegenome"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_aft_vbi_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_aft_vbi_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_aft_vbi_pds/", "public", "File Names from the AWS S3 aft-vbi-pds Bucket: Amazon Bin Image Dataset: Over 500,000 bin JPEG images and corresponding JSON metadata files describing items in bins in Amazon Fulfillment Centers.", "This dataset has file information from the AWS S3 aft-vbi-pds bucket at https://aft-vbi-pds.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Amazon Bin Image Dataset\nName2: Over 500,000 bin JPEG images and corresponding JSON metadata files describing items in bins in Amazon Fulfillment Centers.\nDescription: The Amazon Bin Image Dataset contains over 500,000 images and metadata from bins of a pod in an operating Amazon Fulfillment Center. The bin images in this dataset are captured as robot units carry pods as part of normal Amazon Fulfillment Center operations.\n\nDocumentation: https://docs.opendata.aws/aft-vbi-pds/readme.html\nContact: amazon-bin-images@amazon.com\nManagedBy: [Amazon](https://www.amazon.com/)\nUpdateFrequency: Not updated\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_aft_vbi_pds/index.json", "https://registry.opendata.aws/amazon-bin-imagery/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_aft_vbi_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_aft_vbi_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_aft_vbi_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_allen_brain_observatory", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_allen_brain_observatory.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_allen_brain_observatory/", "public", "File Names from the AWS S3 allen-brain-observatory Bucket: Allen Brain Observatory - Visual Coding AWS Public Data Set: Project data files in a public bucket", "This dataset has file information from the AWS S3 allen-brain-observatory bucket at https://allen-brain-observatory.s3.us-west-2.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Allen Brain Observatory - Visual Coding AWS Public Data Set\nName2: Project data files in a public bucket\nDescription: The Allen Brain Observatory \u2013 Visual Coding is the first standardized in vivo survey of physiological activity in the mouse visual cortex, featuring representations of visually evoked calcium responses from GCaMP6-expressing neurons in selected cortical layers, visual areas, and Cre lines.\n\nDocumentation: https://github.com/AllenInstitute/AllenSDK/wiki/Use-the-Allen-Brain-Observatory-%E2%80%93-Visual-Coding-on-AWS\nContact: awspublicdataset@alleninstitute.org\nManagedBy: [Allen Institute](http://www.alleninstitute.org/)\nUpdateFrequency: Annually\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_allen_brain_observatory/index.json", "https://registry.opendata.aws/allen-brain-observatory/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_allen_brain_observatory.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_allen_brain_observatory&showErrors=false&email=", "Amazon Web Services", "awsS3Files_allen_brain_observatory"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_allen_brain_observatory_templates", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_allen_brain_observatory_templates.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_allen_brain_observatory_templates/", "public", "File Names from the AWS S3 allen-brain-observatory-templates Bucket: Allen Brain Observatory - Visual Coding AWS Public Data Set: SageMaker launch template with s3fs bucket mounts", "This dataset has file information from the AWS S3 allen-brain-observatory-templates bucket at https://allen-brain-observatory-templates.s3.us-west-2.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Allen Brain Observatory - Visual Coding AWS Public Data Set\nName2: SageMaker launch template with s3fs bucket mounts\nDescription: The Allen Brain Observatory \u2013 Visual Coding is the first standardized in vivo survey of physiological activity in the mouse visual cortex, featuring representations of visually evoked calcium responses from GCaMP6-expressing neurons in selected cortical layers, visual areas, and Cre lines.\n\nDocumentation: https://github.com/AllenInstitute/AllenSDK/wiki/Use-the-Allen-Brain-Observatory-%E2%80%93-Visual-Coding-on-AWS\nContact: awspublicdataset@alleninstitute.org\nManagedBy: [Allen Institute](http://www.alleninstitute.org/)\nUpdateFrequency: Annually\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_allen_brain_observatory_templates/index.json", "https://registry.opendata.aws/allen-brain-observatory/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_allen_brain_observatory_templates.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_allen_brain_observatory_templates&showErrors=false&email=", "Amazon Web Services", "awsS3Files_allen_brain_observatory_templates"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_amazon_reviews_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_amazon_reviews_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_amazon_reviews_pds/", "public", "File Names from the AWS S3 amazon-reviews-pds Bucket: Amazon Customer Reviews Dataset: TSV files of reviews", "This dataset has file information from the AWS S3 amazon-reviews-pds bucket at https://amazon-reviews-pds.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Amazon Customer Reviews Dataset\nName2: TSV files of reviews\nDescription: Amazon Customer Reviews (a.k.a. Product Reviews) is one of Amazon\u2019s iconic products. In a period of over two decades since the first review in 1995, millions of Amazon customers have contributed over a hundred million reviews to express opinions and describe their experiences regarding products on the Amazon.com website. Over 130+ million customer reviews are available to researchers as part of this dataset.\n\nDocumentation: https://s3.amazonaws.com/amazon-reviews-pds/readme.html\nContact: customer-review-dataset@amazon.com\nManagedBy: [Amazon](https://www.amazon.com/)\nUpdateFrequency: Not defined\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_amazon_reviews_pds/index.json", "https://registry.opendata.aws/amazon-reviews/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_amazon_reviews_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_amazon_reviews_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_amazon_reviews_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_avg_kitti", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_avg_kitti.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_avg_kitti/", "public", "File Names from the AWS S3 avg-kitti Bucket: KITTI Vision Benchmark Suite", "This dataset has file information from the AWS S3 avg-kitti bucket at https://avg-kitti.s3.eu-central-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: KITTI Vision Benchmark Suite\nName2: http://www.cvlibs.net/datasets/kitti/raw_data.php\nDescription: Dataset and benchmarks for computer vision research in the context of autonomous driving. The dataset has been recorded in and around the city of Karlsruhe, Germany using the mobile platform AnnieWay (VW station wagon) which has been equipped with several RGB and monochrome cameras, a Velodyne HDL 64 laser scanner as well as an accurate RTK corrected GPS/IMU localization unit. The dataset has been created for computer vision and machine learning research on stereo, optical flow, visual odometry, semantic segmentation, semantic instance segmentation, road segmentation, single image depth prediction, depth map completion, 2D and 3D object detection and object tracking. In addition, several raw data recordings are provided. The datasets are captured by driving around the mid-size city of Karlsruhe, in rural areas and on highways. Up to 15 cars and 30 pedestrians are visible per image.\n\nDocumentation: http://www.cvlibs.net/datasets/kitti/\nContact: http://www.cvlibs.net/people.php\nUpdateFrequency: Not updated\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_avg_kitti/index.json", "https://registry.opendata.aws/kitti/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_avg_kitti.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_avg_kitti&showErrors=false&email=", "Amazon Web Services", "awsS3Files_avg_kitti"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_aws_earth_mo_atmospheric_mogreps_g_prd", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_aws_earth_mo_atmospheric_mogreps_g_prd.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_aws_earth_mo_atmospheric_mogreps_g_prd/", "public", "File Names from the AWS S3 aws-earth-mo-atmospheric-mogreps-g-prd Bucket: UK Met Office Atmospheric Deterministic and Probabilistic Forecasts: [Met Office Global and Regional Ensemble Prediction System (Global) - MOGREPS-G](https://www.metoffice.gov.uk/binaries/content/assets/metofficegovuk/pdf/data/mogreps-g-parameters-may-2019.pdf)", "This dataset has file information from the AWS S3 aws-earth-mo-atmospheric-mogreps-g-prd bucket at https://aws-earth-mo-atmospheric-mogreps-g-prd.s3.eu-west-2.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: UK Met Office Atmospheric Deterministic and Probabilistic Forecasts\nName2: [Met Office Global and Regional Ensemble Prediction System (Global) - MOGREPS-G](https://www.metoffice.gov.uk/binaries/content/assets/metofficegovuk/pdf/data/mogreps-g-parameters-may-2019.pdf)\nDescription: Meteorological data reusers now have an exciting opportunity to sample, experiment and evaluate Met Office atmospheric model data, whilst also experiencing a transformative method of requesting data via Restful APIs on AWS. All ahead of Met Office\u2019s own operationally supported API platform that will be launched in late 2019.\n\nDocumentation: https://github.com/MetOffice/aws-earth-examples\nContact: https://www.metoffice.gov.uk/about-us/contact\nUpdateFrequency: Daily (with 24 hour delay)\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_aws_earth_mo_atmospheric_mogreps_g_prd/index.json", "https://registry.opendata.aws/uk-met-office/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_aws_earth_mo_atmospheric_mogreps_g_prd.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_aws_earth_mo_atmospheric_mogreps_g_prd&showErrors=false&email=", "Amazon Web Services", "awsS3Files_aws_earth_mo_atmospheric_mogreps_g_prd"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_aws_gsod", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_aws_gsod.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_aws_gsod/", "public", "File Names from the AWS S3 aws-gsod Bucket: Global Surface Summary of Day: Measurements and metadata", "This dataset has file information from the AWS S3 aws-gsod bucket at https://aws-gsod.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Global Surface Summary of Day\nName2: Measurements and metadata\nDescription: GSOD is a collection of daily weather measurements (temperature, wind speed, humidity, pressure, and more) from 9000+ weather stations around the world.\n\nDocumentation: https://www.ncdc.noaa.gov/\nContact: https://www.ncdc.noaa.gov/\nUpdateFrequency: Currently updated infrequently. Last updated on September 13, 2016.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_aws_gsod/index.json", "https://registry.opendata.aws/noaa-gsod/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_aws_gsod.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_aws_gsod&showErrors=false&email=", "Amazon Web Services", "awsS3Files_aws_gsod"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_broad_references", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_broad_references.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_broad_references/", "public", "File Names from the AWS S3 broad-references Bucket: Broad Genome References: This dataset includes two human genome references assembled by the Genome Reference Consortium: Hg19 and Hg38.", "This dataset has file information from the AWS S3 broad-references bucket at https://broad-references.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Broad Genome References\nName2: This dataset includes two human genome references assembled by the Genome Reference Consortium: Hg19 and Hg38.\nDescription: Broad maintained human genome reference builds hg19/hg38 and decoy references.\n\nDocumentation: https://s3.amazonaws.com/broad-references/broad-references-readme.html\nContact: hensonc@broadinstitute.org\nManagedBy: Broad Institute\nUpdateFrequency: Monthly\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_broad_references/index.json", "https://registry.opendata.aws/broad-references/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_broad_references.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_broad_references&showErrors=false&email=", "Amazon Web Services", "awsS3Files_broad_references"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_cbers_meta_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_cbers_meta_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_cbers_meta_pds/", "public", "File Names from the AWS S3 cbers-meta-pds Bucket: CBERS on AWS: CBERS metadata (Quicklooks, metadata)", "This dataset has file information from the AWS S3 cbers-meta-pds bucket at https://cbers-meta-pds.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: CBERS on AWS\nName2: CBERS metadata (Quicklooks, metadata)\nDescription: This project creates a S3 repository with imagery acquired by the China-Brazil Earth Resources Satellite (CBERS). The image files are recorded and processed by Instituto Nacional de Pesquisa Espaciais (INPE) and are converted to Cloud Optimized Geotiff format in order to optimize its use for cloud based applications. The repository contains all CBERS-4 MUX, AWFI, PAN5M and PAN10M scenes acquired since the start of the satellite mission and is daily updated with new scenes.\n\nDocumentation: https://github.com/fredliporace/cbers-on-aws\nContact: https://lists.osgeo.org/mailman/listinfo/cbers-pds\nManagedBy: [AMS Kepler](https://amskepler.com/)\nUpdateFrequency: Daily\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_cbers_meta_pds/index.json", "https://registry.opendata.aws/cbers/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_cbers_meta_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_cbers_meta_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_cbers_meta_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_cgiardata", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_cgiardata.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_cgiardata/", "public", "File Names from the AWS S3 cgiardata Bucket: CCAFS-Climate Data: ARC GRID, and ARC ASCII format compressed", "This dataset has file information from the AWS S3 cgiardata bucket at https://cgiardata.s3.us-west-2.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: CCAFS-Climate Data\nName2: ARC GRID, and ARC ASCII format compressed\nDescription: High resolution climate data to help assess the impacts of climate change primarily on agriculture. These open access datasets of climate projections will help researchers make climate change impact assessments.\n\nDocumentation: http://www.ccafs-climate.org\nContact: http://www.ccafs-climate.org/contact/\nUpdateFrequency: Every three months\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_cgiardata/index.json", "https://registry.opendata.aws/cgiardata/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_cgiardata.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_cgiardata&showErrors=false&email=", "Amazon Web Services", "awsS3Files_cgiardata"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_commoncrawl", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_commoncrawl.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_commoncrawl/", "public", "File Names from the AWS S3 commoncrawl Bucket: Common Crawl: Crawl data (WARC and ARC format)", "This dataset has file information from the AWS S3 commoncrawl bucket at https://commoncrawl.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Common Crawl\nName2: Crawl data (WARC and ARC format)\nDescription: A corpus of web crawl data composed of over 25 billion web pages.\n\nDocumentation: http://commoncrawl.org/the-data/get-started/\nContact: http://commoncrawl.org/connect/contact-us/\nManagedBy: [Common Crawl](http://commoncrawl.org/)\nUpdateFrequency: Monthly\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_commoncrawl/index.json", "https://registry.opendata.aws/commoncrawl/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_commoncrawl.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_commoncrawl&showErrors=false&email=", "Amazon Web Services", "awsS3Files_commoncrawl"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_cornell_eas_data_lake", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_cornell_eas_data_lake.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_cornell_eas_data_lake/", "public", "File Names from the AWS S3 cornell-eas-data-lake Bucket: Cornell EAS Data Lake: Cornell EAS Data Lake", "This dataset has file information from the AWS S3 cornell-eas-data-lake bucket at https://cornell-eas-data-lake.s3.us-east-2.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Cornell EAS Data Lake\nName2: Cornell EAS Data Lake\nDescription: Earth & Atmospheric Sciences at Cornell University has created a public data lake of climate data. The data is stored in columnar storage formats (ORC) to make it straightforward to query using standard tools like Amazon Athena or Apache Spark. The data itself is originally intended to be used for building decision support tools for farmers and digital agriculture. The first dataset is the historical NDFD / NDGD data distributed by NCEP / NOAA / NWS. The NDFD (National Digital Forecast Database) and NDGD (National Digital Guidance Database) contain gridded forecasts and observations at 2.5km resolution for the Contiguous United States (CONUS). There are also 5km grids for several smaller US regions and non-continguous territories, such as Hawaii, Guam, Puerto Rico and Alaska. NOAA distributes archives of the NDFD/NDGD via its NOAA Operational Model Archive and Distribution System (NOMADS) in Grib2 format. The data has been converted to ORC to optimize storage space and to, more importantly, simplify data access via standard data analytics tools.\n\nDocumentation: https://datalake.eas.cornell.edu/\nContact: digitalag@cornell.edu\nUpdateFrequency: Hourly\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_cornell_eas_data_lake/index.json", "https://registry.opendata.aws/cornell-eas-data-lake/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_cornell_eas_data_lake.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_cornell_eas_data_lake&showErrors=false&email=", "Amazon Web Services", "awsS3Files_cornell_eas_data_lake"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_cse_cic_ids2018", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_cse_cic_ids2018.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_cse_cic_ids2018/", "public", "File Names from the AWS S3 cse-cic-ids2018 Bucket: A Realistic Cyber Defense Dataset (CSE-CIC-IDS2018): Network traffic and log files", "This dataset has file information from the AWS S3 cse-cic-ids2018 bucket at https://cse-cic-ids2018.s3.ca-central-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: A Realistic Cyber Defense Dataset (CSE-CIC-IDS2018)\nName2: Network traffic and log files\nDescription: This dataset is the result of a collaborative project between the Communications Security Establishment (CSE) and The Canadian Institute for Cybersecurity (CIC) that use the notion of profiles to generate cybersecurity dataset in a systematic manner. It incluides a detailed description of intrusions along with abstract distribution models for applications, protocols, or lower level network entities. The dataset includes seven different attack scenarios, namely Brute-force, Heartbleed, Botnet, DoS, DDoS, Web attacks, and infiltration of the network from inside. The attacking infrastructure includes 50 machines and the victim organization has 5 departments includes 420 PCs and 30 servers. This dataset includes the network traffic and log files of each machine from the victim side, along with 80 network traffic features extracted from captured traffic using CICFlowMeter-V3. For more information on the creation of this dataset, see this paper by researchers at the Canadian Institute for Cybersecurity (CIC) and the University of New Brunswick (UNB): [Toward Generating a New Intrusion Detection Dataset and Intrusion Traffic Characterization](http://www.scitepress.org/Papers/2018/66398/66398.pdf).\n\nDocumentation: http://www.unb.ca/cic/datasets/ids-2018.html\nContact: CIC@unb.ca\nUpdateFrequency: Annualy\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_cse_cic_ids2018/index.json", "https://registry.opendata.aws/cse-cic-ids2018/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_cse_cic_ids2018.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_cse_cic_ids2018&showErrors=false&email=", "Amazon Web Services", "awsS3Files_cse_cic_ids2018"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_cytodata", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_cytodata.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_cytodata/", "public", "File Names from the AWS S3 cytodata Bucket: Cell Painting Image Collection: Images, extracted features and aggregated profiles are available as a S3 bucket", "This dataset has file information from the AWS S3 cytodata bucket at https://cytodata.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Cell Painting Image Collection\nName2: Images, extracted features and aggregated profiles are available as a S3 bucket\nDescription: The Cell Painting Image Collection is a collection of freely downloadable microscopy image sets. Cell Painting is an unbiased high throughput imaging assay used to analyze perturbations in cell models. In addition to the images themselves, each set includes a description of the biological application and some type of \"ground truth\" (expected results). Researchers are encouraged to use these image sets as reference points when developing, testing, and publishing new image analysis algorithms for the life sciences. We hope that the this data set will lead to a better understanding of which methods are best for various biological image analysis applications.\n\nDocumentation: https://github.com/cytodata/cytodata-hackathon-2018\nContact: Post on https://forum.image.sc/ and tag with \"cellpainting\"\nUpdateFrequency: irregularly\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_cytodata/index.json", "https://registry.opendata.aws/cell-painting-image-collection/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_cytodata.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_cytodata&showErrors=false&email=", "Amazon Web Services", "awsS3Files_cytodata"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_czb_tabula_muris", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_czb_tabula_muris.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_czb_tabula_muris/", "public", "File Names from the AWS S3 czb-tabula-muris Bucket: Tabula Muris", "This dataset has file information from the AWS S3 czb-tabula-muris bucket at https://czb-tabula-muris.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Tabula Muris\nName2: https://github.com/czbiohub/tabula-muris\nDescription: Tabula Muris is a compendium of single cell transcriptomic data from the model organism *Mus musculus* comprising more than 100,000 cells from 20 organs and tissues. These data represent a new resource for cell biology, reveal gene expression in poorly characterized cell populations, and allow for direct and controlled comparison of gene expression in cell types shared between tissues, such as T-lymphocytes and endothelial cells from different anatomical locations. Two distinct technical approaches were used for most organs: one approach, microfluidic droplet-based 3\u2019-end counting, enabled the survey of thousands of cells at relatively low coverage, while the other, FACS-based full length transcript analysis, enabled characterization of cell types with high sensitivity and coverage. The cumulative data provide the foundation for an atlas of transcriptomic cell biology. See: https://www.nature.com/articles/s41586-018-0590-4\n\nDocumentation: https://github.com/czbiohub/tabula-muris/blob/master/tabula-muris-on-aws.md\nContact: If you have questions about the data, you can create an Issue at https://github.com/czbiohub/tabula-muris.\nManagedBy: [Chan Zuckerberg Biohub](https://www.czbiohub.org/)\nUpdateFrequency: This is the final version of the dataset, it will not be updated.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_czb_tabula_muris/index.json", "https://registry.opendata.aws/tabula-muris/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_czb_tabula_muris.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_czb_tabula_muris&showErrors=false&email=", "Amazon Web Services", "awsS3Files_czb_tabula_muris"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_dataforgood_fb_data", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_dataforgood_fb_data.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_dataforgood_fb_data/", "public", "File Names from the AWS S3 dataforgood-fb-data Bucket: High Resolution Population Density Maps + Demographic Estimates by CIESIN and Facebook: CSV and Cloud-optimized GeoTIFF files", "This dataset has file information from the AWS S3 dataforgood-fb-data bucket at https://dataforgood-fb-data.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: High Resolution Population Density Maps + Demographic Estimates by CIESIN and Facebook\nName2: CSV and Cloud-optimized GeoTIFF files\nDescription: Population data for a selection of countries, allocated to 1 arcsecond blocks and provided in a combination of CSV and Cloud-optimized GeoTIFF files. This refines [CIESIN\u2019s Gridded Population of the World](https://sedac.ciesin.columbia.edu/data/collection/gpw-v4) using machine learning models on high-resolution worldwide Digital Globe satellite imagery. CIESIN population counts aggregated from worldwide census data are allocated to blocks where imagery appears to contain buildings.\n\nDocumentation: [Project overview](https://dataforgood.fb.com/population-density-maps-documentation/) and [dataset description](https://docs.opendata.aws/dataforgood-fb-data/readme.html)\nContact: disastermaps@fb.com\nManagedBy: |\nUpdateFrequency: Quarterly\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_dataforgood_fb_data/index.json", "https://registry.opendata.aws/dataforgood-fb-hrsl/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_dataforgood_fb_data.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_dataforgood_fb_data&showErrors=false&email=", "Amazon Web Services", "awsS3Files_dataforgood_fb_data"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_datasets_elasticmapreduce_ngrams_books", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_datasets_elasticmapreduce_ngrams_books.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_datasets_elasticmapreduce_ngrams_books/", "public", "File Names from the AWS S3 datasets.elasticmapreduce Bucket with prefix=ngrams/books/: Google Books Ngrams: A data set containing Google Books n-gram corpora in a Hadoop friendly file format.", "This dataset has file information from the AWS S3 datasets.elasticmapreduce bucket at https://datasets.elasticmapreduce.s3.us-east-1.amazonaws.com/ with prefix=ngrams/books/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Google Books Ngrams\nName2: A data set containing Google Books n-gram corpora in a Hadoop friendly file format.\nDescription: N-grams are fixed size tuples of items. In this case the items are words extracted from the Google Books corpus. The n specifies the number of elements in the tuple, so a 5-gram contains five words or characters. The n-grams in this dataset were produced by passing a sliding window of the text of books and outputting a record for each new token.\n\nDocumentation: http://books.google.com/ngrams/\nContact: https://books.google.com/ngrams\nUpdateFrequency: Not updated\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_datasets_elasticmapreduce_ngrams_books/index.json", "https://registry.opendata.aws/google-ngrams/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_datasets_elasticmapreduce_ngrams_books.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_datasets_elasticmapreduce_ngrams_books&showErrors=false&email=", "Amazon Web Services", "awsS3Files_datasets_elasticmapreduce_ngrams_books"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_dataworld_linked_acs", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_dataworld_linked_acs.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_dataworld_linked_acs/", "public", "File Names from the AWS S3 dataworld-linked-acs Bucket: U.S. Census ACS PUMS: PUMS data in Turtle - Terse RDF Triple Language (.ttl) format along with ontologies and other complementary data.", "This dataset has file information from the AWS S3 dataworld-linked-acs bucket at https://dataworld-linked-acs.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: U.S. Census ACS PUMS\nName2: PUMS data in Turtle - Terse RDF Triple Language (.ttl) format along with ontologies and other complementary data.\nDescription: U.S. Census Bureau American Community Survey (ACS) Public Use Microdata Sample (PUMS) available in a linked data format using the Resource Description Framework (RDF) data model.\n\nDocumentation: https://docs.data.world/uscensus/#american-community-survey-linked-open-data\nContact: https://docs.data.world/uscensus/#60---contact\nUpdateFrequency: Yearly, after ACS 1-year PUMS raw data are released\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_dataworld_linked_acs/index.json", "https://registry.opendata.aws/census-dataworld-pums/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_dataworld_linked_acs.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_dataworld_linked_acs&showErrors=false&email=", "Amazon Web Services", "awsS3Files_dataworld_linked_acs"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_dc_lidar_2015", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_dc_lidar_2015.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_dc_lidar_2015/", "public", "File Names from the AWS S3 dc-lidar-2015 Bucket: District of Columbia - Classified Point Cloud LiDAR: LAS, XML, SHP", "This dataset has file information from the AWS S3 dc-lidar-2015 bucket at https://dc-lidar-2015.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: District of Columbia - Classified Point Cloud LiDAR\nName2: LAS, XML, SHP\nDeprecated: True\nDescription: Please see [here](https://registry.opendata.aws/dc-lidar) for the lates content about this dataset. LiDAR point cloud data for Washington, DC is available for anyone to use on Amazon S3. This dataset, managed by the Office of the Chief Technology Officer (OCTO), through the direction of the District of Columbia GIS program, contains tiled point cloud data for the entire District along with associated metadata.\n\nDocumentation: [2015 data](https://docs.opendata.aws/dc-lidar-2015/readme.html), [2018 data](https://docs.opendata.aws/dc-lidar-2018/readme.html)\nContact: dcgis@dc.gov\nUpdateFrequency: The most recent data is from 2018 and 2015 data is available as well. A new data acquisition is planned for 2020.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_dc_lidar_2015/index.json", "https://registry.opendata.aws/dc-lidar-2015/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_dc_lidar_2015.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_dc_lidar_2015&showErrors=false&email=", "Amazon Web Services", "awsS3Files_dc_lidar_2015"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_dc_lidar_2018", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_dc_lidar_2018.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_dc_lidar_2018/", "public", "File Names from the AWS S3 dc-lidar-2018 Bucket: District of Columbia - Classified Point Cloud LiDAR: LAS, XML", "This dataset has file information from the AWS S3 dc-lidar-2018 bucket at https://dc-lidar-2018.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: District of Columbia - Classified Point Cloud LiDAR\nName2: LAS, XML\nDeprecated: True\nDescription: Please see [here](https://registry.opendata.aws/dc-lidar) for the lates content about this dataset. LiDAR point cloud data for Washington, DC is available for anyone to use on Amazon S3. This dataset, managed by the Office of the Chief Technology Officer (OCTO), through the direction of the District of Columbia GIS program, contains tiled point cloud data for the entire District along with associated metadata.\n\nDocumentation: [2015 data](https://docs.opendata.aws/dc-lidar-2015/readme.html), [2018 data](https://docs.opendata.aws/dc-lidar-2018/readme.html)\nContact: dcgis@dc.gov\nUpdateFrequency: The most recent data is from 2018 and 2015 data is available as well. A new data acquisition is planned for 2020.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_dc_lidar_2018/index.json", "https://registry.opendata.aws/dc-lidar-2015/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_dc_lidar_2018.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_dc_lidar_2018&showErrors=false&email=", "Amazon Web Services", "awsS3Files_dc_lidar_2018"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_deutsche_boerse_eurex_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_deutsche_boerse_eurex_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_deutsche_boerse_eurex_pds/", "public", "File Names from the AWS S3 deutsche-boerse-eurex-pds Bucket: Deutsche B\u00f6rse Public Dataset: Eurex PDS Files", "This dataset has file information from the AWS S3 deutsche-boerse-eurex-pds bucket at https://deutsche-boerse-eurex-pds.s3.eu-central-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Deutsche B\u00f6rse Public Dataset\nName2: Eurex PDS Files\nDescription: The Deutsche B\u00f6rse Public Data Set consists of trade data aggregated to one minute intervals from the Eurex and Xetra trading systems. It provides the initial price, lowest price, highest price, final price and volume for every minute of the trading day, and for every tradeable security.  If you need higher resolution data, including untraded price movements, please refer to our historical market data product [here](http://www.eurexchange.com/exchange-en/market-data/historical-data).  Also, be sure to check out our [developer's portal](https://console.developer.deutsche-boerse.com/).\n\nDocumentation: https://github.com/Deutsche-Boerse/dbg-pds\nContact: pds@deutsche-boerse.com\nUpdateFrequency: The data is updated every minute during trading hours.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_deutsche_boerse_eurex_pds/index.json", "https://registry.opendata.aws/deutsche-boerse-pds/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_deutsche_boerse_eurex_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_deutsche_boerse_eurex_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_deutsche_boerse_eurex_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_deutsche_boerse_xetra_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_deutsche_boerse_xetra_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_deutsche_boerse_xetra_pds/", "public", "File Names from the AWS S3 deutsche-boerse-xetra-pds Bucket: Deutsche B\u00f6rse Public Dataset: Xetra PDS Files", "This dataset has file information from the AWS S3 deutsche-boerse-xetra-pds bucket at https://deutsche-boerse-xetra-pds.s3.eu-central-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Deutsche B\u00f6rse Public Dataset\nName2: Xetra PDS Files\nDescription: The Deutsche B\u00f6rse Public Data Set consists of trade data aggregated to one minute intervals from the Eurex and Xetra trading systems. It provides the initial price, lowest price, highest price, final price and volume for every minute of the trading day, and for every tradeable security.  If you need higher resolution data, including untraded price movements, please refer to our historical market data product [here](http://www.eurexchange.com/exchange-en/market-data/historical-data).  Also, be sure to check out our [developer's portal](https://console.developer.deutsche-boerse.com/).\n\nDocumentation: https://github.com/Deutsche-Boerse/dbg-pds\nContact: pds@deutsche-boerse.com\nUpdateFrequency: The data is updated every minute during trading hours.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_deutsche_boerse_xetra_pds/index.json", "https://registry.opendata.aws/deutsche-boerse-pds/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_deutsche_boerse_xetra_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_deutsche_boerse_xetra_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_deutsche_boerse_xetra_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_ebirdst_data", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_ebirdst_data.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_ebirdst_data/", "public", "File Names from the AWS S3 ebirdst-data Bucket: eBird Status and Trends Model Results: Species results files", "This dataset has file information from the AWS S3 ebirdst-data bucket at https://ebirdst-data.s3.us-west-2.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: eBird Status and Trends Model Results\nName2: Species results files\nDescription: The eBird Status and Trends project generates estimates of bird occurrence and abundance at a high spatiotemporal resolution. This dataset represents the primary modeled results from the analysis workflow and are designed for further analysis, synthesis, visualization, and exploration.\n\nDocumentation: https://cornelllabofornithology.github.io/ebirdst/articles/ebirdst-introduction.html\nContact: https://help.ebird.org/customer/en/portal/emails/new\nManagedBy: [Cornell Lab of Ornithology](https://www.birds.cornell.edu/home/)\nUpdateFrequency: Yearly\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_ebirdst_data/index.json", "https://registry.opendata.aws/ebirdst/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_ebirdst_data.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_ebirdst_data&showErrors=false&email=", "Amazon Web Services", "awsS3Files_ebirdst_data"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_elevation_tiles_prod", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_elevation_tiles_prod.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_elevation_tiles_prod/", "public", "File Names from the AWS S3 elevation-tiles-prod Bucket: Terrain Tiles: Gridded elevation tiles", "This dataset has file information from the AWS S3 elevation-tiles-prod bucket at https://elevation-tiles-prod.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Terrain Tiles\nName2: Gridded elevation tiles\nDescription: A global dataset providing bare-earth terrain heights, tiled for easy usage and provided on S3.\n\nDocumentation: https://mapzen.com/documentation/terrain-tiles/\nContact: https://github.com/tilezen/joerd/issues\nUpdateFrequency: New data is added based on community feedback\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_elevation_tiles_prod/index.json", "https://registry.opendata.aws/terrain-tiles/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_elevation_tiles_prod.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_elevation_tiles_prod&showErrors=false&email=", "Amazon Web Services", "awsS3Files_elevation_tiles_prod"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_encode_public", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_encode_public.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_encode_public/", "public", "File Names from the AWS S3 encode-public Bucket: Encyclopedia of DNA Elements (ENCODE): Released and archived ENCODE data", "This dataset has file information from the AWS S3 encode-public bucket at https://encode-public.s3.us-west-2.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Encyclopedia of DNA Elements (ENCODE)\nName2: Released and archived ENCODE data\nDescription: The Encyclopedia of DNA Elements (ENCODE) Consortium is an international collaboration of research groups funded by the National Human Genome Research Institute (NHGRI). The goal of ENCODE is to build a comprehensive parts list of functional elements in the human genome, including elements that act at the protein and RNA levels, and regulatory elements that control cells and circumstances in which a gene is active. ENCODE investigators employ a variety of assays and methods to identify functional elements. The discovery and annotation of gene elements is accomplished primarily by sequencing a diverse range of RNA sources, comparative genomics, integrative bioinformatic methods, and human curation. Regulatory elements are typically investigated through DNA hypersensitivity assays, assays of DNA methylation, and immunoprecipitation (IP) of proteins that interact with DNA and RNA, i.e., modified histones, transcription factors, chromatin regulators, and RNA-binding proteins, followed by sequencing.\n\nDocumentation: https://www.encodeproject.org\nContact: encode-help@lists.stanford.edu\nManagedBy: ENCODE Data Coordinating Center\nUpdateFrequency: Daily\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_encode_public/index.json", "https://registry.opendata.aws/encode-project/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_encode_public.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_encode_public&showErrors=false&email=", "Amazon Web Services", "awsS3Files_encode_public"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_epa_rsei_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_epa_rsei_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_epa_rsei_pds/", "public", "File Names from the AWS S3 epa-rsei-pds Bucket: EPA Risk-Screening Environmental Indicators: RSEI Microdata", "This dataset has file information from the AWS S3 epa-rsei-pds bucket at https://epa-rsei-pds.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: EPA Risk-Screening Environmental Indicators\nName2: RSEI Microdata\nDescription: Detailed air model results from EPA\u2019s Risk-Screening Environmental Indicators (RSEI) model.\n\nDocumentation: https://docs.opendata.aws/epa-rsei-pds/readme.html\nContact: https://www.epa.gov/rsei/forms/contact-us-about-rsei-model\nUpdateFrequency: Updated infrequently\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_epa_rsei_pds/index.json", "https://registry.opendata.aws/epa-rsei-pds/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_epa_rsei_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_epa_rsei_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_epa_rsei_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_era5_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_era5_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_era5_pds/", "public", "File Names from the AWS S3 era5-pds Bucket: ECMWF ERA5 Reanalysis: ERA5 Reanalysis NetCDF 4 files", "This dataset has file information from the AWS S3 era5-pds bucket at https://era5-pds.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: ECMWF ERA5 Reanalysis\nName2: ERA5 Reanalysis NetCDF 4 files\nDescription: ERA5 is the fifth generation of ECMWF atmospheric reanalyses of the global climate, and the first reanalysis produced as an operational service. It utilizes the best available observation data from satellites and in-situ stations, which are assimilated and processed using ECMWF's Integrated Forecast System (IFS) Cycle 41r2. The dataset provides all essential atmospheric meteorological parameters like, but not limited to, air temperature, pressure and wind at different altitudes, along with surface parameters like rainfall, soil moisture content and sea parameters like sea-surface temperature and wave height. ERA5 provides data at a considerably higher spatial and temporal resolution than its legacy counterpart ERA-Interim. ERA5 consists of high resolution version with 31 km horizontal resolution, and a reduced resolution ensemble version with 10 members. It is currently available since 2008, but will be continuously extended backwards, first until 1979 and then to 1950. Learn more about ERA5 in Jon Olauson's paper [ERA5: The new champion of wind power modelling?](https://www.researchgate.net/publication/320084119_ERA5_The_new_champion_of_wind_power_modelling).\n\nDocumentation: https://github.com/planet-os/notebooks/blob/master/aws/era5-pds.md\nContact: datahub@intertrust.com\nUpdateFrequency: Monthly\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_era5_pds/index.json", "https://registry.opendata.aws/ecmwf-era5/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_era5_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_era5_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_era5_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_fast_ai_coco", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_fast_ai_coco.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_fast_ai_coco/", "public", "File Names from the AWS S3 fast-ai-coco Bucket: COCO - Common Objects in Context - fast.ai datasets: Datasets", "This dataset has file information from the AWS S3 fast-ai-coco bucket at https://fast-ai-coco.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: COCO - Common Objects in Context - fast.ai datasets\nName2: Datasets\nDescription: COCO is a large-scale object detection, segmentation, and captioning dataset. This is part of the fast.ai datasets collection hosted by AWS for convenience of fast.ai students. If you use this dataset in your research please cite arXiv:1405.0312 [cs.CV].\n\nDocumentation: http://course.fast.ai/datasets\nContact: info@fast.ai\nManagedBy: [fast.ai](http://www.fast.ai/)\nUpdateFrequency: As required\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_fast_ai_coco/index.json", "https://registry.opendata.aws/fast-ai-coco/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_fast_ai_coco.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_fast_ai_coco&showErrors=false&email=", "Amazon Web Services", "awsS3Files_fast_ai_coco"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_fast_ai_imageclas", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_fast_ai_imageclas.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_fast_ai_imageclas/", "public", "File Names from the AWS S3 fast-ai-imageclas Bucket: Image classification - fast.ai datasets: Datasets", "This dataset has file information from the AWS S3 fast-ai-imageclas bucket at https://fast-ai-imageclas.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Image classification - fast.ai datasets\nName2: Datasets\nDescription: Some of the most important datasets for image classification research, including CIFAR 10 and 100, Caltech 101, MNIST, Food-101, Oxford-102-Flowers, Oxford-IIIT-Pets, and Stanford-Cars.  This is part of the fast.ai datasets collection hosted by AWS for convenience of fast.ai students. See documentation link for citation and license details for each dataset.\n\nDocumentation: http://course.fast.ai/datasets\nContact: info@fast.ai\nManagedBy: [fast.ai](http://www.fast.ai/)\nUpdateFrequency: As required\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_fast_ai_imageclas/index.json", "https://registry.opendata.aws/fast-ai-imageclas/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_fast_ai_imageclas.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_fast_ai_imageclas&showErrors=false&email=", "Amazon Web Services", "awsS3Files_fast_ai_imageclas"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_fast_ai_imagelocal", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_fast_ai_imagelocal.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_fast_ai_imagelocal/", "public", "File Names from the AWS S3 fast-ai-imagelocal Bucket: Image localization  - fast.ai datasets: Datasets", "This dataset has file information from the AWS S3 fast-ai-imagelocal bucket at https://fast-ai-imagelocal.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Image localization  - fast.ai datasets\nName2: Datasets\nDescription: Some of the most important datasets for image localization  research, including Camvid and PASCAL VOC (2007 and 2012). This is part of the fast.ai datasets collection hosted by AWS for convenience of fast.ai students. See documentation link for citation and license details for each dataset.\n\nDocumentation: http://course.fast.ai/datasets\nContact: info@fast.ai\nManagedBy: [fast.ai](http://www.fast.ai/)\nUpdateFrequency: As required\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_fast_ai_imagelocal/index.json", "https://registry.opendata.aws/fast-ai-imagelocal/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_fast_ai_imagelocal.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_fast_ai_imagelocal&showErrors=false&email=", "Amazon Web Services", "awsS3Files_fast_ai_imagelocal"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_fast_ai_nlp", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_fast_ai_nlp.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_fast_ai_nlp/", "public", "File Names from the AWS S3 fast-ai-nlp Bucket: NLP - fast.ai datasets: Datasets", "This dataset has file information from the AWS S3 fast-ai-nlp bucket at https://fast-ai-nlp.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NLP - fast.ai datasets\nName2: Datasets\nDescription: Some of the most important datasets for NLP, with a focus on classification, including IMDb, AG-News, Amazon Reviews (polarity and full), Yelp Reviews (polarity and full), Dbpedia, Sogou News (Pinyin), Yahoo Answers, Wikitext 2 and Wikitext 103, and ACL-2010 French-English 10^9 corpus.  This is part of the fast.ai datasets collection hosted by AWS for convenience of fast.ai students. See documentation link for citation and license details for each dataset.\n\nDocumentation: http://course.fast.ai/datasets\nContact: info@fast.ai\nManagedBy: [fast.ai](http://www.fast.ai/)\nUpdateFrequency: As required\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_fast_ai_nlp/index.json", "https://registry.opendata.aws/fast-ai-nlp/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_fast_ai_nlp.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_fast_ai_nlp&showErrors=false&email=", "Amazon Web Services", "awsS3Files_fast_ai_nlp"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_fmi_opendata_rcrhirlam_pressure_grib", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_fmi_opendata_rcrhirlam_pressure_grib.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_fmi_opendata_rcrhirlam_pressure_grib/", "public", "File Names from the AWS S3 fmi-opendata-rcrhirlam-pressure-grib Bucket: HIRLAM Weather Model: Pressure GRIB files", "This dataset has file information from the AWS S3 fmi-opendata-rcrhirlam-pressure-grib bucket at https://fmi-opendata-rcrhirlam-pressure-grib.s3.eu-west-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: HIRLAM Weather Model\nName2: Pressure GRIB files\nDescription: HIRLAM (High Resolution Limited Area Model) is an operational synoptic and mesoscale weather prediction model managed by the Finnish Meteorological Institute.\n\nDocumentation: http://en.ilmatieteenlaitos.fi/open-data-on-aws-s3\nContact: avoin-data@fmi.fi\nUpdateFrequency: The data is updated four times a day with analysis hours 00, 06, 12 and 18. Corresponding model runs are available roughly five hours after analysis time (~ after model run has started).\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_fmi_opendata_rcrhirlam_pressure_grib/index.json", "https://registry.opendata.aws/hirlam/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_fmi_opendata_rcrhirlam_pressure_grib.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_fmi_opendata_rcrhirlam_pressure_grib&showErrors=false&email=", "Amazon Web Services", "awsS3Files_fmi_opendata_rcrhirlam_pressure_grib"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_fmi_opendata_rcrhirlam_surface_grib", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_fmi_opendata_rcrhirlam_surface_grib.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_fmi_opendata_rcrhirlam_surface_grib/", "public", "File Names from the AWS S3 fmi-opendata-rcrhirlam-surface-grib Bucket: HIRLAM Weather Model: Surface GRIB files", "This dataset has file information from the AWS S3 fmi-opendata-rcrhirlam-surface-grib bucket at https://fmi-opendata-rcrhirlam-surface-grib.s3.eu-west-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: HIRLAM Weather Model\nName2: Surface GRIB files\nDescription: HIRLAM (High Resolution Limited Area Model) is an operational synoptic and mesoscale weather prediction model managed by the Finnish Meteorological Institute.\n\nDocumentation: http://en.ilmatieteenlaitos.fi/open-data-on-aws-s3\nContact: avoin-data@fmi.fi\nUpdateFrequency: The data is updated four times a day with analysis hours 00, 06, 12 and 18. Corresponding model runs are available roughly five hours after analysis time (~ after model run has started).\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_fmi_opendata_rcrhirlam_surface_grib/index.json", "https://registry.opendata.aws/hirlam/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_fmi_opendata_rcrhirlam_surface_grib.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_fmi_opendata_rcrhirlam_surface_grib&showErrors=false&email=", "Amazon Web Services", "awsS3Files_fmi_opendata_rcrhirlam_surface_grib"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_gatk_test_data", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_gatk_test_data.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_gatk_test_data/", "public", "File Names from the AWS S3 gatk-test-data Bucket: GATK Test Data: The contents of this dataset is multi-modal and includes various types of genomic data, such as CRAMs/BAMs, whole-genome sequencing (WGS) data, exome data, RNA data, etc.", "This dataset has file information from the AWS S3 gatk-test-data bucket at https://gatk-test-data.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: GATK Test Data\nName2: The contents of this dataset is multi-modal and includes various types of genomic data, such as CRAMs/BAMs, whole-genome sequencing (WGS) data, exome data, RNA data, etc.\nDescription: The GATK test data resource bundle is a collection of files for resequencing human genomic data with the Broad Institute's [Genome Analysis Toolkit (GATK)](https://software.broadinstitute.org/gatk/).\n\nDocumentation: https://s3.amazonaws.com/gatk-test-data/gatk-test-data-readme.html\nContact: https://gatkforums.broadinstitute.org/gatk\nManagedBy: Broad Institute\nUpdateFrequency: Every 3 months\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_gatk_test_data/index.json", "https://registry.opendata.aws/gatk-test-data/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_gatk_test_data.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_gatk_test_data&showErrors=false&email=", "Amazon Web Services", "awsS3Files_gatk_test_data"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_gdelt_open_data", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_gdelt_open_data.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_gdelt_open_data/", "public", "File Names from the AWS S3 gdelt-open-data Bucket: Global Database of Events, Language and Tone (GDELT): Project data files", "This dataset has file information from the AWS S3 gdelt-open-data bucket at https://gdelt-open-data.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Global Database of Events, Language and Tone (GDELT)\nName2: Project data files\nDescription: This project monitors the world's broadcast, print, and web news from nearly every corner of every country in over 100 languages and identifies the people, locations, organizations, counts, themes, sources, emotions, quotes, images and events driving our global society every second of every day.\n\nDocumentation: http://www.gdeltproject.org/\nContact: http://www.gdeltproject.org/about.html#contact\nUpdateFrequency: Not currently being updated\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_gdelt_open_data/index.json", "https://registry.opendata.aws/gdelt/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_gdelt_open_data.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_gdelt_open_data&showErrors=false&email=", "Amazon Web Services", "awsS3Files_gdelt_open_data"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_genomeark", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_genomeark.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_genomeark/", "public", "File Names from the AWS S3 genomeark Bucket: Genome Ark", "This dataset has file information from the AWS S3 genomeark bucket at https://genomeark.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Genome Ark\nName2: https://vgp.github.io\nDescription: The Genome Ark hosts genomic information for the Vertebrate Genomes Project (VGP) and other related projects. The VGP is an international collaboration that aims to generate complete and near error-free reference genomes for all extant vertebrate species. These genomes will be used to address fundamental questions in biology and disease, to identify species most genetically at risk for extinction, and to preserve genetic information of life.\n\nDocumentation: https://vertebrategenomesproject.org\nContact: Erich Jarvis <ejarvis@rockefeller.edu>\nManagedBy: The Genome10K community of scientists\nUpdateFrequency: Data will be continually updated as it is generated.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_genomeark/index.json", "https://registry.opendata.aws/genomeark/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_genomeark.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_genomeark&showErrors=false&email=", "Amazon Web Services", "awsS3Files_genomeark"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_giab", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_giab.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_giab/", "public", "File Names from the AWS S3 giab Bucket: Genome in a Bottle on AWS: Latest data", "This dataset has file information from the AWS S3 giab bucket at https://giab.s3.us-west-2.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Genome in a Bottle on AWS\nName2: Latest data\nDescription: Several reference genomes to enable translation of whole human genome sequencing to clinical practice.\n\nDocumentation: https://docs.opendata.aws/giab/readme.html\nContact: http://genomeinabottle.org/\nUpdateFrequency: New data are added as soon as they are available.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_giab/index.json", "https://registry.opendata.aws/giab/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_giab.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_giab&showErrors=false&email=", "Amazon Web Services", "awsS3Files_giab"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_gmsdata", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_gmsdata.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_gmsdata/", "public", "File Names from the AWS S3 gmsdata Bucket: The Genome Modeling System", "This dataset has file information from the AWS S3 gmsdata bucket at https://gmsdata.s3.us-west-2.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: The Genome Modeling System\nName2: https://gmsdata.s3.amazonaws.com/INDEX.html\nDescription: The Genome Institute at Washington University has developed a high-throughput, fault-tolerant analysis information management system called the Genome Modeling System (GMS), capable of executing complex, interdependent, and automated genome analysis pipelines at a massive scale. The GMS framework provides detailed tracking of samples and data coupled with reliable and repeatable analysis pipelines. GMS includes a full system image with software and services, expandable from one workstation to a large compute cluster.\n\nDocumentation: https://github.com/genome/gms/wiki\nContact: https://github.com/genome/gms/issues\nUpdateFrequency: Not updated\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_gmsdata/index.json", "https://registry.opendata.aws/gmsdata/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_gmsdata.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_gmsdata&showErrors=false&email=", "Amazon Web Services", "awsS3Files_gmsdata"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_grillo_openeew", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_grillo_openeew.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_grillo_openeew/", "public", "File Names from the AWS S3 grillo-openeew Bucket: OpenEEW: OpenEEW", "This dataset has file information from the AWS S3 grillo-openeew bucket at https://grillo-openeew.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: OpenEEW\nName2: OpenEEW\nDescription: Grillo has developed an IoT-based earthquake early-warning system in Mexico and Chile and is now opening its entire archive of unprocessed accelerometer data to the world to encourage the development of new algorithms capable of rapidly detecting and characterizing earthquakes in real time.\n\nDocumentation: https://github.com/grillo/openeew\nContact: openeew@grillo.io\nManagedBy: [Grillo](https://grillo.io/)\nUpdateFrequency: Approximately every 10 minutes\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_grillo_openeew/index.json", "https://registry.opendata.aws/grillo-openeew/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_grillo_openeew.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_grillo_openeew&showErrors=false&email=", "Amazon Web Services", "awsS3Files_grillo_openeew"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_human_microbiome_project", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_human_microbiome_project.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_human_microbiome_project/", "public", "File Names from the AWS S3 human-microbiome-project Bucket: The Human Microbiome Project", "This dataset has file information from the AWS S3 human-microbiome-project bucket at https://human-microbiome-project.s3.us-west-2.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: The Human Microbiome Project\nName2: https://aws.amazon.com/datasets/human-microbiome-project/\nDescription: The NIH-funded Human Microbiome Project (HMP) is a collaborative effort of over 300 scientists from more than 80 organizations to comprehensively characterize the microbial communities inhabiting the human body and elucidate their role in human health and disease. To accomplish this task, microbial community samples were isolated from a cohort of 300 healthy adult human subjects at 18 specific sites within five regions of the body (oral cavity, airways, urogenital track, skin, and gut). Targeted sequencing of the 16S bacterial marker gene and/or whole metagenome shotgun sequencing was performed for thousands of these samples. In addition, whole genome sequences were generated for isolate strains collected from human body sites to act as reference organisms for analysis. Finally, 16S marker and whole metagenome sequencing was also done on additional samples from people suffering from several disease conditions.\n\nDocumentation: https://commonfund.nih.gov/hmp\nContact: https://commonfund.nih.gov/hmp/related_activities\nUpdateFrequency: Uncertain\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_human_microbiome_project/index.json", "https://registry.opendata.aws/human-microbiome-project/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_human_microbiome_project.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_human_microbiome_project&showErrors=false&email=", "Amazon Web Services", "awsS3Files_human_microbiome_project"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_human_pangenomics", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_human_pangenomics.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_human_pangenomics/", "public", "File Names from the AWS S3 human-pangenomics Bucket: Human PanGenomics Project: Human PanGenomics Project", "This dataset has file information from the AWS S3 human-pangenomics bucket at https://human-pangenomics.s3.us-west-2.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Human PanGenomics Project\nName2: Human PanGenomics Project\nDescription: This dataset includes sequencing data, assemblies, and analyses for the offspring of ten parent-offspring trios.\n\nDocumentation: https://github.com/human-pangenomics/hpgp-data\nContact: https://github.com/human-pangenomics/hpgp-data/issues\nUpdateFrequency: Data will be added and updated as technologies improve or new data uses are encountered.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_human_pangenomics/index.json", "https://registry.opendata.aws/hpgp-data/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_human_pangenomics.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_human_pangenomics&showErrors=false&email=", "Amazon Web Services", "awsS3Files_human_pangenomics"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_ichangemycity_janaagraha_complaints_data_aws", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_ichangemycity_janaagraha_complaints_data_aws.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_ichangemycity_janaagraha_complaints_data_aws/", "public", "File Names from the AWS S3 ichangemycity-janaagraha-complaints-data-aws Bucket: IChangeMyCity Complaints Data from Janaagraha: IChangeMyCity Complaints", "This dataset has file information from the AWS S3 ichangemycity-janaagraha-complaints-data-aws bucket at https://ichangemycity-janaagraha-complaints-data-aws.s3.ap-south-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: IChangeMyCity Complaints Data from Janaagraha\nName2: IChangeMyCity Complaints\nDescription: The [IChangeMyCity](https://www.ichangemycity.com) project provides insight into the complaints raised by citizens from diffent cities of India related to the issues in their neighbourhoods and the resolution of the same by the civic bodies.\n\nDocumentation: http://ichangemycity-janaagraha-complaints-data-aws.s3.ap-south-1.amazonaws.com/readme.html\nContact: data@janaagraha.org\nUpdateFrequency: Daily\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_ichangemycity_janaagraha_complaints_data_aws/index.json", "https://registry.opendata.aws/ichangemycity/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_ichangemycity_janaagraha_complaints_data_aws.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_ichangemycity_janaagraha_complaints_data_aws&showErrors=false&email=", "Amazon Web Services", "awsS3Files_ichangemycity_janaagraha_complaints_data_aws"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_irs_990_spreadsheets", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_irs_990_spreadsheets.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_irs_990_spreadsheets/", "public", "File Names from the AWS S3 irs-990-spreadsheets Bucket: IRS 990 Filings (Spreadsheets): Excerpts of electronic Form 990 and 990-EZ filings, converted to spreadsheet form", "This dataset has file information from the AWS S3 irs-990-spreadsheets bucket at https://irs-990-spreadsheets.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: IRS 990 Filings (Spreadsheets)\nName2: Excerpts of electronic Form 990 and 990-EZ filings, converted to spreadsheet form\nDescription: Excerpts of electronic Form 990 and 990-EZ filings, converted to spreadsheet form. Additional fields being added regularly.\n\nDocumentation: https://appliednonprofitresearch.com/documentation/irs-990-spreadsheets\nContact: [info@appliednonprofitresearch.com](info@appliednonprofitresearch.com)\nManagedBy: [Applied Nonprofit Research, LLC](https://www.appliednonprofitresearch.com/)\nUpdateFrequency: Quarterly\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_irs_990_spreadsheets/index.json", "https://registry.opendata.aws/990-spreadsheets/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_irs_990_spreadsheets.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_irs_990_spreadsheets&showErrors=false&email=", "Amazon Web Services", "awsS3Files_irs_990_spreadsheets"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_lab41openaudiocorpus", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_lab41openaudiocorpus.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_lab41openaudiocorpus/", "public", "File Names from the AWS S3 lab41openaudiocorpus Bucket: Voices Obscured in Complex Environmental Settings (VOiCES): wav audio files, orthographic transcriptions, and speaker ID", "This dataset has file information from the AWS S3 lab41openaudiocorpus bucket at https://lab41openaudiocorpus.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Voices Obscured in Complex Environmental Settings (VOiCES)\nName2: wav audio files, orthographic transcriptions, and speaker ID\nDescription: VOiCES is a speech corpus recorded in acoustically challenging settings, using distant microphone recording. Speech was recorded in real rooms with various acoustic features (reverb, echo, HVAC systems, outside noise, etc.). Adversarial noise, either television, music, or babble, was concurrently played with clean speech. Data was recorded using multiple microphones strategically placed throughout the room. The corpus includes audio recordings, orthographic transcriptions, and speaker labels.\n\nDocumentation: https://voices18.github.io/\nContact: https://github.com/voices18/utilities/issues\nUpdateFrequency: Data from two additional rooms will be added to the corpus Fall 2018.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_lab41openaudiocorpus/index.json", "https://registry.opendata.aws/lab41-sri-voices/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_lab41openaudiocorpus.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_lab41openaudiocorpus&showErrors=false&email=", "Amazon Web Services", "awsS3Files_lab41openaudiocorpus"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_landsat_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_landsat_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_landsat_pds/", "public", "File Names from the AWS S3 landsat-pds Bucket: Landsat 8: Scenes and metadata", "This dataset has file information from the AWS S3 landsat-pds bucket at https://landsat-pds.s3.us-west-2.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Landsat 8\nName2: Scenes and metadata\nDescription: An ongoing collection of satellite imagery of all land on Earth produced by the Landsat 8 satellite.\n\nDocumentation: https://docs.opendata.aws/landsat-pds/readme.html\nContact: https://lists.osgeo.org/mailman/listinfo/landsat-pds\nManagedBy: [Planet](https://www.planet.com/)\nUpdateFrequency: New Landsat 8 scenes are added regularly as soon as they are available.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_landsat_pds/index.json", "https://registry.opendata.aws/landsat-8/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_landsat_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_landsat_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_landsat_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_landsat_pds_inventory", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_landsat_pds_inventory.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_landsat_pds_inventory/", "public", "File Names from the AWS S3 landsat-pds-inventory Bucket: Landsat 8: [S3 Inventory](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html#storage-inventory-contents) (ORC)", "This dataset has file information from the AWS S3 landsat-pds-inventory bucket at https://landsat-pds-inventory.s3.us-west-2.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Landsat 8\nName2: [S3 Inventory](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html#storage-inventory-contents) (ORC)\nDescription: An ongoing collection of satellite imagery of all land on Earth produced by the Landsat 8 satellite.\n\nDocumentation: https://docs.opendata.aws/landsat-pds/readme.html\nContact: https://lists.osgeo.org/mailman/listinfo/landsat-pds\nManagedBy: [Planet](https://www.planet.com/)\nUpdateFrequency: New Landsat 8 scenes are added regularly as soon as they are available.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_landsat_pds_inventory/index.json", "https://registry.opendata.aws/landsat-8/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_landsat_pds_inventory.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_landsat_pds_inventory&showErrors=false&email=", "Amazon Web Services", "awsS3Files_landsat_pds_inventory"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_lofar_elais_n1", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_lofar_elais_n1.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_lofar_elais_n1/", "public", "File Names from the AWS S3 lofar-elais-n1 Bucket: LOFAR ELAIS-N1 cycle 2 observations on AWS: LOFAR ELAIS-N1 cycle 2 observations", "This dataset has file information from the AWS S3 lofar-elais-n1 bucket at https://lofar-elais-n1.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: LOFAR ELAIS-N1 cycle 2 observations on AWS\nName2: LOFAR ELAIS-N1 cycle 2 observations\nDescription: These data correspond to the [International LOFAR Telescope](http://www.lofar.org/) observations of the sky field ELAIS-N1 (16:10:01 +54:30:36) during the cycle 2 of observations. There are 11 runs of about 8 hours each plus the corresponding observation of the calibration targets before and after the target field. The data are measurement sets ([MS](https://casa.nrao.edu/Memos/229.html)) containing the cross-correlated data and metadata divided in 371 frequency sub-bands per target centred at ~150 MHz.\n\nDocumentation: https://www.lofarcloud.uk/data.html\nContact: https://www.lofarcloud.uk/\nUpdateFrequency: Not updated\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_lofar_elais_n1/index.json", "https://registry.opendata.aws/lofar-elais-n1/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_lofar_elais_n1.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_lofar_elais_n1&showErrors=false&email=", "Amazon Web Services", "awsS3Files_lofar_elais_n1"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_mf_nwp_models", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_mf_nwp_models.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_mf_nwp_models/", "public", "File Names from the AWS S3 mf-nwp-models Bucket: Atmospheric Models from M\u00e9t\u00e9o-France: Atmospheric Models from M\u00e9t\u00e9o-France", "This dataset has file information from the AWS S3 mf-nwp-models bucket at https://mf-nwp-models.s3.eu-west-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Atmospheric Models from M\u00e9t\u00e9o-France\nName2: Atmospheric Models from M\u00e9t\u00e9o-France\nDescription: Global and high-resolution regional atmospheric models from M\u00e9t\u00e9o-France.\n\nDocumentation: https://mf-models-on-aws.org\nContact: contact@openmeteodata.com\nManagedBy: [OpenMeteoData](https://openmeteodata.com)\nUpdateFrequency: Every 6 hours\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_mf_nwp_models/index.json", "https://registry.opendata.aws/meteo-france-models/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_mf_nwp_models.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_mf_nwp_models&showErrors=false&email=", "Amazon Web Services", "awsS3Files_mf_nwp_models"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_modis_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_modis_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_modis_pds/", "public", "File Names from the AWS S3 modis-pds Bucket: MODIS on AWS: Imagery and metadata", "This dataset has file information from the AWS S3 modis-pds bucket at https://modis-pds.s3.us-west-2.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: MODIS on AWS\nName2: Imagery and metadata\nDescription: Select products from the Moderate Resolution Imaging Spectroradiometer (MODIS) managed by the U.S. Geological Survey and NASA.\n\nDocumentation: https://docs.opendata.aws/modis-pds/readme.html\nContact: https://github.com/AstroDigital/modis-ingestor/issues\nUpdateFrequency: New MODIS data is added regularly as soon as they are available.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_modis_pds/index.json", "https://registry.opendata.aws/modis/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_modis_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_modis_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_modis_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_multimedia_commons", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_multimedia_commons.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_multimedia_commons/", "public", "File Names from the AWS S3 multimedia-commons Bucket: Multimedia Commons: This directory has 99,171,688 image files and 787,479 video files. The videos add up to around 8,081 hours, with an average video length of 37s and a median length of 28s.", "This dataset has file information from the AWS S3 multimedia-commons bucket at https://multimedia-commons.s3.us-west-2.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Multimedia Commons\nName2: This directory has 99,171,688 image files and 787,479 video files. The videos add up to around 8,081 hours, with an average video length of 37s and a median length of 28s.\nDescription: The Multimedia Commons is a collection of audio and visual features computed for the nearly 100 million Creative Commons-licensed Flickr images and videos in the YFCC100M dataset from Yahoo! Labs, along with ground-truth annotations for selected subsets. The International Computer Science Institute (ICSI) and Lawrence Livermore National Laboratory are producing and distributing a core set of derived feature sets and annotations as part of an effort to enable large-scale video search capabilities. They have released this feature corpus into the public domain, under Creative Commons License 0, so it is free for anyone to use for any purpose.\n\nDocumentation: https://multimediacommons.wordpress.com/yfcc100m-core-dataset/\nContact: multimedia-commons@icsi.berkeley.edu\nUpdateFrequency: Not updated.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_multimedia_commons/index.json", "https://registry.opendata.aws/multimedia-commons/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_multimedia_commons.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_multimedia_commons&showErrors=false&email=", "Amazon Web Services", "awsS3Files_multimedia_commons"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_mwapublic", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_mwapublic.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_mwapublic/", "public", "File Names from the AWS S3 mwapublic Bucket: Epoch of Reionization Dataset: Selected MWA EoR data (uvfits format) from 2013-2015", "This dataset has file information from the AWS S3 mwapublic bucket at https://mwapublic.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Epoch of Reionization Dataset\nName2: Selected MWA EoR data (uvfits format) from 2013-2015\nDescription: The data are from observations with the Murchison Widefield Array (MWA) which is a Square Kilometer Array (SKA) precursor in Western Australia.  This particular dataset is from the Epoch of Reionization project which is a key science driver of the SKA. Nearly 2PB of such observations have been recorded to date, this is a small subset of that which has been exported from the MWA data archive in Perth and made available to the public on AWS.  The data were taken to detect signatures of the first stars and galaxies forming and the effect of these early stars and galaxies on the evolution of the universe.\n\nDocumentation: http://danielcjacobs.com/research/epoch-of-reionization-aws-public-dataset/\nContact: brynah (at) phys.washington.edu\nManagedBy: University of washington Radio Cosmology Group\nUpdateFrequency: Irregularly\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_mwapublic/index.json", "https://registry.opendata.aws/epoch-of-reionization/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_mwapublic.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_mwapublic&showErrors=false&email=", "Amazon Web Services", "awsS3Files_mwapublic"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_nanopore_human_wgs", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_nanopore_human_wgs.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_nanopore_human_wgs/", "public", "File Names from the AWS S3 nanopore-human-wgs Bucket: Nanopore Reference Human Genome: Nanopore Reference Human Genome", "This dataset has file information from the AWS S3 nanopore-human-wgs bucket at https://nanopore-human-wgs.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Nanopore Reference Human Genome\nName2: Nanopore Reference Human Genome\nDescription: This dataset includes the sequencing and assembly of a reference standard human genome (GM12878) using the MinION nanopore sequencing instrument with the R9.4 1D chemistry.\n\nDocumentation: https://github.com/nanopore-wgs-consortium/NA12878\nContact: https://github.com/nanopore-wgs-consortium/NA12878/issues\nUpdateFrequency: Data will be added as methodology improves or new data uses are encountered.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_nanopore_human_wgs/index.json", "https://registry.opendata.aws/nanopore/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_nanopore_human_wgs.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_nanopore_human_wgs&showErrors=false&email=", "Amazon Web Services", "awsS3Files_nanopore_human_wgs"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_nasanex_Landsat", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_nasanex_Landsat.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_nasanex_Landsat/", "public", "File Names from the AWS S3 nasanex Bucket with prefix=Landsat/: NASA NEX: Landsat GLS (Global Land Survey)", "This dataset has file information from the AWS S3 nasanex bucket at https://nasanex.s3.us-west-2.amazonaws.com/ with prefix=Landsat/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NASA NEX\nName2: Landsat GLS (Global Land Survey)\nDescription: A collection of Earth science datasets maintained by NASA, including climate change projections and satellite images of the Earth's surface.\n\nDocumentation: https://docs.opendata.aws/nasa-nex/readme.html\nContact: https://nex.nasa.gov/nex/contactus/\nUpdateFrequency: Infrequently\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_nasanex_Landsat/index.json", "https://registry.opendata.aws/nasanex/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_nasanex_Landsat.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_nasanex_Landsat&showErrors=false&email=", "Amazon Web Services", "awsS3Files_nasanex_Landsat"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_nasanex_LOCA", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_nasanex_LOCA.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_nasanex_LOCA/", "public", "File Names from the AWS S3 nasanex Bucket with prefix=LOCA/: NASA NEX: Localized Constructed Analogs (LOCA)", "This dataset has file information from the AWS S3 nasanex bucket at https://nasanex.s3.us-west-2.amazonaws.com/ with prefix=LOCA/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NASA NEX\nName2: Localized Constructed Analogs (LOCA)\nDescription: A collection of Earth science datasets maintained by NASA, including climate change projections and satellite images of the Earth's surface.\n\nDocumentation: https://docs.opendata.aws/nasa-nex/readme.html\nContact: https://nex.nasa.gov/nex/contactus/\nUpdateFrequency: Infrequently\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_nasanex_LOCA/index.json", "https://registry.opendata.aws/nasanex/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_nasanex_LOCA.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_nasanex_LOCA&showErrors=false&email=", "Amazon Web Services", "awsS3Files_nasanex_LOCA"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_nasanex_MODIS", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_nasanex_MODIS.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_nasanex_MODIS/", "public", "File Names from the AWS S3 nasanex Bucket with prefix=MODIS/: NASA NEX: MOD13Q1 (Vegetation Indices 16-Day L3 Global 250m)", "This dataset has file information from the AWS S3 nasanex bucket at https://nasanex.s3.us-west-2.amazonaws.com/ with prefix=MODIS/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NASA NEX\nName2: MOD13Q1 (Vegetation Indices 16-Day L3 Global 250m)\nDescription: A collection of Earth science datasets maintained by NASA, including climate change projections and satellite images of the Earth's surface.\n\nDocumentation: https://docs.opendata.aws/nasa-nex/readme.html\nContact: https://nex.nasa.gov/nex/contactus/\nUpdateFrequency: Infrequently\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_nasanex_MODIS/index.json", "https://registry.opendata.aws/nasanex/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_nasanex_MODIS.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_nasanex_MODIS&showErrors=false&email=", "Amazon Web Services", "awsS3Files_nasanex_MODIS"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_nasanex_NEX_DCP30", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_nasanex_NEX_DCP30.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_nasanex_NEX_DCP30/", "public", "File Names from the AWS S3 nasanex Bucket with prefix=NEX-DCP30/: NASA NEX: Downscaled Climate Projections (NEX-DCP30)", "This dataset has file information from the AWS S3 nasanex bucket at https://nasanex.s3.us-west-2.amazonaws.com/ with prefix=NEX-DCP30/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NASA NEX\nName2: Downscaled Climate Projections (NEX-DCP30)\nDescription: A collection of Earth science datasets maintained by NASA, including climate change projections and satellite images of the Earth's surface.\n\nDocumentation: https://docs.opendata.aws/nasa-nex/readme.html\nContact: https://nex.nasa.gov/nex/contactus/\nUpdateFrequency: Infrequently\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_nasanex_NEX_DCP30/index.json", "https://registry.opendata.aws/nasanex/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_nasanex_NEX_DCP30.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_nasanex_NEX_DCP30&showErrors=false&email=", "Amazon Web Services", "awsS3Files_nasanex_NEX_DCP30"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_nasanex_NEX_GDDP", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_nasanex_NEX_GDDP.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_nasanex_NEX_GDDP/", "public", "File Names from the AWS S3 nasanex Bucket with prefix=NEX-GDDP/: NASA NEX: Global Daily Downscaled Projections (NEX-GDDP)", "This dataset has file information from the AWS S3 nasanex bucket at https://nasanex.s3.us-west-2.amazonaws.com/ with prefix=NEX-GDDP/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NASA NEX\nName2: Global Daily Downscaled Projections (NEX-GDDP)\nDescription: A collection of Earth science datasets maintained by NASA, including climate change projections and satellite images of the Earth's surface.\n\nDocumentation: https://docs.opendata.aws/nasa-nex/readme.html\nContact: https://nex.nasa.gov/nex/contactus/\nUpdateFrequency: Infrequently\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_nasanex_NEX_GDDP/index.json", "https://registry.opendata.aws/nasanex/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_nasanex_NEX_GDDP.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_nasanex_NEX_GDDP&showErrors=false&email=", "Amazon Web Services", "awsS3Files_nasanex_NEX_GDDP"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_gefs_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_gefs_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_noaa_gefs_pds/", "public", "File Names from the AWS S3 noaa-gefs-pds Bucket: NOAA Global Ensemble Forecast System (GEFS): Project data files", "This dataset has file information from the AWS S3 noaa-gefs-pds bucket at https://noaa-gefs-pds.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NOAA Global Ensemble Forecast System (GEFS)\nName2: Project data files\nDescription: The Global Ensemble Forecast System (GEFS), previously known as the GFS Global ENSemble (GENS), is a weather forecast model made up of 21 separate forecasts, or ensemble members.  The National Centers for Environmental Prediction (NCEP) started the GEFS to address the nature of uncertainty in weather observations, which is used to initialize weather forecast models. The GEFS attempts to quantify the amount of uncertainty in a forecast by generating an ensemble of multiple forecasts, each minutely different, or perturbed, from the original observations. With global coverage, GEFS is produced four times a day with weather forecasts going out to 16 days.\n\nDocumentation: https://docs.opendata.aws/noaa-gefs-pds/readme.html\nContact: For questions regarding data content or quality, visit [the NOAA GEFS site](http://www.emc.ncep.noaa.gov/index.php?branch=GEFS). For any questions regarding data delivery not associated with this platform or any general questions regarding the NOAA Big Data Project, email noaa.bdp@noaa.gov\nManagedBy: [NOAA](https://www.noaa.gov/)\nUpdateFrequency: 4 times a day, every 6 hours starting at midnight.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_noaa_gefs_pds/index.json", "https://registry.opendata.aws/noaa-gefs/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_noaa_gefs_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_noaa_gefs_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_noaa_gefs_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_gfs_bdp_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_gfs_bdp_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_noaa_gfs_bdp_pds/", "public", "File Names from the AWS S3 noaa-gfs-bdp-pds Bucket: NOAA Global Forecast System (GFS): A rolling four-week archive of 0.25 GFS data", "This dataset has file information from the AWS S3 noaa-gfs-bdp-pds bucket at https://noaa-gfs-bdp-pds.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NOAA Global Forecast System (GFS)\nName2: A rolling four-week archive of 0.25 GFS data\nDescription: The Global Forecast System (GFS) is a weather forecast model produced by the National Centers for Environmental Prediction (NCEP). Dozens of atmospheric and land-soil variables are available through this dataset, from temperatures, winds, and precipitation to soil moisture and atmospheric ozone concentration. The entire globe is covered by the GFS at a base horizontal resolution of 18 miles (28 kilometers) between grid points, which is used by the operational forecasters who predict weather out to 16 days in the future. Horizontal resolution drops to 44 miles (70 kilometers) between grid point for forecasts between one week and two weeks. **Both the current version and the FV3-based parallel version of the GFS being tested to become the new operational model at a future date are available.**\n\nDocumentation: https://www.ncdc.noaa.gov/data-access/model-data/model-datasets/global-forcast-system-gfs\nContact: For questions regarding data content or quality, visit [the NOAA GFS site](http://www.emc.ncep.noaa.gov/index.php?branch=GFS). For any questions regarding data delivery not associated with this platform or any general questions regarding the NOAA Big Data Project, email noaa.bdp@noaa.gov.\nManagedBy: [NOAA](https://www.noaa.gov/)\nUpdateFrequency: 4 times a day, every 6 hours starting at midnight\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_noaa_gfs_bdp_pds/index.json", "https://registry.opendata.aws/noaa-gfs-bdp-pds/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_noaa_gfs_bdp_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_noaa_gfs_bdp_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_noaa_gfs_bdp_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_gfs_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_gfs_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_noaa_gfs_pds/", "public", "File Names from the AWS S3 noaa-gfs-pds Bucket: Unidata NOAA Global Forecast System (GFS) Model: A rolling four-week archive of 0.25 degree GFS data", "This dataset has file information from the AWS S3 noaa-gfs-pds bucket at https://noaa-gfs-pds.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Unidata NOAA Global Forecast System (GFS) Model\nName2: A rolling four-week archive of 0.25 degree GFS data\nDescription: The Global Forecast System (GFS) is a weather forecast model produced by the National Centers for Environmental Prediction (NCEP). Dozens of atmospheric and land-soil variables are available through this dataset, from temperatures, winds, and precipitation to soil moisture and atmospheric ozone concentration. The entire globe is covered by the GFS at a base horizontal resolution of 18 miles (28 kilometers) between grid points, which is used by the operational forecasters who predict weather out to 16 days in the future. Horizontal resolution drops to 44 miles (70 kilometers) between grid point for forecasts between one week and two weeks.\n\nDocumentation: https://docs.opendata.aws/noaa-gfs-pds/readme.html\nContact: https://www.ncdc.noaa.gov/contact\nManagedBy: [Unidata](https://www.unidata.ucar.edu/)\nUpdateFrequency: Every 6 hours\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_noaa_gfs_pds/index.json", "https://registry.opendata.aws/noaa-gfs-pds/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_noaa_gfs_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_noaa_gfs_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_noaa_gfs_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_gfspara_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_gfspara_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_noaa_gfspara_pds/", "public", "File Names from the AWS S3 noaa-gfspara-pds Bucket: NOAA Global Forecast System (GFS): A rolling four-week archive of 0.25 FV3-based parallel version of the GFS", "This dataset has file information from the AWS S3 noaa-gfspara-pds bucket at https://noaa-gfspara-pds.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NOAA Global Forecast System (GFS)\nName2: A rolling four-week archive of 0.25 FV3-based parallel version of the GFS\nDescription: The Global Forecast System (GFS) is a weather forecast model produced by the National Centers for Environmental Prediction (NCEP). Dozens of atmospheric and land-soil variables are available through this dataset, from temperatures, winds, and precipitation to soil moisture and atmospheric ozone concentration. The entire globe is covered by the GFS at a base horizontal resolution of 18 miles (28 kilometers) between grid points, which is used by the operational forecasters who predict weather out to 16 days in the future. Horizontal resolution drops to 44 miles (70 kilometers) between grid point for forecasts between one week and two weeks. **Both the current version and the FV3-based parallel version of the GFS being tested to become the new operational model at a future date are available.**\n\nDocumentation: https://www.ncdc.noaa.gov/data-access/model-data/model-datasets/global-forcast-system-gfs\nContact: For questions regarding data content or quality, visit [the NOAA GFS site](http://www.emc.ncep.noaa.gov/index.php?branch=GFS). For any questions regarding data delivery not associated with this platform or any general questions regarding the NOAA Big Data Project, email noaa.bdp@noaa.gov.\nManagedBy: [NOAA](https://www.noaa.gov/)\nUpdateFrequency: 4 times a day, every 6 hours starting at midnight\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_noaa_gfspara_pds/index.json", "https://registry.opendata.aws/noaa-gfs-bdp-pds/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_noaa_gfspara_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_noaa_gfspara_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_noaa_gfspara_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_ghcn_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_ghcn_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_noaa_ghcn_pds/", "public", "File Names from the AWS S3 noaa-ghcn-pds Bucket: NOAA Global Historical Climatology Network Daily (GHCN-D): Project data files", "This dataset has file information from the AWS S3 noaa-ghcn-pds bucket at https://noaa-ghcn-pds.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NOAA Global Historical Climatology Network Daily (GHCN-D)\nName2: Project data files\nDescription: Global Historical Climatology Network - Daily is a dataset from NOAA that contains daily observations over global land areas. It contains station-based measurements from land-based stations worldwide, about two thirds of which are for precipitation measurement only. Other meteorological elements include, but are not limited to, daily maximum and minimum temperature, temperature at the time of observation, snowfall and snow depth. It is a composite of climate records from numerous sources that were merged together and subjected to a common suite of quality assurance reviews.  Some data are more than 175 years old. The data is in CSV format. Each file corresponds to a year from 1763 to present and is named as such.\n\nDocumentation: https://docs.opendata.aws/noaa-ghcn-pds/readme.html\nContact: For questions regarding data content or quality, visit [the NOAA GHCN site](https://www.ncdc.noaa.gov/ghcn-daily-description). For any questions regarding data delivery not associated with this platform or any general questions regarding the NOAA Big Data Project, email noaa.bdp@noaa.gov\nManagedBy: [NOAA](https://www.noaa.gov/)\nUpdateFrequency: Daily\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_noaa_ghcn_pds/index.json", "https://registry.opendata.aws/noaa-ghcn/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_noaa_ghcn_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_noaa_ghcn_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_noaa_ghcn_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_ghe_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_ghe_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_noaa_ghe_pds/", "public", "File Names from the AWS S3 noaa-ghe-pds Bucket: NOAA Global Hydro Estimator (GHE): Project data files", "This dataset has file information from the AWS S3 noaa-ghe-pds bucket at https://noaa-ghe-pds.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NOAA Global Hydro Estimator (GHE)\nName2: Project data files\nDescription: Global Hydro-Estimator provides a global mosaic imagery of rainfall estimates from multi-geostationary satellites, which currently includes GOES-16, GOES-15, Meteosat-8, Meteosat-11 and Himawari-8. The GHE products include: Instantaneous rain rate, 1 hour, 3 hour, 6 hour, 24 hour and also multi-day rainfall accumulation.\n\nDocumentation: https://www.ospo.noaa.gov/Products/atmosphere/ghe/index.html\nContact: |\nManagedBy: [NOAA](https://www.noaa.gov/)\nUpdateFrequency: 15 minute-instantaneous\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_noaa_ghe_pds/index.json", "https://registry.opendata.aws/noaa-ghe/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_noaa_ghe_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_noaa_ghe_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_noaa_ghe_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_global_hourly_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_global_hourly_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_noaa_global_hourly_pds/", "public", "File Names from the AWS S3 noaa-global-hourly-pds Bucket: NOAA Global Historical Climatology Network Hourly (GHCN-H): Project data files", "This dataset has file information from the AWS S3 noaa-global-hourly-pds bucket at https://noaa-global-hourly-pds.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NOAA Global Historical Climatology Network Hourly (GHCN-H)\nName2: Project data files\nDescription: Global Historical Climatology Network - Hourly is a dataset from NOAA that contains daily observations over global land areas. It contains station-based measurements from land-based stations worldwide, about two thirds of which are for precipitation measurement only. Other meteorological elements include, but are not limited to, daily maximum and minimum temperature, temperature at the time of observation, snowfall and snow depth. It is a composite of climate records from numerous sources that were merged together and subjected to a common suite of quality assurance reviews.  Some data are more than 175 years old. The data is in CSV format. Each file corresponds to a year from 1763 to present and is named as such.\n\nDocumentation: https://www.ncei.noaa.gov/data/global-hourly/doc/isd-format-document.pdf\nContact: For questions regarding data content or quality, visit [the NOAA GHCN site](https://www.ncei.noaa.gov/data/global-hourly/doc/isd-format-document.pdf). For any questions regarding data delivery not associated with this platform or any general questions regarding the NOAA Big Data Project, email noaa.bdp@noaa.gov\nManagedBy: [NOAA](https://www.noaa.gov/)\nUpdateFrequency: daily (Manually)\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_noaa_global_hourly_pds/index.json", "https://registry.opendata.aws/noaa-ghcnh/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_noaa_global_hourly_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_noaa_global_hourly_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_noaa_global_hourly_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3NoaaGoes16", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3NoaaGoes16.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3NoaaGoes16/", "public", "File Names from the AWS S3 noaa-goes16 Bucket", "This dataset has file information from the AWS S3 noaa-goes16 bucket at https://noaa-goes16.s3.us-east-1.amazonaws.com/ . GOES satellites (GOES-16 & GOES-17) provide continuous weather imagery and monitoring of meteorological and space environment data across North America. GOES satellites provide the kind of continuous monitoring necessary for intensive data analysis. They hover continuously over one position on the surface. The satellites orbit high enough to allow for a full-disc view of the Earth. Because they stay above a fixed spot on the surface, they provide a constant vigil for the atmospheric \"triggers\" for severe weather conditions such as tornadoes, flash floods, hailstorms, and hurricanes. When these conditions develop, the GOES satellites are able to monitor storm development and track their movements.\n\nUse ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browser the files in buckets. This dataset is a solution to that problem for this bucket.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3NoaaGoes16/index.json", "https://registry.opendata.aws/noaa-goes/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3NoaaGoes16.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3NoaaGoes16&showErrors=false&email=", "NOAA", "awsS3NoaaGoes16"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_goes16", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_goes16.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_noaa_goes16/", "public", "File Names from the AWS S3 noaa-goes16 Bucket: GOES on AWS: GOES-16 imagery and metadata", "This dataset has file information from the AWS S3 noaa-goes16 bucket at https://noaa-goes16.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: GOES on AWS\nName2: GOES-16 imagery and metadata\nDescription: GOES satellites (GOES-16 & GOES-17) provide continuous weather imagery and monitoring of meteorological and space environment data across North America. GOES satellites provide the kind of continuous monitoring necessary for intensive data analysis. They hover continuously over one position on the surface. The satellites orbit high enough to allow for a full-disc view of the Earth. Because they stay above a fixed spot on the surface, they provide a constant vigil for the atmospheric \"triggers\" for severe weather conditions such as tornadoes, flash floods, hailstorms, and hurricanes. When these conditions develop, the GOES satellites are able to monitor storm development and track their movements.\n\nDocumentation: https://docs.opendata.aws/noaa-goes16/cics-readme.html\nContact: noaa.bdp@noaa.gov\nManagedBy: [NOAA](https://www.noaa.gov/)\nUpdateFrequency: New data is added as soon as it's available\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_noaa_goes16/index.json", "https://registry.opendata.aws/noaa-goes/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_noaa_goes16.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_noaa_goes16&showErrors=false&email=", "Amazon Web Services", "awsS3Files_noaa_goes16"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_goes17", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_goes17.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_noaa_goes17/", "public", "File Names from the AWS S3 noaa-goes17 Bucket: GOES on AWS: GOES-17 imagery and metadata", "This dataset has file information from the AWS S3 noaa-goes17 bucket at https://noaa-goes17.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: GOES on AWS\nName2: GOES-17 imagery and metadata\nDescription: GOES satellites (GOES-16 & GOES-17) provide continuous weather imagery and monitoring of meteorological and space environment data across North America. GOES satellites provide the kind of continuous monitoring necessary for intensive data analysis. They hover continuously over one position on the surface. The satellites orbit high enough to allow for a full-disc view of the Earth. Because they stay above a fixed spot on the surface, they provide a constant vigil for the atmospheric \"triggers\" for severe weather conditions such as tornadoes, flash floods, hailstorms, and hurricanes. When these conditions develop, the GOES satellites are able to monitor storm development and track their movements.\n\nDocumentation: https://docs.opendata.aws/noaa-goes16/cics-readme.html\nContact: noaa.bdp@noaa.gov\nManagedBy: [NOAA](https://www.noaa.gov/)\nUpdateFrequency: New data is added as soon as it's available\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_noaa_goes17/index.json", "https://registry.opendata.aws/noaa-goes/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_noaa_goes17.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_noaa_goes17&showErrors=false&email=", "Amazon Web Services", "awsS3Files_noaa_goes17"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_hrrr_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_hrrr_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_noaa_hrrr_pds/", "public", "File Names from the AWS S3 noaa-hrrr-pds Bucket: NOAA High-Resolution Rapid Refresh (HRRR) Model: A rolling one-week archive of HRRR data.", "This dataset has file information from the AWS S3 noaa-hrrr-pds bucket at https://noaa-hrrr-pds.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NOAA High-Resolution Rapid Refresh (HRRR) Model\nName2: A rolling one-week archive of HRRR data.\nDescription: The HRRR is a NOAA real-time 3-km resolution, hourly updated, cloud-resolving, convection-allowing atmospheric model, initialized by 3km grids with 3km radar assimilation. Radar data is assimilated in the HRRR every 15 min over a 1-h period adding further detail to that provided by the hourly data assimilation from the 13km radar-enhanced Rapid Refresh.\n\nDocumentation: https://docs.opendata.aws/noaa-hrrr-pds/readme.html\nContact: https://rapidrefresh.noaa.gov/hrrr/\nManagedBy: [Unidata](https://www.unidata.ucar.edu/)\nUpdateFrequency: Hourly\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_noaa_hrrr_pds/index.json", "https://registry.opendata.aws/noaa-hrrr-pds/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_noaa_hrrr_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_noaa_hrrr_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_noaa_hrrr_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_isd_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_isd_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_noaa_isd_pds/", "public", "File Names from the AWS S3 noaa-isd-pds Bucket: NOAA Integrated Surface Database (ISD): Project data files", "This dataset has file information from the AWS S3 noaa-isd-pds bucket at https://noaa-isd-pds.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NOAA Integrated Surface Database (ISD)\nName2: Project data files\nDescription: The Integrated Surface Database (ISD) consists of global hourly and synoptic observations compiled from numerous sources into a gzipped fixed width format. ISD was developed as a joint activity within Asheville's Federal Climate Complex. The database includes over 35,000 stations worldwide, with some having data as far back as 1901, though the data show a substantial increase in volume in the 1940s and again in the early 1970s. Currently, there are over 14,000 \"active\" stations updated daily in the database. The total uncompressed data volume is around 600 gigabytes; however, it continues to grow as more data are added. ISD includes numerous parameters such as wind speed and direction, wind gust, temperature, dew point, cloud data, sea level pressure, altimeter setting, station pressure, present weather, visibility, precipitation amounts for various time periods, snow depth, and various other elements as observed by each station.\n\nDocumentation: https://www.ncei.noaa.gov/data/global-hourly/doc/isd-format-document.pdf\nContact: |\nManagedBy: [NOAA](https://www.noaa.gov/)\nUpdateFrequency: Daily\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_noaa_isd_pds/index.json", "https://registry.opendata.aws/noaa-isd/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_noaa_isd_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_noaa_isd_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_noaa_isd_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_nexrad_level2", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_nexrad_level2.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_noaa_nexrad_level2/", "public", "File Names from the AWS S3 noaa-nexrad-level2 Bucket: NEXRAD on AWS: NEXRAD Level II archive data", "This dataset has file information from the AWS S3 noaa-nexrad-level2 bucket at https://noaa-nexrad-level2.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NEXRAD on AWS\nName2: NEXRAD Level II archive data\nDescription: Real-time and archival data from the Next Generation Weather Radar (NEXRAD) network.\n\nDocumentation: https://docs.opendata.aws/noaa-nexrad/readme.html\nContact: noaa.bdp@noaa.gov\nManagedBy: [NOAA](https://www.noaa.gov/)\nUpdateFrequency: New Level II data is added as soon as it is available.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_noaa_nexrad_level2/index.json", "https://registry.opendata.aws/noaa-nexrad/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_noaa_nexrad_level2.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_noaa_nexrad_level2&showErrors=false&email=", "Amazon Web Services", "awsS3Files_noaa_nexrad_level2"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_nwm_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_nwm_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_noaa_nwm_pds/", "public", "File Names from the AWS S3 noaa-nwm-pds Bucket: NOAA National Water Model Short-Range Forecast: A rolling four week archive of NWM data.", "This dataset has file information from the AWS S3 noaa-nwm-pds bucket at https://noaa-nwm-pds.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NOAA National Water Model Short-Range Forecast\nName2: A rolling four week archive of NWM data.\nDescription: The National Water Model (NWM) is a water resources model that simulates and forecasts water budget variables, including snowpack, evapotranspiration, soil moisture and streamflow, over the entire continental United States (CONUS). The model, launched in August 2016, is designed to improve the ability of NOAA to meet the needs of its stakeholders (forecasters, emergency managers, reservoir operators, first responders, recreationists, farmers, barge operators, and ecosystem and floodplain managers) by providing expanded accuracy, detail, and frequency of water information. It is operated by NOAA\u2019s Office of Water Prediction. This bucket contains a four-week rollover of the Short Range Forecast model output and the corresponding forcing data for the model. The model is forced with meteorological data from the High Resolution Rapid Refresh (HRRR) and the Rapid Refresh (RAP) models. The Short Range Forecast configuration cycles hourly and produces hourly deterministic forecasts of streamflow and hydrologic states out to 18 hours.\n\nDocumentation: https://docs.opendata.aws/noaa-nwm-pds/readme.html\nContact: |\nManagedBy: [NOAA](https://www.noaa.gov/)\nUpdateFrequency: Daily\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_noaa_nwm_pds/index.json", "https://registry.opendata.aws/noaa-nwm-pds/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_noaa_nwm_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_noaa_nwm_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_noaa_nwm_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_nwm_retro_v2_0_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_nwm_retro_v2_0_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_noaa_nwm_retro_v2_0_pds/", "public", "File Names from the AWS S3 noaa-nwm-retro-v2.0-pds Bucket: NOAA National Water Model Reanalysis: The complete archive of NWM data version 2.0.", "This dataset has file information from the AWS S3 noaa-nwm-retro-v2.0-pds bucket at https://noaa-nwm-retro-v2.0-pds.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NOAA National Water Model Reanalysis\nName2: The complete archive of NWM data version 2.0.\nDescription: The NOAA National Water Model Reanalysis dataset contains output from multi-decade retrospective simulations. These simulations used observed rainfall as input and ingested other required meteorological input fields from a weather reanalysis dataset. The output frequency and fields available in this historical NWM dataset differ from those contained in the real-time forecast model. One application of this dataset is to provide historical context to current real-time streamflow, soil moisture and snowpack NWM conditions. The reanalysis data can be used to infer flow frequencies and perform temporal analyses with hourly streamflow output and 3-hourly land surface output. The long-term dataset can also be used in the development of end user applications which require a long baseline of data for system training or verification purposes. This dataset contains output from two retrospective simulations.  Currently there are two versions of the dataset: A 25-year (January 1993 through December 2017) retrospective simulation using version 1.2 of the National Water Model, and a 26-year (January 1993 through December 2018) retrospective simulation using version 2.0 of the National Water Model.\n\nDocumentation: https://docs.opendata.aws/nwm-archive/readme.html\nContact: |\nManagedBy: [NOAA](https://www.noaa.gov/)\nUpdateFrequency: No updates\n\ncdm_data_type = Other\nVARIABLES:\nurl\n... (4 more variables)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_noaa_nwm_retro_v2_0_pds/index.json", "https://registry.opendata.aws/nwm-archive/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_noaa_nwm_retro_v2_0_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_noaa_nwm_retro_v2_0_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_noaa_nwm_retro_v2_0_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_ofs_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_noaa_ofs_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_noaa_ofs_pds/", "public", "File Names from the AWS S3 noaa-ofs-pds Bucket: NOAA Operational Forecast System (OFS): Project data files", "This dataset has file information from the AWS S3 noaa-ofs-pds bucket at https://noaa-ofs-pds.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NOAA Operational Forecast System (OFS)\nName2: Project data files\nDescription: The Operational Forecast System (OFS) has been developed to serve the maritime user community. OFS was developed in a joint project of the NOAA/National Ocean Service (NOS)/Office of Coast Survey, the NOAA/NOS/Center for Operational Oceanographic Products and Services (CO-OPS), and the NOAA/National Weather Service (NWS)/National Centers for Environmental Prediction (NCEP) Central Operations (NCO). OFS generates water level, water current, water temperature, water salinity (except for the Great Lakes) and wind conditions nowcast and forecast guidance four times per day.\n\nDocumentation: https://docs.opendata.aws/noaa-ofs-pds/readme.html\nContact: For questions regarding data content or quality, visit [the NOAA OFS site](https://tidesandcurrents.noaa.gov/models.html). For any questions regarding data delivery not associated with this platform or any general questions regarding the NOAA Big Data Project, email noaa.bdp@noaa.gov\nManagedBy: [NOAA](https://www.noaa.gov/)\nUpdateFrequency: 4 times a day, every 6 hours starting at midnight and generates 6-hour nowcasts and 48-hour forecast guidance\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_noaa_ofs_pds/index.json", "https://registry.opendata.aws/noaa-ofs/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_noaa_ofs_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_noaa_ofs_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_noaa_ofs_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_nrel_pds_wtk_wtk_techno_economic_pywtk_data", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_nrel_pds_wtk_wtk_techno_economic_pywtk_data.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_nrel_pds_wtk_wtk_techno_economic_pywtk_data/", "public", "File Names from the AWS S3 nrel-pds-wtk Bucket with prefix=wtk-techno-economic/pywtk-data/: NREL Wind Integration National Dataset on AWS: Techo-economic source files by location in [HDF5](https://portal.hdfgroup.org/display/HDF5) format", "This dataset has file information from the AWS S3 nrel-pds-wtk bucket at https://nrel-pds-wtk.s3.us-west-2.amazonaws.com/ with prefix=wtk-techno-economic/pywtk-data/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NREL Wind Integration National Dataset on AWS\nName2: Techo-economic source files by location in [HDF5](https://portal.hdfgroup.org/display/HDF5) format\nDescription: The [Wind Integration National Dataset (WIND)](https://www.nrel.gov/grid/wind-toolkit.html) is an update and expansion of the Eastern Wind Integration Data Set and Western Wind Integration Data Set. It supports the next generation of wind integration studies.\n\nDocumentation: https://www.nrel.gov/grid/wind-toolkit.html\nContact: wind-toolkit@nrel.gov\nManagedBy: [National Renewable Energy Laboratory](https://www.nrel.gov/)\nUpdateFrequency: As Needed\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_nrel_pds_wtk_wtk_techno_economic_pywtk_data/index.json", "https://registry.opendata.aws/nrel-pds-wtk/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_nrel_pds_wtk_wtk_techno_economic_pywtk_data.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_nrel_pds_wtk_wtk_techno_economic_pywtk_data&showErrors=false&email=", "Amazon Web Services", "awsS3Files_nrel_pds_wtk_wtk_techno_economic_pywtk_data"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_nwm_archive", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_nwm_archive.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_nwm_archive/", "public", "File Names from the AWS S3 nwm-archive Bucket: NOAA National Water Model Reanalysis: The complete archive of NWM data version 1.2.", "This dataset has file information from the AWS S3 nwm-archive bucket at https://nwm-archive.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NOAA National Water Model Reanalysis\nName2: The complete archive of NWM data version 1.2.\nDescription: The NOAA National Water Model Reanalysis dataset contains output from multi-decade retrospective simulations. These simulations used observed rainfall as input and ingested other required meteorological input fields from a weather reanalysis dataset. The output frequency and fields available in this historical NWM dataset differ from those contained in the real-time forecast model. One application of this dataset is to provide historical context to current real-time streamflow, soil moisture and snowpack NWM conditions. The reanalysis data can be used to infer flow frequencies and perform temporal analyses with hourly streamflow output and 3-hourly land surface output. The long-term dataset can also be used in the development of end user applications which require a long baseline of data for system training or verification purposes. This dataset contains output from two retrospective simulations.  Currently there are two versions of the dataset: A 25-year (January 1993 through December 2017) retrospective simulation using version 1.2 of the National Water Model, and a 26-year (January 1993 through December 2018) retrospective simulation using version 2.0 of the National Water Model.\n\nDocumentation: https://docs.opendata.aws/nwm-archive/readme.html\nContact: |\nManagedBy: [NOAA](https://www.noaa.gov/)\nUpdateFrequency: No updates\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_nwm_archive/index.json", "https://registry.opendata.aws/nwm-archive/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_nwm_archive.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_nwm_archive&showErrors=false&email=", "Amazon Web Services", "awsS3Files_nwm_archive"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_nyc_tlc", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_nyc_tlc.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_nyc_tlc/", "public", "File Names from the AWS S3 nyc-tlc Bucket: New York City Taxi and Limousine Commission (TLC) Trip Record Data: CSV files containing NYC TLC trip data.", "This dataset has file information from the AWS S3 nyc-tlc bucket at https://nyc-tlc.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: New York City Taxi and Limousine Commission (TLC) Trip Record Data\nName2: CSV files containing NYC TLC trip data.\nDescription: Data of trips taken by taxis and for-hire vehicles in New York City.\n\nDocumentation: http://www.nyc.gov/html/tlc/html/about/trip_record_data.shtml\nContact: research@tlc.nyc.gov\nUpdateFrequency: As soon as new data is available to be shared publicly.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_nyc_tlc/index.json", "https://registry.opendata.aws/nyc-tlc-trip-records-pds/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_nyc_tlc.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_nyc_tlc&showErrors=false&email=", "Amazon Web Services", "awsS3Files_nyc_tlc"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_oicr_icgc_meta_metadata", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_oicr_icgc_meta_metadata.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_oicr_icgc_meta_metadata/", "public", "File Names from the AWS S3 oicr.icgc.meta Bucket with prefix=metadata/: ICGC on AWS: This public Amazon S3 bucket contains analysis metadata in XML format for genome analysis results. More information at http://oicr.icgc.meta.s3.amazonaws.com/metadata/README", "This dataset has file information from the AWS S3 oicr.icgc.meta bucket at https://oicr.icgc.meta.s3.us-east-1.amazonaws.com/ with prefix=metadata/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: ICGC on AWS\nName2: This public Amazon S3 bucket contains analysis metadata in XML format for genome analysis results. More information at http://oicr.icgc.meta.s3.amazonaws.com/metadata/README\nDescription: The International Cancer Genome Consortium (ICGC) coordinates projects with the common aim of accelerating research into the causes and control of cancer. The PanCancer Analysis of Whole Genomes (PCAWG) study is an international collaboration to identify common patterns of mutation in whole genomes from ICGC. More than 2,400 consistently analyzed genomes corresponding to over 1,100 unique ICGC donors are now freely available on Amazon S3 to credentialed researchers subject to ICGC data sharing policies.\n\nDocumentation: https://dcc.icgc.org/icgc-in-the-cloud/aws\nContact: dcc-support@icgc.org\nUpdateFrequency: New data is added as soon as it is available.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_oicr_icgc_meta_metadata/index.json", "https://registry.opendata.aws/icgc/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_oicr_icgc_meta_metadata.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_oicr_icgc_meta_metadata&showErrors=false&email=", "Amazon Web Services", "awsS3Files_oicr_icgc_meta_metadata"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_ooni_data", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_ooni_data.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_ooni_data/", "public", "File Names from the AWS S3 ooni-data Bucket: Open Observatory of Network Interference: S3 bucket with data", "This dataset has file information from the AWS S3 ooni-data bucket at https://ooni-data.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Open Observatory of Network Interference\nName2: S3 bucket with data\nDescription: A free software, global observation network for detecting censorship, surveillance and traffic manipulation on the internet.\n\nDocumentation: https://ooni.torproject.org/about/\nContact: https://ooni.torproject.org/get-involved/\nUpdateFrequency: Daily\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_ooni_data/index.json", "https://registry.opendata.aws/ooni/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_ooni_data.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_ooni_data&showErrors=false&email=", "Amazon Web Services", "awsS3Files_ooni_data"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_openaq_fetches", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_openaq_fetches.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_openaq_fetches/", "public", "File Names from the AWS S3 openaq-fetches Bucket: OpenAQ: Minutely CSVs of global air quality fetched from sources all over the world", "This dataset has file information from the AWS S3 openaq-fetches bucket at https://openaq-fetches.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: OpenAQ\nName2: Minutely CSVs of global air quality fetched from sources all over the world\nDescription: Global, aggregated physical air quality data from public data sources provided by government, research-grade and other sources. These awesome groups do the hard work of measuring these data and publicly sharing them, and our community makes them more universally-accessible to both humans and machines.\n\nDocumentation: https://openaq.org\nContact: info@openaq.org\nManagedBy: [OpenAQ](https://openaq.org)\nUpdateFrequency: Minutely\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_openaq_fetches/index.json", "https://registry.opendata.aws/openaq/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_openaq_fetches.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_openaq_fetches&showErrors=false&email=", "Amazon Web Services", "awsS3Files_openaq_fetches"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_opencitymodel", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_opencitymodel.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_opencitymodel/", "public", "File Names from the AWS S3 opencitymodel Bucket: Open City Model (OCM): Project data files", "This dataset has file information from the AWS S3 opencitymodel bucket at https://opencitymodel.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Open City Model (OCM)\nName2: Project data files\nDescription: Open City Model is an initiative to provide cityGML data for all the buildings in the United States. By using other open datasets in conjunction with our own code and algorithms it is our goal to provide 3D geometries for every US building.\n\nDocumentation: https://github.com/opencitymodel/opencitymodel\nContact: https://github.com/opencitymodel/opencitymodel#contact\nUpdateFrequency: Quarterly\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_opencitymodel/index.json", "https://registry.opendata.aws/opencitymodel/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_opencitymodel.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_opencitymodel&showErrors=false&email=", "Amazon Web Services", "awsS3Files_opencitymodel"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_openneuro_org", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_openneuro_org.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_openneuro_org/", "public", "File Names from the AWS S3 openneuro.org Bucket: OpenNeuro: All datasets", "This dataset has file information from the AWS S3 openneuro.org bucket at https://openneuro.org.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: OpenNeuro\nName2: All datasets\nDescription: OpenNeuro is a database of openly-available brain imaging data. The data are shared according to a Creative Commons CC0 license, providing a broad range of brain imaging data to researchers and citizen scientists alike. The database primarily focuses on functional magnetic resonance imaging (fMRI) data, but also includes other imaging modalities including structural and diffusion MRI, electroencephalography (EEG), and magnetoencephalograpy (MEG). OpenfMRI is a project of the [Center for Reproducible Neuroscience at Stanford University](http://reproducibility.stanford.edu). Development of the OpenNeuro resource has been funded by the National Science Foundation, National Institute of Mental Health, National Institute on Drug Abuse, and the Laura and John Arnold Foundation.\n\nDocumentation: http://openneuro.org\nContact: Support form at https://openneuro.org\nUpdateFrequency: New datasets deposited every 4-6 days\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_openneuro_org/index.json", "https://registry.opendata.aws/openneuro/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_openneuro_org.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_openneuro_org&showErrors=false&email=", "Amazon Web Services", "awsS3Files_openneuro_org"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_osm_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_osm_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_osm_pds/", "public", "File Names from the AWS S3 osm-pds Bucket: OpenStreetMap on AWS: Imagery and metadata", "This dataset has file information from the AWS S3 osm-pds bucket at https://osm-pds.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: OpenStreetMap on AWS\nName2: Imagery and metadata\nDescription: OSM is a free, editable map of the world, created and maintained by volunteers. Regular OSM data archives are made available in Amazon S3.\n\nDocumentation: https://docs.opendata.aws/osm-pds/readme.html\nContact: https://github.com/mojodna/osm-pds-pipelines/issues\nUpdateFrequency: Data is updated weekly\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_osm_pds/index.json", "https://registry.opendata.aws/osm/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_osm_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_osm_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_osm_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_osmlr", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_osmlr.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_osmlr/", "public", "File Names from the AWS S3 osmlr Bucket: OpenStreetMap Linear Referencing: Manifest and data files", "This dataset has file information from the AWS S3 osmlr bucket at https://osmlr.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: OpenStreetMap Linear Referencing\nName2: Manifest and data files\nDescription: OSMLR a linear referencing system built on top of OpenStreetMap. OSM has great information about roads around the world and their interconnections, but it lacks the means to give a stable identifier to a stretch of roadway. OSMLR provides a stable set of numerical IDs for every 1 kilometer stretch of roadway around the world. In urban areas, OSMLR IDs are attached to each block of roadways between significant intersections.\n\nDocumentation: https://github.com/opentraffic/osmlr/blob/master/docs/intro.md\nContact: https://github.com/opentraffic/osmlr/issues\nUpdateFrequency: New data is added based on community feedback\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_osmlr/index.json", "https://registry.opendata.aws/osmlr/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_osmlr.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_osmlr&showErrors=false&email=", "Amazon Web Services", "awsS3Files_osmlr"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_qiime2_data", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_qiime2_data.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_qiime2_data/", "public", "File Names from the AWS S3 qiime2-data Bucket: QIIME 2 User Tutorial Datasets: Rendered docs and tutorial data, as generated by https://github.com/qiime2/docs", "This dataset has file information from the AWS S3 qiime2-data bucket at https://qiime2-data.s3.us-west-2.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: QIIME 2 User Tutorial Datasets\nName2: Rendered docs and tutorial data, as generated by https://github.com/qiime2/docs\nDescription: QIIME 2 is a powerful, extensible, and decentralized microbiome analysis package with a focus on data and analysis transparency. QIIME 2 enables researchers to start an analysis with raw DNA sequence data and finish with publication-quality figures and statistical results. This dataset contains the user docs (and related datasets) for QIIME 2.\n\nDocumentation: https://docs.qiime2.org\nContact: https://forum.qiime2.org\nManagedBy: The QIIME 2 Development Team\nUpdateFrequency: Quarterly\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_qiime2_data/index.json", "https://registry.opendata.aws/qiime2/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_qiime2_data.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_qiime2_data&showErrors=false&email=", "Amazon Web Services", "awsS3Files_qiime2_data"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_safecast_opendata_public_us_east_1", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_safecast_opendata_public_us_east_1.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_safecast_opendata_public_us_east_1/", "public", "File Names from the AWS S3 safecast-opendata-public-us-east-1 Bucket: Safecast: Bulk exports of air and radiation measurements", "This dataset has file information from the AWS S3 safecast-opendata-public-us-east-1 bucket at https://safecast-opendata-public-us-east-1.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Safecast\nName2: Bulk exports of air and radiation measurements\nDescription: An ongoing collection of radiation and air quality measurements taken by devices involved in the Safecast project.\n\nDocumentation: https://github.com/Safecast/safecastapi/wiki/Data-Sets\nContact: https://groups.google.com/forum/#!forum/safecast-devices\nManagedBy: [Safecast](https://safecast.org/)\nUpdateFrequency: Continuous\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_safecast_opendata_public_us_east_1/index.json", "https://registry.opendata.aws/safecast/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_safecast_opendata_public_us_east_1.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_safecast_opendata_public_us_east_1&showErrors=false&email=", "Amazon Web Services", "awsS3Files_safecast_opendata_public_us_east_1"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_sentinel_inventory_sentinel_s1_l1c", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_sentinel_inventory_sentinel_s1_l1c.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_sentinel_inventory_sentinel_s1_l1c/", "public", "File Names from the AWS S3 sentinel-inventory Bucket with prefix=sentinel-s1-l1c/: Sentinel-1: [S3 Inventory](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html#storage-inventory-contents) files for L1C", "This dataset has file information from the AWS S3 sentinel-inventory bucket at https://sentinel-inventory.s3.eu-central-1.amazonaws.com/ with prefix=sentinel-s1-l1c/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Sentinel-1\nName2: [S3 Inventory](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html#storage-inventory-contents) files for L1C\nDescription: [Sentinel-1](https://sentinel.esa.int/web/sentinel/missions/sentinel-1) is a pair of European radar imaging (SAR) satellites launched in 2014 and 2016. Its 6 days revisit cycle and ability to observe through clouds makes it perfect for sea and land monitoring, emergency response due to environmental disasters, and economic applications. GRD data is available globally since January 2017.\n\nDocumentation: https://roda.sentinel-hub.com/sentinel-s1-l1c/GRD/readme.html\nContact: https://forum.sentinel-hub.com/c/aws-sentinel\nManagedBy: [Sinergise](https://www.sinergise.com/)\nUpdateFrequency: New Sentinel data are added regularly, usually within few hours after they are available on Copernicus OpenHub.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_sentinel_inventory_sentinel_s1_l1c/index.json", "https://registry.opendata.aws/sentinel-1/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_sentinel_inventory_sentinel_s1_l1c.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_sentinel_inventory_sentinel_s1_l1c&showErrors=false&email=", "Amazon Web Services", "awsS3Files_sentinel_inventory_sentinel_s1_l1c"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_sentinel_inventory_sentinel_s2_l1c", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_sentinel_inventory_sentinel_s2_l1c.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_sentinel_inventory_sentinel_s2_l1c/", "public", "File Names from the AWS S3 sentinel-inventory Bucket with prefix=sentinel-s2-l1c/: Sentinel-2: [S3 Inventory](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html#storage-inventory-contents) files for L1C (ORC and CSV)", "This dataset has file information from the AWS S3 sentinel-inventory bucket at https://sentinel-inventory.s3.eu-central-1.amazonaws.com/ with prefix=sentinel-s2-l1c/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Sentinel-2\nName2: [S3 Inventory](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html#storage-inventory-contents) files for L1C (ORC and CSV)\nDescription: The [Sentinel-2 mission](https://sentinel.esa.int/web/sentinel/missions/sentinel-2) is a land monitoring constellation of two satellites that provide high resolution optical imagery and provide continuity for the current SPOT and Landsat missions. The mission provides a global coverage of the Earth's land surface every 5 days, making the data of great use in on-going studies. L1C data are available from June 2015 globally. L2A data are available from April 2017 over wider Europe region and globally since December 2018.\n\nDocumentation: Documentation is available for [Sentinel-2 L1C](https://roda.sentinel-hub.com/sentinel-s2-l1c/readme.html) and [Sentinel-2 L2A](https://roda.sentinel-hub.com/sentinel-s2-l2a/readme.html).\nContact: https://forum.sentinel-hub.com/c/aws-sentinel\nManagedBy: [Sinergise](https://www.sinergise.com/)\nUpdateFrequency: New Sentinel data are added regularly, usually within few hours after they are available on Copernicus OpenHub.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_sentinel_inventory_sentinel_s2_l1c/index.json", "https://registry.opendata.aws/sentinel-2/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_sentinel_inventory_sentinel_s2_l1c.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_sentinel_inventory_sentinel_s2_l1c&showErrors=false&email=", "Amazon Web Services", "awsS3Files_sentinel_inventory_sentinel_s2_l1c"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_sentinel_inventory_sentinel_s2_l2a", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_sentinel_inventory_sentinel_s2_l2a.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_sentinel_inventory_sentinel_s2_l2a/", "public", "File Names from the AWS S3 sentinel-inventory Bucket with prefix=sentinel-s2-l2a/: Sentinel-2: [S3 Inventory](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html#storage-inventory-contents) files for L2A (ORC and CSV)", "This dataset has file information from the AWS S3 sentinel-inventory bucket at https://sentinel-inventory.s3.eu-central-1.amazonaws.com/ with prefix=sentinel-s2-l2a/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Sentinel-2\nName2: [S3 Inventory](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html#storage-inventory-contents) files for L2A (ORC and CSV)\nDescription: The [Sentinel-2 mission](https://sentinel.esa.int/web/sentinel/missions/sentinel-2) is a land monitoring constellation of two satellites that provide high resolution optical imagery and provide continuity for the current SPOT and Landsat missions. The mission provides a global coverage of the Earth's land surface every 5 days, making the data of great use in on-going studies. L1C data are available from June 2015 globally. L2A data are available from April 2017 over wider Europe region and globally since December 2018.\n\nDocumentation: Documentation is available for [Sentinel-2 L1C](https://roda.sentinel-hub.com/sentinel-s2-l1c/readme.html) and [Sentinel-2 L2A](https://roda.sentinel-hub.com/sentinel-s2-l2a/readme.html).\nContact: https://forum.sentinel-hub.com/c/aws-sentinel\nManagedBy: [Sinergise](https://www.sinergise.com/)\nUpdateFrequency: New Sentinel data are added regularly, usually within few hours after they are available on Copernicus OpenHub.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_sentinel_inventory_sentinel_s2_l2a/index.json", "https://registry.opendata.aws/sentinel-2/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_sentinel_inventory_sentinel_s2_l2a.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_sentinel_inventory_sentinel_s2_l2a&showErrors=false&email=", "Amazon Web Services", "awsS3Files_sentinel_inventory_sentinel_s2_l2a"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_sentinel1_slc_seasia_pds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_sentinel1_slc_seasia_pds.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_sentinel1_slc_seasia_pds/", "public", "File Names from the AWS S3 sentinel1-slc-seasia-pds Bucket: Sentinel-1 SLC dataset for South and Southeast Asia, Taiwan, and Japan: Public access to Sentinel-1 SLC IW scenes over South and Southeast Asia, Taiwan and Japan", "This dataset has file information from the AWS S3 sentinel1-slc-seasia-pds bucket at https://sentinel1-slc-seasia-pds.s3.ap-southeast-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Sentinel-1 SLC dataset for South and Southeast Asia, Taiwan, and Japan\nName2: Public access to Sentinel-1 SLC IW scenes over South and Southeast Asia, Taiwan and Japan\nDescription: The S1 Single Look Complex (SLC) dataset contains Synthetic Aperture Radar (SAR) data in the C-Band wavelength. The SAR sensors are installed on a two-satellite (Sentinel-1A and Sentinel-1B) constellation orbiting the Earth with a combined revisit time of six days, operated by the European Space Agency. The S1 SLC data are a Level-1 product that collects radar amplitude and phase information in all-weather, day or night conditions, which is ideal for studying natural hazards and emergency response, land applications, oil spill monitoring, sea-ice conditions, and associated climate change effects.\n\nDocumentation: https://github.com/earthobservatory/sentinel1-opds/\nContact: https://github.com/earthobservatory/sentinel1-opds/\nManagedBy: [Earth Observatory of Singapore, Nanyang Technological University](https://earthobservatory.sg)\nUpdateFrequency: S1 SLC data for the region of interest will be updated regularly, as it becomes available on the Alaska Satellite Facility endpoint.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_sentinel1_slc_seasia_pds/index.json", "https://registry.opendata.aws/sentinel1-slc-seasia-pds/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_sentinel1_slc_seasia_pds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_sentinel1_slc_seasia_pds&showErrors=false&email=", "Amazon Web Services", "awsS3Files_sentinel1_slc_seasia_pds"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_silo_open_data", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_silo_open_data.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_silo_open_data/", "public", "File Names from the AWS S3 silo-open-data Bucket: SILO climate data on AWS: SILO open data", "This dataset has file information from the AWS S3 silo-open-data bucket at https://silo-open-data.s3.ap-southeast-2.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: SILO climate data on AWS\nName2: SILO open data\nDescription: [SILO](https://www.longpaddock.qld.gov.au/silo) is a database of Australian [climate data](https://www.longpaddock.qld.gov.au/silo/about/climate-variables) from 1889 to the present. It provides continuous, daily time-step [data products](https://www.longpaddock.qld.gov.au/silo/about/data-products) in ready-to-use [formats](https://www.longpaddock.qld.gov.au/silo/about/file-formats-and-samples) for research and operational applications. Gridded SILO data in annual NetCDF format are on AWS. Point data are available from the [SILO website](https://www.longpaddock.qld.gov.au/silo/).\n\nDocumentation: https://www.longpaddock.qld.gov.au/silo/gridded-data\nContact: https://www.longpaddock.qld.gov.au/silo/contact-us\nManagedBy: Queensland Government\nUpdateFrequency: Daily\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_silo_open_data/index.json", "https://registry.opendata.aws/silo/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_silo_open_data.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_silo_open_data&showErrors=false&email=", "Amazon Web Services", "awsS3Files_silo_open_data"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_softwareheritage", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_softwareheritage.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_softwareheritage/", "public", "File Names from the AWS S3 softwareheritage Bucket: Software Heritage Graph Dataset: Software Heritage Graph Dataset", "This dataset has file information from the AWS S3 softwareheritage bucket at https://softwareheritage.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Software Heritage Graph Dataset\nName2: Software Heritage Graph Dataset\nDescription: [Software Heritage](https://www.softwareheritage.org/) is the largest existing public archive of software source code and accompanying development history. The Software Heritage Graph Dataset is a fully deduplicated Merkle DAG representation of the Software Heritage archive.\n\nDocumentation: https://wiki.softwareheritage.org/wiki/Graph_Dataset_on_Amazon_Athena\nContact: swh-devel@inria.fr\nUpdateFrequency: Data is updated yearly\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_softwareheritage/index.json", "https://registry.opendata.aws/software-heritage/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_softwareheritage.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_softwareheritage&showErrors=false&email=", "Amazon Web Services", "awsS3Files_softwareheritage"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_spacenet_dataset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_spacenet_dataset.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_spacenet_dataset/", "public", "File Names from the AWS S3 spacenet-dataset Bucket: SpaceNet: Imagery and metadata in a S3 bucket", "This dataset has file information from the AWS S3 spacenet-dataset bucket at https://spacenet-dataset.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: SpaceNet\nName2: Imagery and metadata in a S3 bucket\nDescription: SpaceNet, launched in August 2016 as an open innovation project offering a repository of freely available imagery with co-registered map features. Before SpaceNet, computer vision researchers had   minimal options to obtain free, precision-labeled, and high-resolution satellite imagery. Today, SpaceNet hosts datasets developed by its own team, along with data sets from projects like IARPA\u2019s Functional Map of the World (fMoW).\n\nDocumentation: https://spacenetchallenge.github.io\nContact: https://github.com/SpaceNetChallenge/utilities/issues\nManagedBy: [SpaceNet](https://spacenet.ai/)\nUpdateFrequency: New imagery and features are added quarterly\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_spacenet_dataset/index.json", "https://registry.opendata.aws/spacenet/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_spacenet_dataset.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_spacenet_dataset&showErrors=false&email=", "Amazon Web Services", "awsS3Files_spacenet_dataset"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_unidata_nexrad_level2_chunks", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_unidata_nexrad_level2_chunks.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_unidata_nexrad_level2_chunks/", "public", "File Names from the AWS S3 unidata-nexrad-level2-chunks Bucket: NEXRAD on AWS: NEXRAD Level II real-time data", "This dataset has file information from the AWS S3 unidata-nexrad-level2-chunks bucket at https://unidata-nexrad-level2-chunks.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: NEXRAD on AWS\nName2: NEXRAD Level II real-time data\nDescription: Real-time and archival data from the Next Generation Weather Radar (NEXRAD) network.\n\nDocumentation: https://docs.opendata.aws/noaa-nexrad/readme.html\nContact: noaa.bdp@noaa.gov\nManagedBy: [NOAA](https://www.noaa.gov/)\nUpdateFrequency: New Level II data is added as soon as it is available.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_unidata_nexrad_level2_chunks/index.json", "https://registry.opendata.aws/noaa-nexrad/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_unidata_nexrad_level2_chunks.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_unidata_nexrad_level2_chunks&showErrors=false&email=", "Amazon Web Services", "awsS3Files_unidata_nexrad_level2_chunks"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_usgs_lidar_public", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_usgs_lidar_public.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_usgs_lidar_public/", "public", "File Names from the AWS S3 usgs-lidar-public Bucket: USGS 3DEP LiDAR Point Clouds: Public access Entwine Point Tiles of most resources from the ``arn:aws:s3:::usgs-lidar`` bucket.", "This dataset has file information from the AWS S3 usgs-lidar-public bucket at https://usgs-lidar-public.s3.us-west-2.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: USGS 3DEP LiDAR Point Clouds\nName2: Public access Entwine Point Tiles of most resources from the ``arn:aws:s3:::usgs-lidar`` bucket.\nDescription: The goal of the [USGS 3D Elevation Program ](https://www.usgs.gov/core-science-systems/ngp/3dep) (3DEP) is to collect elevation data in the form of light detection and ranging (LiDAR) data over the conterminous United States, Hawaii, and the U.S. territories, with data acquired over an 8-year period. This dataset provides two realizations of the 3DEP point cloud data. The first resource is a public access organization provided in [Entwine Point Tiles](https://entwine.io/entwine-point-tile.html) format, which a lossless, full-density, streamable octree based on [LASzip](https://laszip.org) (LAZ) encoding. The second resource is a [Requester Pays](https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html) of the same data in LAZ (Compressed LAS) format. Resource names in both buckets correspond to the USGS project names.\n\nDocumentation: https://github.com/hobu/usgs-lidar/\nContact: https://github.com/hobu/usgs-lidar\nManagedBy: [Hobu, Inc.](https://hobu.co)\nUpdateFrequency: Periodically\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_usgs_lidar_public/index.json", "https://registry.opendata.aws/usgs-lidar/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_usgs_lidar_public.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_usgs_lidar_public&showErrors=false&email=", "Amazon Web Services", "awsS3Files_usgs_lidar_public"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_web_language_models", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_web_language_models.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_web_language_models/", "public", "File Names from the AWS S3 web-language-models Bucket: Provision of Web-Scale Parallel Corpora for Official European Languages (ParaCrawl): Parallel Corpora to/from English for all official EU languages", "This dataset has file information from the AWS S3 web-language-models bucket at https://web-language-models.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Provision of Web-Scale Parallel Corpora for Official European Languages (ParaCrawl)\nName2: Parallel Corpora to/from English for all official EU languages\nDescription: ParaCrawl is a set of large parallel corpora to/from English for all official EU languages by a broad web crawling effort. State-of-the-art methods are applied for the entire processing chain from identifying web sites with translated text all the way to collecting, cleaning and delivering parallel corpora that are ready as training data for CEF.AT and translation memories for DG Translation.\n\nDocumentation: https://paracrawl.eu/releases.html\nContact: For questions regarding the datasets contact Kenneth Heafield, email kheafiel@inf.ed.ac.uk. For reporting any issues about bitextor pipeline visit https://github.com/bitextor/bitextor/issues.\nManagedBy: [ParaCrawl](https://paracrawl.eu)\nUpdateFrequency: New data is added according to ParaCrawl release schedule.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_web_language_models/index.json", "https://registry.opendata.aws/paracrawl/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_web_language_models.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_web_language_models&showErrors=false&email=", "Amazon Web Services", "awsS3Files_web_language_models"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_xiph_media", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_xiph_media.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_xiph_media/", "public", "File Names from the AWS S3 xiph-media Bucket: Xiph.Org Test Media: Video and imagery data", "This dataset has file information from the AWS S3 xiph-media bucket at https://xiph-media.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Xiph.Org Test Media\nName2: Video and imagery data\nDescription: Uncompressed video used for video compression and video processing research.\n\nDocumentation: https://media.xiph.org/aws.html\nContact: Thomas Daede tdaede@xiph.org\nUpdateFrequency: New videos are added when contributors submit them.\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_xiph_media/index.json", "https://registry.opendata.aws/xiph-media/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_xiph_media.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_xiph_media&showErrors=false&email=", "Amazon Web Services", "awsS3Files_xiph_media"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_ycb_benchmarks", "https://upwell.pfeg.noaa.gov/erddap/tabledap/awsS3Files_ycb_benchmarks.graph", "", "https://upwell.pfeg.noaa.gov/erddap/files/awsS3Files_ycb_benchmarks/", "public", "File Names from the AWS S3 ycb-benchmarks Bucket: Yale-CMU-Berkeley (YCB) Object and Model Set: Project data files", "This dataset has file information from the AWS S3 ycb-benchmarks bucket at https://ycb-benchmarks.s3.us-east-1.amazonaws.com/ . Use ERDDAP's \"files\" system for this dataset to browse and download the files. The \"files\" information for this dataset is always perfectly up-to-date because ERDDAP gets it on-the-fly. AWS S3 doesn't offer a simple way to browse the files in their public, Open Data buckets. This dataset is a solution to that problem for this bucket.\n\nName: Yale-CMU-Berkeley (YCB) Object and Model Set\nName2: Project data files\nDescription: This project primarily aims to facilitate performance benchmarking in robotics research. The dataset provides mesh models, RGB, RGB-D and point cloud images of over 80 objects. The physical objects are also available via the [YCB benchmarking project](http://www.ycbbenchmarks.com/). The data are collected by two state of the art systems: UC Berkley's scanning rig and the Google scanner. The UC Berkley's scanning rig data provide meshes generated with Poisson reconstruction, meshes generated with volumetric range image integration, textured versions of both meshes, Kinbody files for using the meshes with OpenRAVE, 600 High-resolution RGB images, 600 RGB-D images, and 600 point cloud images for each object. The Google scanner data provides 3 meshes with different resolutions (16k, 64k, and 512k polygons), textured versions of each mesh, Kinbody files for using the meshes with OpenRAVE.\n\nDocumentation: http://www.ycbbenchmarks.com/\nContact: bcalli@wpi.edu\nUpdateFrequency: Yearly\n\ncdm_data_type = Other\nVARIABLES:\nurl\nname (File Name)\nlastModified (Last Modified, seconds since 1970-01-01T00:00:00Z)\nsize (bytes)\nfileType (File Type)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/awsS3Files_ycb_benchmarks/index.json", "https://registry.opendata.aws/ycb-benchmarks/", "http://upwell.pfeg.noaa.gov/erddap/rss/awsS3Files_ycb_benchmarks.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=awsS3Files_ycb_benchmarks&showErrors=false&email=", "Amazon Web Services", "awsS3Files_ycb_benchmarks"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/scrippsGliders.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/scrippsGliders", "https://upwell.pfeg.noaa.gov/erddap/tabledap/scrippsGliders.graph", "", "", "public", "Gliders, Scripps Institution of Oceanography, 2014-present", "Spray glider data from Scripps Institution of Oceanography, Instrument Development Group. Gliders are small, free-swimming, unmanned vehicles that use changes in buoyancy to move vertically and horizontally through the water column in a saw-tooth pattern. They are deployed for days to several months and gather detailed information about the physical, chemical and biological processes of the world's oceans.\n\ncdm_data_type = TrajectoryProfile\nVARIABLES:\ntrajectory (Trajectory Name)\ninstitution\nplatform_id\nplatform_type\nwmo_id\nctd_make_model (CTD Make and Model)\nsegment_id\ntime_uv (Depth-averaged Time, seconds since 1970-01-01T00:00:00Z)\nlat_uv (Depth-averaged Latitude, degrees_north)\nlon_uv (Depth-averaged Longitude, degrees_east)\nu (Depth-averaged Eastward Sea Water Velocity, m s-1)\nv (Depth-averaged Northward Sea Water Velocity, m s-1)\nuv_qc (uv Quality Flag)\nprofile_id\nprofile_qc (Profile time, latitude, longitude Quality Flag)\ntime (Profile Time, seconds since 1970-01-01T00:00:00Z)\nlatitude (Profile Latitude, degrees_north)\nlongitude (Profile Longitude, degrees_east)\ndepth (m)\nd_qc (depth quality flag)\npressure (Sea Water Pressure, dbar)\np_qc (pressure quality flag)\ntemperature (Sea Water Temperature, Celsius)\n... (11 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/scrippsGliders_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/scrippsGliders_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/scrippsGliders/index.json", "https://spray.ucsd.edu", "http://upwell.pfeg.noaa.gov/erddap/rss/scrippsGliders.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=scrippsGliders&showErrors=false&email=", "Scripps Institution of Oceanography", "scrippsGliders"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGtsppBest.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGtsppBest", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGtsppBest.graph", "", "", "public", "Global Temperature and Salinity Profile Programme (GTSPP) Data, 1985-present", "The Global Temperature-Salinity Profile Programme (GTSPP) develops and maintains a global ocean temperature and salinity resource with data that are both up-to-date and of the highest quality. It is a joint World Meteorological Organization (WMO) and Intergovernmental Oceanographic Commission (IOC) program.  It includes data from XBTs, CTDs, moored and drifting buoys, and PALACE floats. For information about organizations contributing data to GTSPP, see http://gosic.org/goos/GTSPP-data-flow.htm .  The U.S. National Oceanographic Data Center (NODC) maintains the GTSPP Continuously Managed Data Base and releases new 'best-copy' data once per month.\n\nWARNING: This dataset has a *lot* of data.  If you request too much data, your request will fail.\n* If you don't specify a longitude and latitude bounding box, don't request more than a month's data at a time.\n* If you do specify a longitude and latitude bounding box, you can request data for a proportionally longer time period.\nRequesting data for a specific station_id may be slow, but it works.\n\n*** This ERDDAP dataset has data for the entire world for all available times (currently, up to and including the June 2020 data) but is a subset of the original NODC 'best-copy' data.  It only includes data where the quality flags indicate the data is 1=CORRECT, 2=PROBABLY GOOD, or 5=MODIFIED. It does not include some of the metadata, any of the history data, or any of the quality flag data of the original dataset. You can always get the complete, up-to-date dataset (and additional, near-real-time data) from the source: https://www.nodc.noaa.gov/GTSPP/ .  Specific differences are:\n* Profiles with a position_quality_flag or a time_quality_flag other than 1|2|5 were removed.\n* Rows with a depth (z) value less than -0.4 or greater than 10000 or a z_variable_quality_flag other than 1|2|5 were removed.\n* Temperature values less than -4 or greater than 40 or with a temperature_quality_flag other than 1|2|5 were set to NaN.\n* Salinity values less than 0 or greater than 41 or with a salinity_quality_flag other than 1|2|5 were set to NaN.\n* Time values were converted from \"days since 1900-01-01 00:00:00\" to \"seconds since 1970-01-01T00:00:00\".\n\nSee the Quality Flag definitions on page 5 and \"Table 2.1: Global Impossible Parameter Values\" on page 61 of\nhttps://www.nodc.noaa.gov/GTSPP/document/qcmans/GTSPP_RT_QC_Manual_20090916.pdf .\nThe Quality Flag definitions are also at\nhttps://www.nodc.noaa.gov/GTSPP/document/qcmans/qcflags.htm .\n\ncdm_data_type = TrajectoryProfile\nVARIABLES:\ntrajectory (Trajectory ID)\n... (11 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdGtsppBest_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdGtsppBest_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdGtsppBest/index.json", "https://www.nodc.noaa.gov/GTSPP/", "http://upwell.pfeg.noaa.gov/erddap/rss/erdGtsppBest.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdGtsppBest&showErrors=false&email=", "NOAA NODC", "erdGtsppBest"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGlobecMoc1.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGlobecMoc1", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGlobecMoc1.graph", "", "", "public", "GLOBEC NEP MOCNESS Plankton (MOC1) Data, 2000-2002", "GLOBEC (GLOBal Ocean ECosystems Dynamics) NEP (Northeast Pacific) California Current Program\nMOCNESS Plankton (MOC1) Data\nThe MOCNESS is based on the Tucker Trawl principle (Tucker, 1951). The MOCNESS-1 has nine rectangular nets (1m x 1.4 m) which are opened and closed sequentially by commands through conducting cable from the surface (Wiebe et al., 1976). In MOCNESS systems, \"the underwater unit sends a data frame, comprised of temperature, depth, conductivity, net-frame angle, flow count, time, number of open net, and net opening/closing, to the deck unit in a compressed hexadecimal format every 2 seconds and from the deck unit to a microcomputer every 4 seconds... Temperature (to approximately 0.01 deg C) and conductivity are measured with SEABIRD sensors. Normally, a modified T.S.K.-flowmeter is used... Both the temperature and conductivity sensors and the flowmeter are mounted on top of the frame so that they face horizontally when the frame is at a towing angle of 45deg... Calculations of salinity (to approximately 0.01 o/oo S), potential temperature (theta), potential density (sigma), the oblique and vertical velocities of the net, and the approximate volume filtered by each net are made after each string of data has been received by the computer.\" (Wiebe et al., 1985) In addition, depending on the particular configuration of the MOCNESS-1, data may have been collected from other sensors attached to the frame : (Transmissometer, Fluorometer, Downwelling light sensor, and the Oxygen sensor). A SeaBird underwater pump was also included in the sensor suit e.\nAfter retrieval to deck, the contents of the nets were rinsed into the codends a nd transferred to storage bottles, and fixed and preserved with formalin. In the shore laboratory, the contents of the bottles were subsampled and counts and biomass estimates made for selected taxa (see the Proc_Protocol info below). This data object reports only the count information.\n\nFor more information, see\nhttp://cis.whoi.edu/science/bcodmo/dataset.cfm?id=10182&flag=view\nor\nhttp://globec.whoi.edu/jg/info/globec/nep/ccs/MOC1%7Bdir=globec.whoi.edu/jg/dir/globec/nep/ccs/,data=globec.coas.oregonstate.edu/jg/serv/MOC1.html0%7D\n\nAll inquiries about this data should be directed to Dr. William Peterson (bill.peterson@noaa.gov).\nInquiries about how to access this data should be directed to Dr. Hal Batchelder (hbatchelder@coas.oregonstate.edu).\n\ncdm_data_type = Trajectory\nVARIABLES:\ncruise_id\n... (22 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdGlobecMoc1_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdGlobecMoc1_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdGlobecMoc1/index.json", "https://en.wikipedia.org/wiki/Global_Ocean_Ecosystem_Dynamics", "http://upwell.pfeg.noaa.gov/erddap/rss/erdGlobecMoc1.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdGlobecMoc1&showErrors=false&email=", "GLOBEC", "erdGlobecMoc1"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGlobecBirds.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGlobecBirds", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGlobecBirds.graph", "", "", "public", "GLOBEC NEP Northern California Current Bird Data NH0005, 2000-2000, 0007", "GLOBEC (GLOBal Ocean ECosystems Dynamics) NEP (Northeast Pacific)\nNorthern California Current Bird Data from R/V New Horizon cruises NH0005 and 0007.\n\nAs a part of the GLOBEC-Northeast Pacific project, we investigated variation in the abundance of marine birds in the context of biological and physical habitat conditions in the northern portion of the California Current System (CCS) during cruises during the upwelling season 2000. Continuous surveys of seabirds were conducted simultaneously in June (onset of upwelling) and August (mature phase of upwelling).\n\nSeabird surveys were conducted continuously during daylight, using a 300-m-wide transect strip. Within that strip, birds were counted that occurred within the 90 degree quadrant off the ship's bow that offered the best observation conditions.\n\nObserved counts of seabirds recorded as flying in a steady direction were adjusted for the effect of flight speed and direction relative to that of the ship (Spear et al., 1992; Spear and Ainley, 1997b). The effect of such flux is the most serious bias encountered during seabird surveys at sea (Spear et al., 2005). Known as random directional movement (as opposed to nonrandom directional movement, which occurs when birds are attracted or repelled from the survey vessel), this problem usually results in density overestimation because most species fly faster than survey vessels; densities of birds that fly slower or at a similar speed as the survey vessel (e.g., storm-petrels), or are flying in the same direction, are usually underestimated (Spear et al., 1992)\n\n(extracted from: David G. Ainley, Larry B. Spear, Cynthia T. Tynan, John A. Barth, Stephen D. Pierce, R. Glenn Ford and Timothy J. Cowles, 2005. Physical and biological variables affecting seabird distributions during the upwelling season of the northern California Current. Deep Sea Research Part II: Topical Studies in Oceanography, Volume 52, Issues 1-2, January 2005, Pages 123-143)\n\nFor more information, see\nhttp://cis.whoi.edu/science/bcodmo/dataset.cfm?id=10053&flag=view\nor\nhttp://globec.whoi.edu/jg/info/globec/nep/ccs/birds%7Bdir=globec.whoi.edu/jg/dir/globec/nep/ccs/,data=globec.whoi.edu/jg/serv/globec/nep/ccs/birds.html0%7D\n\nContact:\nCynthia T. Tynan, ctynan@whoi.edu, Woods Hole Oceanographic Institution\nDavid G. Ainley, dainley@penguinscience.com, H.T. Harvey & Associates\n\ncdm_data_type = Trajectory\nVARIABLES:\ntrans_no (Transect Number)\n... (12 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdGlobecBirds_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdGlobecBirds_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdGlobecBirds/index.json", "https://en.wikipedia.org/wiki/Global_Ocean_Ecosystem_Dynamics", "http://upwell.pfeg.noaa.gov/erddap/rss/erdGlobecBirds.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdGlobecBirds&showErrors=false&email=", "GLOBEC", "erdGlobecBirds"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGlobecCetaceans.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGlobecCetaceans", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGlobecCetaceans.graph", "", "", "public", "GLOBEC NEP Northern California Current Cetacean Survey Data, NH0005, 2000-2000, 0007", "GLOBEC (GLOBal Ocean ECosystems Dynamics) NEP (Northeast Pacific)\nNorthern California Current Cetacean Survey Data from R/V New Horizon cruises NH0005 and 0007.\n\nLine-transect surveys of cetaceans were conducted during two cruises of the GLOBEC Northeast Pacific Northern California Current (NCC) program in 2000: May 29 -June 13 and July 27 - August 12.   Surveys were conducted across the shelf and slope off Oregon and northern California (41.9 - 44.65N) from the coast to ~125.5W.   Surveys were conducted in passing mode while the R/V New Horizon was in transit between stations for hydrographic and zooplankton sampling.   Observations were conducted from the flying bridge during daylight (~0600 to 2030) whenever sufficient visibility (i.e., > 2 nm) and weather (i.e., < Beaufort 6) allowed.   Two observers simultaneously surveyed to the horizon with 25 x 150 binoculars, equipped with compass and reticle.   Each observer surveyed a 100 degree arc from 10 degrees off the bow (opposite side) to 90 degrees on their side of the ship.   A third observer focused on the track-line by eye, aided with 7 x 50 hand-held binoculars.   Sightings were entered immediately on a laptop computer connected to the ship's GPS system.   Positions of all sightings were corrected to reflect the actual location of the cetaceans, rather than the ship's position.   The height from the surface of the water to the eyes of observers on the 25 x 150 binoculars was 10.87 m.\n\nFor more information, see:\nhttp://cis.whoi.edu/science/bcodmo/dataset.cfm?id=10055&flag=view\nor\nhttp://globec.whoi.edu/jg/info/globec/nep/ccs/cetaceans%7Bdir=globec.whoi.edu/jg/dir/globec/nep/ccs/,data=globec.whoi.edu/jg/serv/globec/nep/ccs/cetaceans.html0%7D\n\nContact PIs:\nCynthia T. Tynan, ctynan@whoi.edu, Woods Hole Oceanographic Institution\nDavid G. Ainley, dainley@penguinscience.com, H.T. Harvey & Associates\n\ncdm_data_type = Trajectory\nVARIABLES:\ncruise_id\nlongitude (degrees_east)\n... (7 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdGlobecCetaceans_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdGlobecCetaceans_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdGlobecCetaceans/index.json", "https://en.wikipedia.org/wiki/Global_Ocean_Ecosystem_Dynamics", "http://upwell.pfeg.noaa.gov/erddap/rss/erdGlobecCetaceans.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdGlobecCetaceans&showErrors=false&email=", "GLOBEC", "erdGlobecCetaceans"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGlobecBottle.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGlobecBottle", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGlobecBottle.graph", "", "", "public", "GLOBEC NEP Rosette Bottle Data (2002)", "GLOBEC (GLOBal Ocean ECosystems Dynamics) NEP (Northeast Pacific)\nRosette Bottle Data from New Horizon Cruise (NH0207: 1-19 August 2002).\nNotes:\nPhysical data processed by Jane Fleischbein (OSU).\nChlorophyll readings done by Leah Feinberg (OSU).\nNutrient analysis done by Burke Hales (OSU).\nSal00 - salinity calculated from primary sensors (C0,T0).\nSal11 - salinity calculated from secondary sensors (C1,T1).\nsecondary sensor pair was used in final processing of CTD data for\nmost stations because the primary had more noise and spikes. The\nprimary pair were used for cast #9, 24, 48, 111 and 150 due to\nmultiple spikes or offsets in the secondary pair.\nNutrient samples were collected from most bottles; all nutrient data\ndeveloped from samples frozen during the cruise and analyzed ashore;\ndata developed by Burke Hales (OSU).\nOperation Detection Limits for Nutrient Concentrations\nNutrient  Range         Mean    Variable         Units\nPO4       0.003-0.004   0.004   Phosphate        micromoles per liter\nN+N       0.04-0.08     0.06    Nitrate+Nitrite  micromoles per liter\nSi        0.13-0.24     0.16    Silicate         micromoles per liter\nNO2       0.003-0.004   0.003   Nitrite          micromoles per liter\nDates and Times are UTC.\n\nFor more information, see https://www.bco-dmo.org/dataset/2452\n\nInquiries about how to access this data should be directed to\nDr. Hal Batchelder (hbatchelder@coas.oregonstate.edu).\n\ncdm_data_type = TrajectoryProfile\nVARIABLES:\ncruise_id\n... (24 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdGlobecBottle_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdGlobecBottle_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdGlobecBottle/index.json", "https://en.wikipedia.org/wiki/Global_Ocean_Ecosystem_Dynamics", "http://upwell.pfeg.noaa.gov/erddap/rss/erdGlobecBottle.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdGlobecBottle&showErrors=false&email=", "GLOBEC", "erdGlobecBottle"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGlobecVpt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGlobecVpt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGlobecVpt.graph", "", "", "public", "GLOBEC NEP Vertical Plankton Tow (VPT) Data, 1997-2001", "GLOBEC (GLOBal Ocean ECosystems Dynamics) NEP (Northeast Pacific)\nCalifornia Current Program\nVertical Plankton Tow (VPT) Data\n\nFor more information, see\nhttp://cis.whoi.edu/science/bcodmo/dataset.cfm?id=10181&flag=view\nor\nhttp://globec.whoi.edu/jg/info/globec/nep/ccs/vpt%7Bdir=globec.whoi.edu/jg/dir/globec/nep/ccs/,data=globec.coas.oregonstate.edu/jg/serv/vpt.html0%7D\n\nAll inquiries about this data should be directed to Dr. William Peterson (bill.peterson@noaa.gov).\nInquiries about how to access this data should be directed to Dr. Hal Batchelder (hbatchelder@coas.oregonstate.edu).\n\ncdm_data_type = Trajectory\nVARIABLES:\ncruise_id\nlongitude (degrees_east)\nlatitude (degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\ncast_no (Cast Number Within the Cruise)\nstation_id\nabund_m3 (Abundance, count m-3)\ncomments\ncounter_id\nd_n_flag (Day/Night Flag)\ngear_area (Mouth Area of Net, m2)\ngear_mesh (Net's Mesh Size, mm)\ngear_type\ngenus_species\nlife_stage\nlocal_code\n... (8 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdGlobecVpt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdGlobecVpt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdGlobecVpt/index.json", "https://en.wikipedia.org/wiki/Global_Ocean_Ecosystem_Dynamics", "http://upwell.pfeg.noaa.gov/erddap/rss/erdGlobecVpt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdGlobecVpt&showErrors=false&email=", "GLOBEC", "erdGlobecVpt"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGodaeSfcobs", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdGodaeSfcobs.graph", "", "", "public", "GODAE, SFCOBS - Surface Temperature Observations, 1998-present", "GODAE, SFCOBS - Surface Temperature Observations: Ship, fixed/drifting buoy, and CMAN in-situ surface temperature.  Global Telecommunication System (GTS) Data.\n        \nThe Global Ocean Data Assimilation Experiment (GODAE) is a practical demonstration of near-real-time, global ocean data assimilation that provides, regular, complete descriptions of the temperature, salinity and velocity structures of the ocean in support of operational oceanography, seasonal-to-decadal climate forecasts and analyses, and oceanographic research. The GODAE Monterey Server, sponsored mainly by the Office of Naval Research (ONR), is intended to be a principal node in the GODAE architecture.\n\ncdm_data_type = Point\nVARIABLES:\nlongitude (degrees_east)\nlatitude (degrees_north)\ntime (Observation Time, seconds since 1970-01-01T00:00:00Z)\nob_clm (GDEM Climatological SST, degree_C)\nob_csgm (GDEM SST Climatological Variability, degree_C)\nob_glb (Global Analysis SST Estimate, degree_C)\nob_gsgm (Global Analysis SST Variability Estimate, degree_C)\nob_qc (Probability of gross error in SST)\nob_rcpt (SST observation receipt time at FNMOC, seconds since 1970-01-01T00:00:00Z)\nob_rgn (Regional Analysis SST Estimate, degree_C)\nob_rsgm (Regional Analysis SST Variability Estimate, degree_C)\nob_sign (SST observation call sign)\nob_sst (Sea Surface Temperature, degree_C)\nob_typ (SST obseration data type)\nob_wm (SST water mass indicator)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdGodaeSfcobs_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdGodaeSfcobs_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdGodaeSfcobs/index.json", "https://usgodae.org/", "http://upwell.pfeg.noaa.gov/erddap/rss/erdGodaeSfcobs.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdGodaeSfcobs&showErrors=false&email=", "FNMOC GODAE", "erdGodaeSfcobs"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/cwb_water_quality.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/cwb_water_quality", "https://upwell.pfeg.noaa.gov/erddap/tabledap/cwb_water_quality.graph", "", "", "public", "Hawaii Clean Water Branch (CWB) Beach Water Quality Data", "Exposure to sewage contaminated recreational waters may cause gastrointestinal illnesses in swimmers. The State of Hawaii Department of Health (HIDOH) Clean Water Branch (CWB) monitors the waters of Hawaii's beaches for concentrations of Enterococcus, which acts as an indicator of pathogens. The CWB also uses Clostridium perfringens as a secondary tracer of sewage contamination. Results of this monitoring are evaluated using a decision rule to determine whether a beach is safe (\"Compliant\") or not safe (on \"Alert\") for swimming and other water contact activities. If a beach is found to be on \"Alert\" due to elevated indicator bacteria levels, the CWB issues public warnings and alerts and determines whether resampling of the area is necessary.\n\nUnder the U.S. BEACH Act, the State of Hawaii receives an annual grant to implement its beach monitoring program. This requires the State to conduct a monitoring and notification program that is consistent with performance criteria published by the U.S. Environmental Protection Agency (EPA) in 2002. In March 2010, the EPA approved amendments to the Hawaii Administrative Rules (HAR), Chapter 11-54, Water Quality Standards (CWB QAPrgP, HIDOH 2011, Appendix D), which revised the previous State Enterococcus criteria of a geometric mean (GM) of 7 colony-forming units (CFU) per 100 mL and a single sample maximum (SSM) of 100 CFU/100 mL to meet current EPA guidelines. The State of Hawaii now uses the EPA recommended Enterococcus GM and SSM for recreational waters consistent in the 1986 Ambient Water Quality Criteria for Bacteria. The criterion lists the GM and SSM for marine waters as 35 CFU/100 mL and 104 CFU/100 mL, respectively.\n\nThe CWB utilizes Clostridium perfringens as a secondary tracer in addition to the Enterococcus indicator to help distinguish between sewage and non-sewage sources of elevated Enterococcus levels in marine coastal waters. The reliability of Enterococcus as an indicator organism in tropical environments has been questioned. This issue was formally documented in the report, Tropical Water Quality Indicator Workshop (Fujioka and Byappanahalli, 2003).\n\nOne of the limitations of all available and EPA-approved test methods is that the sample must be incubated for about 24 hours. As a result, the public finds out today when they shouldn't have gone in the water yesterday. As a result, warning signs on the beach may or may not be reflective of actual water quality because they are based on tests performed one or more days ago.\n\nBeach Monitoring Quality Assurance Project Plan (CWBMONQAPP002):\nhttps://www.pacioos.hawaii.edu/wp-content/uploads/2016/08/Beach_Monitoring_QAPP_CWBMONQAPP002_120507.pdf\n\ncdm_data_type = Point\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\n... (12 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/cwb_water_quality_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/cwb_water_quality_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/cwb_water_quality/index.json", "http://www.beachapedia.org/State_of_the_Beach/State_Reports/HI/Water_Quality", "http://upwell.pfeg.noaa.gov/erddap/rss/cwb_water_quality.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=cwb_water_quality&showErrors=false&email=", "State of Hawaii Clean Water Branch (CWB)", "cwb_water_quality"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/AWS-HIMB.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/AWS-HIMB", "https://upwell.pfeg.noaa.gov/erddap/tabledap/AWS-HIMB.graph", "", "", "public", "HIMB Weather Station: Moku o Loe (Coconut Island), Oahu, Hawaii", "The Hawaii Institute of Marine Biology (HIMB) automatic weather station (AWS) records hourly measurements of precipitation, air temperature, wind speed and direction, and irradiance. Sensors include an Eppley 295-385 nm ultraviolet (UV) radiometer, a LiCor 200SZ Pyranometer, and a LiCor Quantameter (400-700 nm). The sensors are located on the roof of HIMB's Coral Reef Ecology Laboratory (Point Lab) on Moku o Loe (Coconut Island) in Kaneohe Bay on the windward (eastern) coast of Oahu in Hawaii. An accompanying sea water temperature sensor is located less than 10 m offshore of the weather station at a shallow depth of approximately 1 m.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\naltitude (Distance above mean sea level, m)\nstation_name (AWS-HIMB: HIMB Weather Station: Moku o Loe (Coconut Island), Oahu, Hawaii)\nair_temperature (air temperature (processed), Celsius)\nsea_water_temperature (water temperature (processed), Celsius)\nwind_speed (wind speed (processed), m/s)\ngust_speed (gust speed (processed), m/s)\nwind_from_direction (wind direction (processed), degrees)\nwind_from_direction_std (standard deviation of wind direction (processed), degrees)\nrainfall_amount (total rainfall (processed), mm)\nshortwave_radiation (downwelling shortwave radiation (processed), W/m2)\nultraviolet_radiation (ultraviolet radiation (processed), W/m2)\nphotosynthetic_radiation (photosynthetically active radiation (processed), umol m-2 s-1)\nair_temperature_raw (air temperature (raw), Celsius)\nair_temperature_dm_qd (air temperature delayed-mode quality descriptor, 0)\nair_temperature_qc_agg (QARTOD Aggregate/Rollup Test (processed), 0)\nair_temperature_qc_atn (QARTOD Attenuated Signal Test (processed), 0)\nair_temperature_qc_clm (QARTOD Climatology Test (processed), 0)\nair_temperature_qc_flt (QARTOD Flat Line Test (processed), 0)\n... (139 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/AWS-HIMB_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/AWS-HIMB_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/AWS-HIMB/index.json", "https://www.pacioos.hawaii.edu/weather/obs-mokuoloe/", "http://upwell.pfeg.noaa.gov/erddap/rss/AWS-HIMB.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=AWS-HIMB&showErrors=false&email=", "Hawaii Institute of Marine Biology (HIMB)", "AWS-HIMB"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/earthCubeLisirdHistTsi", "https://upwell.pfeg.noaa.gov/erddap/tabledap/earthCubeLisirdHistTsi.graph", "", "", "public", "Historical Total Solar Irradiance Reconstruction", "Historical Total Solar Irradiance (TSI) Reconstruction econstruction from Wang, Lean, Sheeley (ApJ, 2005).  Offset -4.8178 W/m^2 to match SORCE/TIM absolute value from Kopp, Lawrence, and Rottman (Solar Phys, 2005). Extended using SORCE/TIM annual averages from 2003 onward. Computed by Greg Kopp.  From the LASP Interactive Solar Irradiance Data (LISIRD) Center\n\ncdm_data_type = Other\nVARIABLES:\nyear\nirradiance (Total Solar Irradiance, W/m^2)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/earthCubeLisirdHistTsi/index.json", "http://lasp.colorado.edu/lisird/", "http://upwell.pfeg.noaa.gov/erddap/rss/earthCubeLisirdHistTsi.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=earthCubeLisirdHistTsi&showErrors=false&email=", "LISIRD", "earthCubeLisirdHistTsi"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/hui_water_quality.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/hui_water_quality", "https://upwell.pfeg.noaa.gov/erddap/tabledap/hui_water_quality.graph", "", "", "public", "Hui O Ka Wai Ola Water Quality Data", "The goal of the Hui O Ka Wai Ola (Association Of The Living Waters) citizen-science based water quality program is to increase the capacity for monitoring water quality in Maui coastal waters by generating reliable data to assess long-term water-quality conditions and detect temporal trends. These data augment the data produced by the Hawaii Department of Health (DOH) Clean Water Branch (CWB) beach monitoring program on Maui.\n    \nData are collected and analyzed every two or three weeks for physical and chemical parameters, including ocean salinity, pH, temperature, organic nutrients (nitrogen and phosphorous compounds), dissolved oxygen (DO), and total suspended sediment (TSS). Some water samples are immediately tested at mobile labs while others are processed for testing at University of Hawaii and/or other labs.\n    \nUsers of these data should cite the following publication:\n    \nFalinski, Kim, Dana Reed, Tova Callender, Emily Fielding, Robin Newbold, and Alana Yurkanin. (2018). Hui O Ka Wai Ola Water Quality Data [Data set]. Zenodo. \"http://doi.org/10.5281/zenodo.1173717\"\n    \nFor further information, please visit:\nhttps://www.huiokawaiola.com\n\ncdm_data_type = Point\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nlocation_id (sampling site identifier)\nlocation_name\nsample_id (sample identifier)\nsession_id (sampling session identifier)\nwater_temperature (Celsius)\n... (12 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/hui_water_quality_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/hui_water_quality_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/hui_water_quality/index.json", "https://www.huiokawaiola.com", "http://upwell.pfeg.noaa.gov/erddap/rss/hui_water_quality.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=hui_water_quality&showErrors=false&email=", "Hui O Ka Wai Ola", "hui_water_quality"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_ais.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_ais", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_ais.graph", "", "", "public", "Liquid Robotics Wave Glider, Honey Badger (G3), 2015, AIS", "Liquid Robotics Wave Glider, Honey Badger (G3), 2015, AIS. The MAGI mission is to use the Wave Glider to sample the late summer chlorophyll bloom that develops near 30\u00b0N, with the goal of using the camera and LISST-Holo to try to identify species in the blooms and then follow the development of phytoplankton aggregates. These aggregates have recently been shown to be a significant part of the total amount of carbon that sinks to the deep sea. Karl et al (2012) found that in each of the past 13 years, there was a flux of material to 4,000 m (the summer export pulse) that represented ~20% of the total annual flux. Work based on satellite ocean color data over the past decade has revealed the existence of large phytoplankton blooms in the Pacific Ocean that cover thousands of km2, persist for weeks or longer, and are often dominated by nitrogen-fixing diatom symbioses (Wilson et al. 2008). We hope to be able to examine whether this aggregation is occurring in the vast oceanic regions north and east of Hawai'i and provide a basin-scale context for the ALOHA observations. These events have proven difficult to study outside of the time series station ALOHA at Hawai'i.\n\ncdm_data_type = Trajectory\nVARIABLES:\nvehicleName (Vehicle Name)\nais\nfeed_version\ntime (Datetime, seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nMMSI (Maritime Mobile Service Identity)\nCOG (Course Over Ground, degrees_true)\nSOG (Speed Over Ground, knots)\nROT (Rate Of Turn, degrees/min)\nHeading (degrees_true)\nNavigationStatus (Navigation Status)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/LiquidR_HBG3_2015_ais_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/LiquidR_HBG3_2015_ais_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/LiquidR_HBG3_2015_ais/index.json", "https://oceanview.pfeg.noaa.gov/MAGI/", "http://upwell.pfeg.noaa.gov/erddap/rss/LiquidR_HBG3_2015_ais.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=LiquidR_HBG3_2015_ais&showErrors=false&email=", "Liquid Robotics, UT Austin, NOAA NMFS SWFSC ERD", "LiquidR_HBG3_2015_ais"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_c3.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_c3", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_c3.graph", "", "", "public", "Liquid Robotics Wave Glider, Honey Badger (G3), 2015, C3", "Liquid Robotics Wave Glider, Honey Badger (G3), 2015, C3.\nC3 board number 8215 (not coated) appears as board_id=32, task_id=23.\nC3 board number 771 (coated) appears as board_id=3, task_id=3. The MAGI mission is to use the Wave Glider to sample the late summer chlorophyll bloom that develops near 30\u00b0N, with the goal of using the camera and LISST-Holo to try to identify species in the blooms and then follow the development of phytoplankton aggregates. These aggregates have recently been shown to be a significant part of the total amount of carbon that sinks to the deep sea. Karl et al (2012) found that in each of the past 13 years, there was a flux of material to 4,000 m (the summer export pulse) that represented ~20% of the total annual flux. Work based on satellite ocean color data over the past decade has revealed the existence of large phytoplankton blooms in the Pacific Ocean that cover thousands of km2, persist for weeks or longer, and are often dominated by nitrogen-fixing diatom symbioses (Wilson et al. 2008). We hope to be able to examine whether this aggregation is occurring in the vast oceanic regions north and east of Hawai'i and provide a basin-scale context for the ALOHA observations. These events have proven difficult to study outside of the time series station ALOHA at Hawai'i.\n\ncdm_data_type = Trajectory\nVARIABLES:\nvehicleName (Vehicle Name)\nboard_id\ntask_id\nc3_ (C3)\nfeed_version\ntime (Datetime, seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nunix_timestamp (seconds since 1970-01-01T00:00:00Z)\nc1_chlorophyll (Channel 1: Chlorophyll, RFU)\nc2_CDOM (Channel 2: CDOM, RFU)\nc3_phycoerythrin (Channel 3: Phycoerythrin, RFU)\npressure (?)\ntemperature (degree_C)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/LiquidR_HBG3_2015_c3_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/LiquidR_HBG3_2015_c3_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/LiquidR_HBG3_2015_c3/index.json", "https://oceanview.pfeg.noaa.gov/MAGI/", "http://upwell.pfeg.noaa.gov/erddap/rss/LiquidR_HBG3_2015_c3.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=LiquidR_HBG3_2015_c3&showErrors=false&email=", "Liquid Robotics, UT Austin, NOAA NMFS SWFSC ERD", "LiquidR_HBG3_2015_c3"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_ctd.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_ctd", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_ctd.graph", "", "", "public", "Liquid Robotics Wave Glider, Honey Badger (G3), 2015, CTD", "Liquid Robotics Wave Glider, Honey Badger (G3), 2015, CTD. The MAGI mission is to use the Wave Glider to sample the late summer chlorophyll bloom that develops near 30\u00b0N, with the goal of using the camera and LISST-Holo to try to identify species in the blooms and then follow the development of phytoplankton aggregates. These aggregates have recently been shown to be a significant part of the total amount of carbon that sinks to the deep sea. Karl et al (2012) found that in each of the past 13 years, there was a flux of material to 4,000 m (the summer export pulse) that represented ~20% of the total annual flux. Work based on satellite ocean color data over the past decade has revealed the existence of large phytoplankton blooms in the Pacific Ocean that cover thousands of km2, persist for weeks or longer, and are often dominated by nitrogen-fixing diatom symbioses (Wilson et al. 2008). We hope to be able to examine whether this aggregation is occurring in the vast oceanic regions north and east of Hawai'i and provide a basin-scale context for the ALOHA observations. These events have proven difficult to study outside of the time series station ALOHA at Hawai'i.\n\ncdm_data_type = Trajectory\nVARIABLES:\nvehicleName (Vehicle Name)\nboard_id\ntask_id\nctd\nfeed_version\ntime (Datetime, seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nunix_timestamp (seconds since 1970-01-01T00:00:00Z)\ntemperature (degree_C)\npressure (dBar)\nconductivity (Sea Water Electrical Conductivity, S/m)\ndissolved_O_uncalibrated (Hz)\npractical_salinity (Sea Water Practical Salinity, PSU)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/LiquidR_HBG3_2015_ctd_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/LiquidR_HBG3_2015_ctd_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/LiquidR_HBG3_2015_ctd/index.json", "https://oceanview.pfeg.noaa.gov/MAGI/", "http://upwell.pfeg.noaa.gov/erddap/rss/LiquidR_HBG3_2015_ctd.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=LiquidR_HBG3_2015_ctd&showErrors=false&email=", "Liquid Robotics, UT Austin, NOAA NMFS SWFSC ERD", "LiquidR_HBG3_2015_ctd"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_mose.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_mose", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_mose.graph", "", "", "public", "Liquid Robotics Wave Glider, Honey Badger (G3), 2015, MOSE", "Liquid Robotics Wave Glider, Honey Badger (G3), 2015, MOSE. The MAGI mission is to use the Wave Glider to sample the late summer chlorophyll bloom that develops near 30\u00b0N, with the goal of using the camera and LISST-Holo to try to identify species in the blooms and then follow the development of phytoplankton aggregates. These aggregates have recently been shown to be a significant part of the total amount of carbon that sinks to the deep sea. Karl et al (2012) found that in each of the past 13 years, there was a flux of material to 4,000 m (the summer export pulse) that represented ~20% of the total annual flux. Work based on satellite ocean color data over the past decade has revealed the existence of large phytoplankton blooms in the Pacific Ocean that cover thousands of km2, persist for weeks or longer, and are often dominated by nitrogen-fixing diatom symbioses (Wilson et al. 2008). We hope to be able to examine whether this aggregation is occurring in the vast oceanic regions north and east of Hawai'i and provide a basin-scale context for the ALOHA observations. These events have proven difficult to study outside of the time series station ALOHA at Hawai'i.\n\ncdm_data_type = Trajectory\nVARIABLES:\nvehicleName (Vehicle Name)\nboard_id\ntask_id\nmose\nfeed_version\ntime (Datetime, seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nunix_timestamp (seconds since 1970-01-01T00:00:00Z)\nsignificant_wave_height (Sea Surface Wave Significant Height, m)\naverage_period_all_waves (Sea Surface Swell Wave Period, s)\nperiod_between_significant_waves (Sea Surface Swell Wave Period, s)\ndirection_of_significant_waves (Sea Surface Wave To Direction, degrees_true)\nnumber_averaged_spectra\nnumber_samples_per_spectrum\nnumber_sample_gaps\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/LiquidR_HBG3_2015_mose_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/LiquidR_HBG3_2015_mose_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/LiquidR_HBG3_2015_mose/index.json", "https://oceanview.pfeg.noaa.gov/MAGI/", "http://upwell.pfeg.noaa.gov/erddap/rss/LiquidR_HBG3_2015_mose.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=LiquidR_HBG3_2015_mose&showErrors=false&email=", "Liquid Robotics, UT Austin, NOAA NMFS SWFSC ERD", "LiquidR_HBG3_2015_mose"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_phytoflash.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_phytoflash", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_phytoflash.graph", "", "", "public", "Liquid Robotics Wave Glider, Honey Badger (G3), 2015, Phytoflash", "Liquid Robotics Wave Glider, Honey Badger (G3), 2015, Phytoflash. The MAGI mission is to use the Wave Glider to sample the late summer chlorophyll bloom that develops near 30\u00b0N, with the goal of using the camera and LISST-Holo to try to identify species in the blooms and then follow the development of phytoplankton aggregates. These aggregates have recently been shown to be a significant part of the total amount of carbon that sinks to the deep sea. Karl et al (2012) found that in each of the past 13 years, there was a flux of material to 4,000 m (the summer export pulse) that represented ~20% of the total annual flux. Work based on satellite ocean color data over the past decade has revealed the existence of large phytoplankton blooms in the Pacific Ocean that cover thousands of km2, persist for weeks or longer, and are often dominated by nitrogen-fixing diatom symbioses (Wilson et al. 2008). We hope to be able to examine whether this aggregation is occurring in the vast oceanic regions north and east of Hawai'i and provide a basin-scale context for the ALOHA observations. These events have proven difficult to study outside of the time series station ALOHA at Hawai'i.\n\ncdm_data_type = Trajectory\nVARIABLES:\nvehicleName (Vehicle Name)\nboard_id\ntask_id\nphytoflash\nfeed_version\ntime (Datetime, seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nunix_timestamp (seconds since 1970-01-01T00:00:00Z)\nFo\nFm\nBlank\nFv\nYield\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/LiquidR_HBG3_2015_phytoflash_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/LiquidR_HBG3_2015_phytoflash_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/LiquidR_HBG3_2015_phytoflash/index.json", "https://oceanview.pfeg.noaa.gov/MAGI/", "http://upwell.pfeg.noaa.gov/erddap/rss/LiquidR_HBG3_2015_phytoflash.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=LiquidR_HBG3_2015_phytoflash&showErrors=false&email=", "Liquid Robotics, UT Austin, NOAA NMFS SWFSC ERD", "LiquidR_HBG3_2015_phytoflash"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_telemetry.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_telemetry", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_telemetry.graph", "", "", "public", "Liquid Robotics Wave Glider, Honey Badger (G3), 2015, Telemetry", "Liquid Robotics Wave Glider, Honey Badger (G3), 2015, Telemetry. The MAGI mission is to use the Wave Glider to sample the late summer chlorophyll bloom that develops near 30\u00b0N, with the goal of using the camera and LISST-Holo to try to identify species in the blooms and then follow the development of phytoplankton aggregates. These aggregates have recently been shown to be a significant part of the total amount of carbon that sinks to the deep sea. Karl et al (2012) found that in each of the past 13 years, there was a flux of material to 4,000 m (the summer export pulse) that represented ~20% of the total annual flux. Work based on satellite ocean color data over the past decade has revealed the existence of large phytoplankton blooms in the Pacific Ocean that cover thousands of km2, persist for weeks or longer, and are often dominated by nitrogen-fixing diatom symbioses (Wilson et al. 2008). We hope to be able to examine whether this aggregation is occurring in the vast oceanic regions north and east of Hawai'i and provide a basin-scale context for the ALOHA observations. These events have proven difficult to study outside of the time series station ALOHA at Hawai'i.\n\ncdm_data_type = Trajectory\nVARIABLES:\nvehicleName (Vehicle Name)\ntelemetry\nfeed_version\ntime (Datetime, seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\ndistance_over_ground (m)\ndesired_heading (degrees)\nsub_heading (degrees)\ntarget_waypoint\nsub_temperature (degree_C)\ntotal_power (mWh)\nwater_speed (knots)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/LiquidR_HBG3_2015_telemetry_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/LiquidR_HBG3_2015_telemetry_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/LiquidR_HBG3_2015_telemetry/index.json", "https://oceanview.pfeg.noaa.gov/MAGI/", "http://upwell.pfeg.noaa.gov/erddap/rss/LiquidR_HBG3_2015_telemetry.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=LiquidR_HBG3_2015_telemetry&showErrors=false&email=", "Liquid Robotics, UT Austin, NOAA NMFS SWFSC ERD", "LiquidR_HBG3_2015_telemetry"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_weather.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_weather", "https://upwell.pfeg.noaa.gov/erddap/tabledap/LiquidR_HBG3_2015_weather.graph", "", "", "public", "Liquid Robotics Wave Glider, Honey Badger (G3), 2015, Weather", "Liquid Robotics Wave Glider, Honey Badger (G3), 2015, Weather. The MAGI mission is to use the Wave Glider to sample the late summer chlorophyll bloom that develops near 30\u00b0N, with the goal of using the camera and LISST-Holo to try to identify species in the blooms and then follow the development of phytoplankton aggregates. These aggregates have recently been shown to be a significant part of the total amount of carbon that sinks to the deep sea. Karl et al (2012) found that in each of the past 13 years, there was a flux of material to 4,000 m (the summer export pulse) that represented ~20% of the total annual flux. Work based on satellite ocean color data over the past decade has revealed the existence of large phytoplankton blooms in the Pacific Ocean that cover thousands of km2, persist for weeks or longer, and are often dominated by nitrogen-fixing diatom symbioses (Wilson et al. 2008). We hope to be able to examine whether this aggregation is occurring in the vast oceanic regions north and east of Hawai'i and provide a basin-scale context for the ALOHA observations. These events have proven difficult to study outside of the time series station ALOHA at Hawai'i.\n\ncdm_data_type = Trajectory\nVARIABLES:\nvehicleName (Vehicle Name)\nweather\nfeed_version\ntime (Datetime, seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\ntemperature (degree_C)\npressure (mBar)\navg_wind_speed (Wind Speed, knots)\nstd_dev_wind_speed (Wind Speed, knots)\navg_wind_direction (Wind From Direction, degrees_true)\nstd_dev_wind_direction (Wind From Direction, degrees_true)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/LiquidR_HBG3_2015_weather_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/LiquidR_HBG3_2015_weather_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/LiquidR_HBG3_2015_weather/index.json", "https://oceanview.pfeg.noaa.gov/MAGI/", "http://upwell.pfeg.noaa.gov/erddap/rss/LiquidR_HBG3_2015_weather.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=LiquidR_HBG3_2015_weather&showErrors=false&email=", "Liquid Robotics, UT Austin, NOAA NMFS SWFSC ERD", "LiquidR_HBG3_2015_weather"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/maui_water_quality.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/maui_water_quality", "https://upwell.pfeg.noaa.gov/erddap/tabledap/maui_water_quality.graph", "", "", "public", "Maui Citizen Science Coastal Water Quality Data", "A network of citizen science volunteers periodically monitored water quality at several beaches across the island of Maui in the State of Hawaii during the years 2010-2016. This community-based monitoring effort provided valuable data for resource management purposes. Informed volunteer networks can serve as a community's \"eyes and ears\" and will often provide the first indications of changes to a system. In addition to the value of early detection, it is important to maintain ongoing monitoring efforts to compile data and document resource conditions.\n\nIn addition to water temperature, salinity, turbidity (water clarity), and pH, sampling sites were also monitored for harmful bacteria levels of Enterococcus through 2014-06-26. This indicator bacteria has been correlated with the presence of human pathogens (disease-causing organisms) and therefore with human illnesses such as gastroenteritis, diarrhea, and various infections in epidemiological studies. As such, it is commonly measured in beach water quality monitoring programs. For reference, the U.S. Environmental Protection Agency (EPA) 1986 Ambient Water Quality Criteria for Bacteria recommends that a water quality alert is posted if either: (a.) the latest water sample exceeds 104 CFU/100 mL of Enterococcus, or (b.) the geometric mean of the past 30 days of water samples exceeds 35 CFU/100 mL. One of the limitations of all available and EPA-approved test methods is that the sample must be incubated for about 24 hours.\n\nData were managed through an online repository, the Coral Reef Monitoring Data Portal (now defunct), developed and coordinated by the Coral Reef Alliance (CORAL) and its partners with funding provided by the Hawaii Tourism Authority (HTA) and the National Oceanic and Atmospheric Administration (NOAA). Data collection was coordinated by the Hawaii Division of Aquatic Resources (DAR), the Hawaiian Islands Humpback Whale National Marine Sanctuary (HIHWNMS), Aquanimity Now, the Digital Bus, Save Honolua Coalition, Project S.E.A.-Link, and other local organizations and agencies. Data are publicly distributed by the Pacific Islands Ocean Observing System (PacIOOS).\n\ncdm_data_type = Point\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\nlongitude (degrees_east)\nlatitude (degrees_north)\n... (9 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/maui_water_quality_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/maui_water_quality_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/maui_water_quality/index.json", "https://coral.org/maui/", "http://upwell.pfeg.noaa.gov/erddap/rss/maui_water_quality.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=maui_water_quality&showErrors=false&email=", "Coral Reef Alliance (CORAL)", "maui_water_quality"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/cwwcNDBCMet.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/cwwcNDBCMet", "https://upwell.pfeg.noaa.gov/erddap/tabledap/cwwcNDBCMet.graph", "", "", "public", "NDBC Standard Meteorological Buoy Data, 1970-present", "The National Data Buoy Center (NDBC) distributes meteorological data from\nmoored buoys maintained by NDBC and others. Moored buoys are the weather\nsentinels of the sea. They are deployed in the coastal and offshore waters\nfrom the western Atlantic to the Pacific Ocean around Hawaii, and from the\nBering Sea to the South Pacific. NDBC's moored buoys measure and transmit\nbarometric pressure; wind direction, speed, and gust; air and sea\ntemperature; and wave energy spectra from which significant wave height,\ndominant wave period, and average wave period are derived. Even the\ndirection of wave propagation is measured on many moored buoys. See\nhttps://www.ndbc.noaa.gov/measdes.shtml for a description of the measurements.\n\nThe source data from NOAA NDBC has different column names, different units,\nand different missing values in different files, and other problems\n(notably, lots of rows with duplicate or different values for the same time\npoint). This dataset is a standardized, reformatted, and lightly edited\nversion of that source data, created by NOAA NMFS SWFSC ERD (email:\nerd.data at noaa.gov). Before 2020-01-29, this dataset only had the data\nthat was closest to a given hour, rounded to the nearest hour. Now, this\ndataset has all of the data available from NDBC with the original time\nvalues. If there are multiple source rows for a given buoy for a given\ntime, only the row with the most non-NaN data values is kept. If there is\na gap in the data, a row of missing values is inserted (which causes a nice\ngap when the data is graphed). Also, some impossible data values are\nremoved, but this data is not perfectly clean. This dataset is now updated\nevery 5 minutes.\n\nThis dataset has both historical data (quality controlled, before\n2020-06-01T00:00:00Z) and near real time data (less quality controlled,\nwhich may change at any time, from 2020-06-01T00:00:00Z on).\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstation (Station Identifier)\n... (19 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/cwwcNDBCMet_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/cwwcNDBCMet_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/cwwcNDBCMet/index.json", "https://www.ndbc.noaa.gov/", "http://upwell.pfeg.noaa.gov/erddap/rss/cwwcNDBCMet.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=cwwcNDBCMet&showErrors=false&email=", "NOAA NDBC, NOAA NMFS SWFSC ERD", "cwwcNDBCMet"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/wocecpr.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/wocecpr", "https://upwell.pfeg.noaa.gov/erddap/tabledap/wocecpr.graph", "", "", "public", "NEFSC Continuous Plankton Recorder", "A summary for the data\n\ncdm_data_type = Other\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\ncruise\nsample\nlatitude (degrees_north)\nlongitude (degrees_east)\nphyto_color_indx (Phytoplankton Color Index)\nmarmap_tax_code (Marmap Taxonomic Code)\nmarmap_stage_code\nabundance (per 100 cubic meters)\nlife_stage\ntaxonomic_name\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/wocecpr_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/wocecpr_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/wocecpr/index.json", "https://coastwatch.pfeg.noaa.gov/erddap", "http://upwell.pfeg.noaa.gov/erddap/rss/wocecpr.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=wocecpr&showErrors=false&email=", "NEFSC", "wocecpr"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdNewportCtd.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdNewportCtd", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdNewportCtd.graph", "", "", "public", "Newport Lab CTD Casts, 1997-2008", "The Newport Hydrographic (NH) Line along 44.65\u00b0N off central Oregon was sampled seasonally during two epochs: 1961-1971 through the TENOC program and 1997-2003 through the GLOBEC Northeast Pacific Long Term Observations Program (LTOP); some observations are available for 2004 and 2005. During TENOC, the line extended 305 km offshore to 128\u00b0W, with stations 18 km apart over the continental shelf and 36 km offshore. During LTOP, the line was shorter (to 126\u00b0W) with closer station spacing over the continental shelf (9 km apart) and slope (18 km apart). LTOP cruises included biochemical sampling and underway current measurements.\n\ncdm_data_type = TimeSeriesProfile\nVARIABLES:\nline\ntransect\nstation\nplain_station\nproject\nlongitude (degrees_east)\nlatitude (degrees_north)\nstation_code (CTD Station Code)\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (m)\ndensity (sigma)\nfluorescence (volts)\nsalinity (Sea Water Practical Salinity, PSU)\ntemperature (degree_C)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdNewportCtd_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdNewportCtd_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdNewportCtd/index.json", "http://linkinghub.elsevier.com/retrieve/pii/S0079661107001474", "http://upwell.pfeg.noaa.gov/erddap/rss/erdNewportCtd.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdNewportCtd&showErrors=false&email=", "NWFSC", "erdNewportCtd"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ncepNinoSSTwk", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ncepNinoSSTwk.graph", "", "", "public", "Nino Region Weekly SST OISST.v2", "Weekly OISST.v2 (1981-2010 base period) Ni\u00f1o 1+2 (0-10\u00b0South)(90\u00b0West-80\u00b0West) Ni\u00f1o 3 (5\u00b0North-5\u00b0South)(150\u00b0West-90\u00b0West) Ni\u00f1o 4 (5\u00b0North-5\u00b0South) (160\u00b0East-150\u00b0West) Ni\u00f1o 3.4 (5\u00b0North-5\u00b0South)(170-120\u00b0West)\n\ncdm_data_type = Other\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\nNino1_2_sst (degrees C)\nNino1_2_ssta (Nino1+2 SST Anomaly, degrees C)\nNino3_sst (degrees C)\nNino3_ssta (Nino3 SST Anomaly, degrees C)\nNino34_sst (Nino3.4 SST, degrees C)\nNino34_ssta (Nino3.4 SST Anomaly, degrees C)\nNino4_sst (degrees C)\nNino4_ssta (Nino4 SST Anomaly, degrees C)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/ncepNinoSSTwk/index.json", "https://www.cpc.ncep.noaa.gov/data/indices/", "http://upwell.pfeg.noaa.gov/erddap/rss/ncepNinoSSTwk.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=ncepNinoSSTwk&showErrors=false&email=", "NCEP", "ncepNinoSSTwk"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosSosATemp.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosSosATemp", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosSosATemp.graph", "", "", "public", "NOAA NOS SOS, EXPERIMENTAL, 1853-present, Air Temperature", "The NOAA NOS SOS server is part of the IOOS DIF SOS Project.  The stations in this dataset have air temperature data.  ****These services are for testing and evaluation use only****\n\nBecause of the nature of SOS requests, requests for data MUST include constraints for the longitude, latitude, time, and/or station_id variables.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nlongitude (degrees_east)\nlatitude (degrees_north)\nstation_id\naltitude (m)\ntime (seconds since 1970-01-01T00:00:00Z)\nsensor_id\nair_temperature (degree_C)\nquality_flags\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosSosATemp_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosSosATemp_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosSosATemp/index.json", "https://opendap.co-ops.nos.noaa.gov/ioos-dif-sos/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosSosATemp.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosSosATemp&showErrors=false&email=", "NOAA NOS", "nosSosATemp"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosSosBPres.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosSosBPres", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosSosBPres.graph", "", "", "public", "NOAA NOS SOS, EXPERIMENTAL, 1853-present, Barometric Pressure", "The NOAA NOS SOS server is part of the IOOS DIF SOS Project.  The stations in this dataset have barometric pressure data.  ****These services are for testing and evaluation use only****\n\nBecause of the nature of SOS requests, requests for data MUST include constraints for the longitude, latitude, time, and/or station_id variables.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nlongitude (degrees_east)\nlatitude (degrees_north)\nstation_id\naltitude (m)\ntime (seconds since 1970-01-01T00:00:00Z)\nsensor_id\nair_pressure (Barometric Pressure, millibars)\nquality_flags\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosSosBPres_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosSosBPres_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosSosBPres/index.json", "https://opendap.co-ops.nos.noaa.gov/ioos-dif-sos/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosSosBPres.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosSosBPres&showErrors=false&email=", "NOAA NOS", "nosSosBPres"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosSosWLevel.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosSosWLevel", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosSosWLevel.graph", "", "", "public", "NOAA NOS SOS, EXPERIMENTAL, 1853-present, Water Level", "The NOAA NOS SOS server is part of the IOOS DIF SOS Project.  The stations in this dataset have water surface height above a reference datum.  ****These services are for testing and evaluation use only****\n\nBecause of the nature of SOS requests, requests for data MUST include constraints for the longitude, latitude, time, and/or station_id variables.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nlongitude (degrees_east)\nlatitude (degrees_north)\nstation_id\naltitude (m)\ntime (seconds since 1970-01-01T00:00:00Z)\nsensor_id\nwater_level (water_surface_height_above_reference_datum, m)\ndatum_id\nvertical_position (m)\nsigma\nquality_flags\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosSosWLevel_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosSosWLevel_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosSosWLevel/index.json", "https://opendap.co-ops.nos.noaa.gov/ioos-dif-sos/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosSosWLevel.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosSosWLevel&showErrors=false&email=", "NOAA NOS", "nosSosWLevel"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosSosWTemp.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosSosWTemp", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosSosWTemp.graph", "", "", "public", "NOAA NOS SOS, EXPERIMENTAL, 1853-present, Water Temperature", "The NOAA NOS SOS server is part of the IOOS DIF SOS Project.  The stations in this dataset have water temperature data.  ****These services are for testing and evaluation use only****\n\nBecause of the nature of SOS requests, requests for data MUST include constraints for the longitude, latitude, time, and/or station_id variables.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nlongitude (degrees_east)\nlatitude (degrees_north)\nstation_id\naltitude (m)\ntime (seconds since 1970-01-01T00:00:00Z)\nsensor_id\nsea_water_temperature (degree_C)\nquality_flags\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosSosWTemp_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosSosWTemp_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosSosWTemp/index.json", "https://opendap.co-ops.nos.noaa.gov/ioos-dif-sos/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosSosWTemp.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosSosWTemp&showErrors=false&email=", "NOAA NOS", "nosSosWTemp"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosSosCond.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosSosCond", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosSosCond.graph", "", "", "public", "NOAA NOS SOS, EXPERIMENTAL, 1902-present, Conductivity", "The NOAA NOS SOS server is part of the IOOS DIF SOS Project.  The stations in this dataset have conductivity data.  ****These services are for testing and evaluation use only****\n\nBecause of the nature of SOS requests, requests for data MUST include constraints for the longitude, latitude, time, and/or station_id variables.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nlongitude (degrees_east)\nlatitude (degrees_north)\nstation_id\naltitude (m)\ntime (seconds since 1970-01-01T00:00:00Z)\nsensor_id\nconductivity (Electrical Conductivity, mS cm-1)\nquality_flags\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosSosCond_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosSosCond_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosSosCond/index.json", "https://opendap.co-ops.nos.noaa.gov/ioos-dif-sos/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosSosCond.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosSosCond&showErrors=false&email=", "NOAA NOS", "nosSosCond"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosSosSalinity.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosSosSalinity", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosSosSalinity.graph", "", "", "public", "NOAA NOS SOS, EXPERIMENTAL, 1902-present, Salinity", "The NOAA NOS SOS server is part of the IOOS DIF SOS Project.  The stations in this dataset have salinity data.  ****These services are for testing and evaluation use only****\n\nBecause of the nature of SOS requests, requests for data MUST include constraints for the longitude, latitude, time, and/or station_id variables.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nlongitude (degrees_east)\nlatitude (degrees_north)\nstation_id\naltitude (m)\ntime (seconds since 1970-01-01T00:00:00Z)\nsensor_id\nsea_water_salinity (Sea Water Practical Salinity, PSU)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosSosSalinity_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosSosSalinity_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosSosSalinity/index.json", "https://opendap.co-ops.nos.noaa.gov/ioos-dif-sos/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosSosSalinity.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosSosSalinity&showErrors=false&email=", "NOAA NOS", "nosSosSalinity"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEDnrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEDnrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEDnrt.graph", "", "", "public", "NOAA Ship Bell M. Shimada Underway Meteorological Data, Near Real Time", "NOAA Ship Bell M. Shimada Underway Meteorological Data (Near Real Time, updated daily) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (19 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTEDnrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTEDnrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTEDnrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTEDnrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTEDnrt&showErrors=false&email=", "FSU", "fsuNoaaShipWTEDnrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTED.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTED", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTED.graph", "", "", "public", "NOAA Ship Bell M. Shimada Underway Meteorological Data, Quality Controlled", "NOAA Ship Bell M. Shimada Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (19 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTED_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTED_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTED/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTED.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTED&showErrors=false&email=", "FSU", "fsuNoaaShipWTED"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDK.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDK", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDK.graph", "", "", "public", "NOAA Ship David Starr Jordan Underway Meteorological Data, Quality Controlled", "NOAA Ship David Starr Jordan Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTDK_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTDK_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTDK/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTDK.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTDK&showErrors=false&email=", "FSU", "fsuNoaaShipWTDK"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipKNBD.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipKNBD", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipKNBD.graph", "", "", "public", "NOAA Ship Delaware II Underway Meteorological Data, Quality Controlled", "NOAA Ship Delaware II Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipKNBD_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipKNBD_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipKNBD/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipKNBD.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipKNBD&showErrors=false&email=", "FSU", "fsuNoaaShipKNBD"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEBnrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEBnrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEBnrt.graph", "", "", "public", "NOAA Ship Fairweather Underway Meteorological Data, Near Real Time", "NOAA Ship Fairweather Underway Meteorological Data (Near Real Time, updated daily) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTEBnrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTEBnrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTEBnrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTEBnrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTEBnrt&showErrors=false&email=", "FSU", "fsuNoaaShipWTEBnrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEB.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEB", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEB.graph", "", "", "public", "NOAA Ship Fairweather Underway Meteorological Data, Quality Controlled", "NOAA Ship Fairweather Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTEB_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTEB_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTEB/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTEB.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTEB&showErrors=false&email=", "FSU", "fsuNoaaShipWTEB"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEOnrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEOnrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEOnrt.graph", "", "", "public", "NOAA Ship Gordon Gunter Underway Meteorological Data, Near Real Time", "NOAA Ship Gordon Gunter Underway Meteorological Data (Near Real Time, updated daily) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTEOnrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTEOnrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTEOnrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTEOnrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTEOnrt&showErrors=false&email=", "FSU", "fsuNoaaShipWTEOnrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEO.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEO", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEO.graph", "", "", "public", "NOAA Ship Gordon Gunter Underway Meteorological Data, Quality Controlled", "NOAA Ship Gordon Gunter Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTEO_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTEO_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTEO/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTEO.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTEO&showErrors=false&email=", "FSU", "fsuNoaaShipWTEO"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDFnrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDFnrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDFnrt.graph", "", "", "public", "NOAA Ship Henry B. Bigelow Underway Meteorological Data, Near Real Time", "NOAA Ship Henry B. Bigelow Underway Meteorological Data (Near Real Time, updated daily) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTDFnrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTDFnrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTDFnrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTDFnrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTDFnrt&showErrors=false&email=", "FSU", "fsuNoaaShipWTDFnrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDF.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDF", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDF.graph", "", "", "public", "NOAA Ship Henry B. Bigelow Underway Meteorological Data, Quality Controlled", "NOAA Ship Henry B. Bigelow Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTDF_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTDF_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTDF/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTDF.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTDF&showErrors=false&email=", "FSU", "fsuNoaaShipWTDF"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEYnrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEYnrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEYnrt.graph", "", "", "public", "NOAA Ship Hi'ialakai Underway Meteorological Data, Near Real Time", "NOAA Ship Hi'ialakai Underway Meteorological Data (Near Real Time, updated daily) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTEYnrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTEYnrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTEYnrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTEYnrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTEYnrt&showErrors=false&email=", "FSU", "fsuNoaaShipWTEYnrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEY.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEY", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEY.graph", "", "", "public", "NOAA Ship Hi'ialakai Underway Meteorological Data, Quality Controlled", "NOAA Ship Hi'ialakai Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTEY_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTEY_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTEY/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTEY.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTEY&showErrors=false&email=", "FSU", "fsuNoaaShipWTEY"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEU.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEU", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEU.graph", "", "", "public", "NOAA Ship Ka'imimoana Underway Meteorological Data, Quality Controlled", "NOAA Ship Ka'imimoana Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (16 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTEU_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTEU_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTEU/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTEU.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTEU&showErrors=false&email=", "FSU", "fsuNoaaShipWTEU"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEJ.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEJ", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEJ.graph", "", "", "public", "NOAA Ship McArthurII Underway Meteorological Data, Quality Controlled", "NOAA Ship McArthur II Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTEJ_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTEJ_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTEJ/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTEJ.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTEJ&showErrors=false&email=", "FSU", "fsuNoaaShipWTEJ"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDM.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDM", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDM.graph", "", "", "public", "NOAA Ship Miller Freeman Underway Meteorological Data, Quality Controlled", "NOAA Ship Miller Freeman Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTDM_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTDM_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTDM/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTDM.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTDM&showErrors=false&email=", "FSU", "fsuNoaaShipWTDM"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTERnrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTERnrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTERnrt.graph", "", "", "public", "NOAA Ship Nancy Foster Underway Meteorological Data, Near Real Time", "NOAA Ship Nancy Foster Underway Meteorological Data (Near Real Time, updated daily) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (14 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTERnrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTERnrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTERnrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTERnrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTERnrt&showErrors=false&email=", "FSU", "fsuNoaaShipWTERnrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTER.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTER", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTER.graph", "", "", "public", "NOAA Ship Nancy Foster Underway Meteorological Data, Quality Controlled", "NOAA Ship Nancy Foster Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (14 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTER_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTER_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTER/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTER.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTER&showErrors=false&email=", "FSU", "fsuNoaaShipWTER"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDHnrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDHnrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDHnrt.graph", "", "", "public", "NOAA Ship Okeanos Explorer Underway Meteorological Data, Near Real Time", "NOAA Ship Okeanos Explorer Underway Meteorological Data (Near Real Time, updated daily) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTDHnrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTDHnrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTDHnrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTDHnrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTDHnrt&showErrors=false&email=", "FSU", "fsuNoaaShipWTDHnrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDH.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDH", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDH.graph", "", "", "public", "NOAA Ship Okeanos Explorer Underway Meteorological Data, Quality Controlled", "NOAA Ship Okeanos Explorer Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTDH_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTDH_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTDH/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTDH.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTDH&showErrors=false&email=", "FSU", "fsuNoaaShipWTDH"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDOnrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDOnrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDOnrt.graph", "", "", "public", "NOAA Ship Oregon II Underway Meteorological Data, Near Real Time", "NOAA Ship Oregon II Underway Meteorological Data (Near Real Time, updated daily) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTDOnrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTDOnrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTDOnrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTDOnrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTDOnrt&showErrors=false&email=", "FSU", "fsuNoaaShipWTDOnrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDO.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDO", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDO.graph", "", "", "public", "NOAA Ship Oregon II Underway Meteorological Data, Quality Controlled", "NOAA Ship Oregon II Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTDO_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTDO_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTDO/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTDO.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTDO&showErrors=false&email=", "FSU", "fsuNoaaShipWTDO"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEPnrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEPnrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEPnrt.graph", "", "", "public", "NOAA Ship Oscar Dyson Underway Meteorological Data, Near Real Time", "NOAA Ship Oscar Dyson Underway Meteorological Data (Near Real Time, updated daily) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.\n'=~' indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data.\nThe '.'s say to match any character.\nThe '*' says to match the previous character 0 or more times.\n(Don't include backslashes in your query.)\nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\n... (14 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTEPnrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTEPnrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTEPnrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTEPnrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTEPnrt&showErrors=false&email=", "FSU", "fsuNoaaShipWTEPnrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEP.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEP", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEP.graph", "", "", "public", "NOAA Ship Oscar Dyson Underway Meteorological Data, Quality Controlled", "NOAA Ship Oscar Dyson Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.\n'=~' indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data.\nThe '.'s say to match any character.\nThe '*' says to match the previous character 0 or more times.\n(Don't include backslashes in your query.)\nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\n... (14 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTEP_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTEP_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTEP/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTEP.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTEP&showErrors=false&email=", "FSU", "fsuNoaaShipWTEP"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEEnrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEEnrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEEnrt.graph", "", "", "public", "NOAA Ship Oscar Elton Sette Underway Meteorological Data, Near Real Time", "NOAA Ship Oscar Elton Sette Underway Meteorological Data (Near Real Time, updated daily) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTEEnrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTEEnrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTEEnrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTEEnrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTEEnrt&showErrors=false&email=", "FSU", "fsuNoaaShipWTEEnrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEE.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEE", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEE.graph", "", "", "public", "NOAA Ship Oscar Elton Sette Underway Meteorological Data, Quality Controlled", "NOAA Ship Oscar Elton Sette Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTEE_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTEE_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTEE/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTEE.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTEE&showErrors=false&email=", "FSU", "fsuNoaaShipWTEE"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDLnrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDLnrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDLnrt.graph", "", "", "public", "NOAA Ship Pisces Underway Meteorological Data, Near Real Time", "NOAA Ship Pisces Underway Meteorological Data (Near Real Time, updated daily) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTDLnrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTDLnrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTDLnrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTDLnrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTDLnrt&showErrors=false&email=", "FSU", "fsuNoaaShipWTDLnrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDL.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDL", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTDL.graph", "", "", "public", "NOAA Ship Pisces Underway Meteorological Data, Quality Controlled", "NOAA Ship Pisces Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTDL_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTDL_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTDL/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTDL.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTDL&showErrors=false&email=", "FSU", "fsuNoaaShipWTDL"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEFnrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEFnrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEFnrt.graph", "", "", "public", "NOAA Ship Rainier Underway Meteorological Data, Near Real Time", "NOAA Ship Rainier Underway Meteorological Data (Near Real Time, updated daily) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTEFnrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTEFnrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTEFnrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTEFnrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTEFnrt&showErrors=false&email=", "FSU", "fsuNoaaShipWTEFnrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEF.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEF", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEF.graph", "", "", "public", "NOAA Ship Rainier Underway Meteorological Data, Quality Controlled", "NOAA Ship Rainier Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTEF_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTEF_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTEF/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTEF.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTEF&showErrors=false&email=", "FSU", "fsuNoaaShipWTEF"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTECnrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTECnrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTECnrt.graph", "", "", "public", "NOAA Ship Ronald Brown Underway Meteorological Data, Near Real Time", "NOAA Ship Ronald Brown Underway Meteorological Data (Near Real Time, updated daily) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (14 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTECnrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTECnrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTECnrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTECnrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTECnrt&showErrors=false&email=", "FSU", "fsuNoaaShipWTECnrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEC.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEC", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuNoaaShipWTEC.graph", "", "", "public", "NOAA Ship Ronald Brown Underway Meteorological Data, Quality Controlled", "NOAA Ship Ronald Brown Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n  flag=~\"ZZZ........Z.*\"\nin your query.  \n\"=~\" indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data. \nThe '.'s say to match any character.  \nThe '*' says to match the previous character 0 or more times.  \nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nairPressure (Atmospheric Pressure, millibar)\n... (14 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuNoaaShipWTEC_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuNoaaShipWTEC_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuNoaaShipWTEC/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuNoaaShipWTEC.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuNoaaShipWTEC&showErrors=false&email=", "FSU", "fsuNoaaShipWTEC"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdNph.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdNph", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdNph.graph", "", "", "public", "North Pacific High, 1967 - present", "Variations in large-scale atmospheric forcing influence upwelling dynamics and ecosystem productivity in the California Current System (CCS). In this paper, we characterize interannual variability of the North Pacific High over 40 years and investigate how variation in its amplitude and position affect upwelling and biology. We develop a winter upwelling \"pre-conditioning\" index and demonstrate its utility to understanding biological processes. Variation in the winter NPH can be well described by its areal extent and maximum pressure, which in turn is predictive of winter upwelling. Our winter pre-conditioning index explained 64% of the variation in biological responses (fish and seabirds). Understanding characteristics of the NPH in winter is therefore critical to predicting biological responses in the CCS.\n\ncdm_data_type = Point\nVARIABLES:\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\nyear\nmonth (Month (1 - 12))\nlongitude (Longitude of the Center of the NPH, degrees_east)\nlatitude (Latitude of the Center of the NPH, degrees_north)\narea (Areal Extent of the 1020 hPa Contour, km2)\nmaxSLP (Maximum Sea Level Pressure, hPa)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdNph_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdNph_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdNph/index.json", "https://onlinelibrary.wiley.com/doi/10.1002/grl.50100/abstract", "http://upwell.pfeg.noaa.gov/erddap/rss/erdNph.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdNph&showErrors=false&email=", "NOAA ERD", "erdNph"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdPcui", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdPcui.graph", "", "", "public", "North Pacific High, Pre-conditioning Cumulative Upwelling Index, 1967 - present", "Variations in large-scale atmospheric forcing influence upwelling dynamics and ecosystem productivity in the California Current System (CCS). In this paper, we characterize interannual variability of the North Pacific High over 40 years and investigate how variation in its amplitude and position affect upwelling and biology. We develop a winter upwelling \"pre-conditioning\" index and demonstrate its utility to understanding biological processes. Variation in the winter NPH can be well described by its areal extent and maximum pressure, which in turn is predictive of winter upwelling. Our winter pre-conditioning index explained 64% of the variation in biological responses (fish and seabirds). Understanding characteristics of the NPH in winter is therefore critical to predicting biological responses in the CCS.\n\ncdm_data_type = Other\nVARIABLES:\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\npcui33N (PCUI at 33N, m^3 s^-1 100m^-1)\npcui36N (PCUI at 36N, m^3 s^-1 100m^-1)\npcui39N (PCUI at 39N, m^3 s^-1 100m^-1)\npcui42N (PCUI at 42N, m^3 s^-1 100m^-1)\npcui45N (PCUI at 45N, m^3 s^-1 100m^-1)\npcui48N (PCUI at 48N, m^3 s^-1 100m^-1)\n", "", "", "https://upwell.pfeg.noaa.gov/erddap/info/erdPcui/index.json", "https://onlinelibrary.wiley.com/doi/10.1002/grl.50100/abstract", "http://upwell.pfeg.noaa.gov/erddap/rss/erdPcui.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdPcui&showErrors=false&email=", "NOAA ERD", "erdPcui"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsCA.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsCA", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsCA.graph", "", "", "public", "NOS CO-OPS Active Currents Data, 6-Minute", "This dataset has surface Active Currents data from NOAA NOS Center for\nOperational Oceanographic Products and Services (CO-OPS).\n\nWARNING: These raw data have not been subjected to the National Ocean Services\n(NOS) Quality Control procedures, and do not necessarily meet the criteria and\nstandards of official NOS data. They are released for limited public use with\nappropriate caution.\n\nWARNING:\n* Queries for data MUST include stationID= and time>=.\n* Queries USUALLY include time<= (the default end time corresponds to 'now').\n* Queries MUST be for less than 30 days worth of data.\n* The data source isn't completely reliable. If your request returns no data\n  when you think it should:\n  * Try revising the request (e.g., a different time range).\n  * The list of stations offering this data may be incorrect.\n  * Sometimes a station or the entire data service is unavailable.\n    Wait a while and try again.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstationID (Station ID)\nstationName (Station Name)\ndateEstablished (Date Established, seconds since 1970-01-01T00:00:00Z)\nlongitude (degrees_east)\nlatitude (degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\nCS (Current Speed, knots)\nCD (Current Direction, degrees_true)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosCoopsCA_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosCoopsCA_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosCoopsCA/index.json", "http://tidesandcurrents.noaa.gov/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosCoopsCA.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosCoopsCA&showErrors=false&email=", "NOAA NOS CO-OPS", "nosCoopsCA"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMAT.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMAT", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMAT.graph", "", "", "public", "NOS CO-OPS Meteorological Data, Air Temperature, 6-Minute", "This dataset has Air Temperature data from NOAA NOS Center for Operational\nOceanographic Products and Services (CO-OPS).\n\nWARNING: These preliminary data have not been subjected to the National Ocean\nServices (NOS) Quality Control procedures, and do not necessarily meet the\ncriteria and standards of official NOS data. They are released for limited\npublic use with appropriate caution.\n\nWARNING:\n* Queries for data MUST include stationID= and time>=.\n* Queries USUALLY include time<= (the default end time corresponds to 'now').\n* Queries MUST be for less than 30 days worth of data.\n* The data source isn't completely reliable. If your request returns no data\n  when you think it should:\n  * Try revising the request (e.g., a different time range).\n  * The list of stations offering this data may be incorrect.\n  * Sometimes a station or the entire data service is unavailable.\n    Wait a while and try again.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstationID (Station ID)\nstationName (Station Name)\nstate\ndateEstablished (Date Established, seconds since 1970-01-01T00:00:00Z)\nshefID (SHEF ID)\ndeployment (Deployment Designation)\nlongitude (degrees_east)\nlatitude (degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\ndcp (Data Collection Platform)\n... (5 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosCoopsMAT_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosCoopsMAT_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosCoopsMAT/index.json", "http://tidesandcurrents.noaa.gov/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosCoopsMAT.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosCoopsMAT&showErrors=false&email=", "NOAA NOS CO-OPS", "nosCoopsMAT"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMBP.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMBP", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMBP.graph", "", "", "public", "NOS CO-OPS Meteorological Data, Barometric Pressure, 6-Minute", "This dataset has Barometric Pressure data from NOAA NOS Center for Operational\nOceanographic Products and Services (CO-OPS).\n\nWARNING: These preliminary data have not been subjected to the National Ocean\nServices (NOS) Quality Control procedures, and do not necessarily meet the\ncriteria and standards of official NOS data. They are released for limited\npublic use with appropriate caution.\n\nWARNING:\n* Queries for data MUST include stationID= and time>=.\n* Queries USUALLY include time<= (the default end time corresponds to 'now').\n* Queries MUST be for less than 30 days worth of data.\n* The data source isn't completely reliable. If your request returns no data\n  when you think it should:\n  * Try revising the request (e.g., a different time range).\n  * The list of stations offering this data may be incorrect.\n  * Sometimes a station or the entire data service is unavailable.\n    Wait a while and try again.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstationID (Station ID)\nstationName (Station Name)\nstate\ndateEstablished (Date Established, seconds since 1970-01-01T00:00:00Z)\nshefID (SHEF ID)\ndeployment (Deployment Designation)\nlongitude (degrees_east)\nlatitude (degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\ndcp (Data Collection Platform)\n... (5 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosCoopsMBP_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosCoopsMBP_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosCoopsMBP/index.json", "http://tidesandcurrents.noaa.gov/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosCoopsMBP.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosCoopsMBP&showErrors=false&email=", "NOAA NOS CO-OPS", "nosCoopsMBP"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMC.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMC", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMC.graph", "", "", "public", "NOS CO-OPS Meteorological Data, Conductivity, 6-Minute", "This dataset has Conductivity data from NOAA NOS Center for Operational\nOceanographic Products and Services (CO-OPS).\n\nWARNING: These preliminary data have not been subjected to the National Ocean\nServices (NOS) Quality Control procedures, and do not necessarily meet the\ncriteria and standards of official NOS data. They are released for limited\npublic use with appropriate caution.\n\nWARNING:\n* Queries for data MUST include stationID= and time>=.\n* Queries USUALLY include time<= (the default end time corresponds to 'now').\n* Queries MUST be for less than 30 days worth of data.\n* The data source isn't completely reliable. If your request returns no data\n  when you think it should:\n  * Try revising the request (e.g., a different time range).\n  * The list of stations offering this data may be incorrect.\n  * Sometimes a station or the entire data service is unavailable.\n    Wait a while and try again.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstationID (Station ID)\nstationName (Station Name)\nstate\ndateEstablished (Date Established, seconds since 1970-01-01T00:00:00Z)\nshefID (SHEF ID)\ndeployment (Deployment Designation)\nlongitude (degrees_east)\nlatitude (degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\ndcp (Data Collection Platform)\n... (5 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosCoopsMC_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosCoopsMC_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosCoopsMC/index.json", "http://tidesandcurrents.noaa.gov/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosCoopsMC.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosCoopsMC&showErrors=false&email=", "NOAA NOS CO-OPS", "nosCoopsMC"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMRF.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMRF", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMRF.graph", "", "", "public", "NOS CO-OPS Meteorological Data, Rain Fall, 6-Minute", "This dataset has Rain Fall data from NOAA NOS Center for Operational\nOceanographic Products and Services (CO-OPS).\n\nWARNING: These preliminary data have not been subjected to the National Ocean\nServices (NOS) Quality Control procedures, and do not necessarily meet the\ncriteria and standards of official NOS data. They are released for limited\npublic use with appropriate caution.\n\nWARNING:\n* Queries for data MUST include stationID= and time>=.\n* Queries USUALLY include time<= (the default end time corresponds to 'now').\n* Queries MUST be for less than 30 days worth of data.\n* The data source isn't completely reliable. If your request returns no data\n  when you think it should:\n  * Try revising the request (e.g., a different time range).\n  * The list of stations offering this data may be incorrect.\n  * Sometimes a station or the entire data service is unavailable.\n    Wait a while and try again.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstationID (Station ID)\nstationName (Station Name)\nstate\ndateEstablished (Date Established, seconds since 1970-01-01T00:00:00Z)\nshefID (SHEF ID)\ndeployment (Deployment Designation)\nlongitude (degrees_east)\nlatitude (degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\ndcp (Data Collection Platform)\n... (4 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosCoopsMRF_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosCoopsMRF_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosCoopsMRF/index.json", "http://tidesandcurrents.noaa.gov/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosCoopsMRF.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosCoopsMRF&showErrors=false&email=", "NOAA NOS CO-OPS", "nosCoopsMRF"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMRH.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMRH", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMRH.graph", "", "", "public", "NOS CO-OPS Meteorological Data, Relative Humidity, 6-Minute", "This dataset has Relative Humidity data from NOAA NOS Center for Operational\nOceanographic Products and Services (CO-OPS).\n\nWARNING: These preliminary data have not been subjected to the National Ocean\nServices (NOS) Quality Control procedures, and do not necessarily meet the\ncriteria and standards of official NOS data. They are released for limited\npublic use with appropriate caution.\n\nWARNING:\n* Queries for data MUST include stationID= and time>=.\n* Queries USUALLY include time<= (the default end time corresponds to 'now').\n* Queries MUST be for less than 30 days worth of data.\n* The data source isn't completely reliable. If your request returns no data\n  when you think it should:\n  * Try revising the request (e.g., a different time range).\n  * The list of stations offering this data may be incorrect.\n  * Sometimes a station or the entire data service is unavailable.\n    Wait a while and try again.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstationID (Station ID)\nstationName (Station Name)\nstate\ndateEstablished (Date Established, seconds since 1970-01-01T00:00:00Z)\nshefID (SHEF ID)\ndeployment (Deployment Designation)\nlongitude (degrees_east)\nlatitude (degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\ndcp (Data Collection Platform)\n... (5 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosCoopsMRH_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosCoopsMRH_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosCoopsMRH/index.json", "http://tidesandcurrents.noaa.gov/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosCoopsMRH.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosCoopsMRH&showErrors=false&email=", "NOAA NOS CO-OPS", "nosCoopsMRH"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMV.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMV", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMV.graph", "", "", "public", "NOS CO-OPS Meteorological Data, Visibility, 6-Minute", "This dataset has Visibility data from NOAA NOS Center for Operational\nOceanographic Products and Services (CO-OPS).\n\nWARNING: These preliminary data have not been subjected to the National Ocean\nServices (NOS) Quality Control procedures, and do not necessarily meet the\ncriteria and standards of official NOS data. They are released for limited\npublic use with appropriate caution.\n\nWARNING:\n* Queries for data MUST include stationID= and time>=.\n* Queries USUALLY include time<= (the default end time corresponds to 'now').\n* Queries MUST be for less than 30 days worth of data.\n* The data source isn't completely reliable. If your request returns no data\n  when you think it should:\n  * Try revising the request (e.g., a different time range).\n  * The list of stations offering this data may be incorrect.\n  * Sometimes a station or the entire data service is unavailable.\n    Wait a while and try again.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstationID (Station ID)\nstationName (Station Name)\nstate\ndateEstablished (Date Established, seconds since 1970-01-01T00:00:00Z)\nshefID (SHEF ID)\ndeployment (Deployment Designation)\nlongitude (degrees_east)\nlatitude (degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\nVis (Visibility in Air, nautical_miles)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosCoopsMV_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosCoopsMV_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosCoopsMV/index.json", "http://tidesandcurrents.noaa.gov/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosCoopsMV.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosCoopsMV&showErrors=false&email=", "NOAA NOS CO-OPS", "nosCoopsMV"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMWT.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMWT", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMWT.graph", "", "", "public", "NOS CO-OPS Meteorological Data, Water Temperature, 6-Minute", "This dataset has Water Temperature data from NOAA NOS Center for Operational\nOceanographic Products and Services (CO-OPS).\n\nWARNING: These preliminary data have not been subjected to the National Ocean\nServices (NOS) Quality Control procedures, and do not necessarily meet the\ncriteria and standards of official NOS data. They are released for limited\npublic use with appropriate caution.\n\nWARNING:\n* Queries for data MUST include stationID= and time>=.\n* Queries USUALLY include time<= (the default end time corresponds to 'now').\n* Queries MUST be for less than 30 days worth of data.\n* The data source isn't completely reliable. If your request returns no data\n  when you think it should:\n  * Try revising the request (e.g., a different time range).\n  * The list of stations offering this data may be incorrect.\n  * Sometimes a station or the entire data service is unavailable.\n    Wait a while and try again.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstationID (Station ID)\nstationName (Station Name)\nstate\ndateEstablished (Date Established, seconds since 1970-01-01T00:00:00Z)\nshefID (SHEF ID)\ndeployment (Deployment Designation)\nlongitude (degrees_east)\nlatitude (degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\ndcp (Data Collection Platform)\n... (5 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosCoopsMWT_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosCoopsMWT_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosCoopsMWT/index.json", "http://tidesandcurrents.noaa.gov/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosCoopsMWT.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosCoopsMWT&showErrors=false&email=", "NOAA NOS CO-OPS", "nosCoopsMWT"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMW.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMW", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsMW.graph", "", "", "public", "NOS CO-OPS Meteorological Data, Wind, 6-Minute", "This dataset has Wind data from NOAA NOS Center for Operational Oceanographic\nProducts and Services (CO-OPS).\n\nWARNING: These preliminary data have not been subjected to the National Ocean\nServices (NOS) Quality Control procedures, and do not necessarily meet the\ncriteria and standards of official NOS data. They are released for limited\npublic use with appropriate caution.\n\nWARNING:\n* Queries for data MUST include stationID= and time>=.\n* Queries USUALLY include time<= (the default end time corresponds to 'now').\n* Queries MUST be for less than 30 days worth of data.\n* The data source isn't completely reliable. If your request returns no data\n  when you think it should:\n  * Try revising the request (e.g., a different time range).\n  * The list of stations offering this data may be incorrect.\n  * Sometimes a station or the entire data service is unavailable.\n    Wait a while and try again.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstationID (Station ID)\nstationName (Station Name)\nstate\ndateEstablished (Date Established, seconds since 1970-01-01T00:00:00Z)\nshefID (SHEF ID)\ndeployment (Deployment Designation)\nlongitude (degrees_east)\nlatitude (degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\ndcp (Data Collection Platform)\n... (6 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosCoopsMW_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosCoopsMW_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosCoopsMW/index.json", "http://tidesandcurrents.noaa.gov/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosCoopsMW.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosCoopsMW&showErrors=false&email=", "NOAA NOS CO-OPS", "nosCoopsMW"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLTPHL.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLTPHL", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLTPHL.graph", "", "", "public", "NOS CO-OPS Water Level Data, High Low Tide Prediction", "This dataset has High Low Tide Predictions from NOAA NOS Center for Operational\nOceanographic Products and Services (CO-OPS).\n\nThe official Tide and Tidal Current prediction tables are published annually on\nOctober 1, for the following calendar year. Tide and Tidal Current predictions\ngenerated prior to the publishing date of the official tables are subject to\nchange. The enclosed data are based upon the latest information available as of\nthe date of your request. Tide and Tidal Current predictions generated may\ndiffer from the official predictions if information for the station requested\nhas been updated since the publishing date of the official tables.\n\nWARNING:\n* Queries for data MUST include stationID=, time>= and time<=.\n  Queries MUST be for less than 30 days worth of data.\n* This dataset only returns data for the MLLW (Mean Lower-Low Water) datum.\n* The data source isn't completely reliable. If your request returns no data\n  when you think it should:\n  * Try revising the request (e.g., a different time range).\n  * The list of stations offering this data may be incorrect.\n  * Sometimes a station or the entire data service is unavailable.\n    Wait a while and try again.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstationID (Station ID)\nstationName (Station Name)\nstate\ndateEstablished (Date Established, seconds since 1970-01-01T00:00:00Z)\nshefID (SHEF ID)\ndeployment (Deployment Designation)\nlongitude (degrees_east)\n... (5 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosCoopsWLTPHL_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosCoopsWLTPHL_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosCoopsWLTPHL/index.json", "http://tidesandcurrents.noaa.gov/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosCoopsWLTPHL.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosCoopsWLTPHL&showErrors=false&email=", "NOAA NOS CO-OPS", "nosCoopsWLTPHL"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLR1.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLR1", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLR1.graph", "", "", "public", "NOS CO-OPS Water Level Data, Preliminary, 1-Minute", "This dataset has recent, preliminary (not quality-controlled), 1-minute, water level\n(tide) data from NOAA NOS Center for Operational Oceanographic Products and Services\n(CO-OPS).\n\nWARNING: These raw data have not been subjected to the National Ocean Service's\nquality control or quality assurance procedures and do not meet the criteria and\nstandards of official National Ocean Service data. They are released for limited\npublic use as preliminary data to be used only with appropriate caution.\n\nWARNING:\n* Queries for data MUST include stationID=, datum=, and time>=.\n* Queries for data USUALLY include time<=.\n* Queries MUST be for less than 30 days worth of data.\n  The default time<= value corresponds to 'now'.\n* Different stations support different datums.\n  Use ERDDAP's Subset web page to find out which datums a given station supports.\n* The data source isn't completely reliable. If your request returns no data\n  when you think it should:\n  * Make sure the station you specified supports the datum you specified.\n  * Try revising the request (e.g., a different datum or a different time range).\n  * The list of stations offering this data (or the list of datums) may be incorrect.\n  * Sometimes a station or the entire data service is unavailable.\n    Wait a while and try again.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstationID (Station ID)\nstationName (Station Name)\nstate\ndateEstablished (Date Established, seconds since 1970-01-01T00:00:00Z)\nshefID (SHEF ID)\n... (8 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosCoopsWLR1_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosCoopsWLR1_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosCoopsWLR1/index.json", "http://tidesandcurrents.noaa.gov/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosCoopsWLR1.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosCoopsWLR1&showErrors=false&email=", "NOAA NOS CO-OPS", "nosCoopsWLR1"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLR6.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLR6", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLR6.graph", "", "", "public", "NOS CO-OPS Water Level Data, Preliminary, 6-Minute", "This dataset has recent, preliminary (not quality-controlled), 6-minute, water level\n(tide) data from NOAA NOS Center for Operational Oceanographic Products and Services\n(CO-OPS).\n\nWARNING: These raw data have not been subjected to the National Ocean Service's\nquality control or quality assurance procedures and do not meet the criteria and\nstandards of official National Ocean Service data. They are released for limited\npublic use as preliminary data to be used only with appropriate caution.\n\nWARNING:\n* Queries for data MUST include stationID=, datum=, time>=.\n* Queries for data USUALLY include time<=.\n* Queries MUST be for less than 30 days worth of data.\n  The default time<= value corresponds to 'now'.\n* Different stations support different datums.\n  Use ERDDAP's Subset web page to find out which datums a given station supports.\n* The data source isn't completely reliable. If your request returns no data\n  when you think it should:\n  * Make sure the station you specified supports the datum you specified.\n  * Try revising the request (e.g., a different datum or a different time range).\n  * The list of stations offering this data (or the list of datums) may be incorrect.\n  * Sometimes a station or the entire data service is unavailable.\n    Wait a while and try again.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstationID (Station ID)\nstationName (Station Name)\nstate\ndateEstablished (Date Established, seconds since 1970-01-01T00:00:00Z)\nshefID (SHEF ID)\n... (13 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosCoopsWLR6_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosCoopsWLR6_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosCoopsWLR6/index.json", "http://tidesandcurrents.noaa.gov/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosCoopsWLR6.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosCoopsWLR6&showErrors=false&email=", "NOAA NOS CO-OPS", "nosCoopsWLR6"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLTP6.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLTP6", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLTP6.graph", "", "", "public", "NOS CO-OPS Water Level Data, Tide Prediction, 6-Minute", "This dataset has High Low Tide Predictions from NOAA NOS Center for Operational\nOceanographic Products and Services (CO-OPS).\n\nThe official Tide and Tidal Current prediction tables are published annually on\nOctober 1, for the following calendar year. Tide and Tidal Current predictions\ngenerated prior to the publishing date of the official tables are subject to\nchange. The enclosed data are based upon the latest information available as of\nthe date of your request. Tide and Tidal Current predictions generated may\ndiffer from the official predictions if information for the station requested\nhas been updated since the publishing date of the official tables.\n\nWARNING:\n* Queries for data MUST include stationID=, time>= and time<=.\n  Queries MUST be for less than 30 days worth of data.\n* This dataset only returns data for the MLLW (Mean Lower-Low Water) datum.\n* The data source isn't completely reliable. If your request returns no data\n  when you think it should:\n  * Try revising the request (e.g., a different time range).\n  * The list of stations offering this data may be incorrect.\n  * Sometimes a station or the entire data service is unavailable.\n    Wait a while and try again.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstationID (Station ID)\nstationName (Station Name)\nstate\ndateEstablished (Date Established, seconds since 1970-01-01T00:00:00Z)\nshefID (SHEF ID)\ndeployment (Deployment Designation)\nlongitude (degrees_east)\n... (4 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosCoopsWLTP6_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosCoopsWLTP6_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosCoopsWLTP6/index.json", "http://tidesandcurrents.noaa.gov/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosCoopsWLTP6.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosCoopsWLTP6&showErrors=false&email=", "NOAA NOS CO-OPS", "nosCoopsWLTP6"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLTP60.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLTP60", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLTP60.graph", "", "", "public", "NOS CO-OPS Water Level Data, Tide Prediction, 60-Minute", "This dataset has High Low Tide Predictions from NOAA NOS Center for Operational\nOceanographic Products and Services (CO-OPS).\n\nThe official Tide and Tidal Current prediction tables are published annually on\nOctober 1, for the following calendar year. Tide and Tidal Current predictions\ngenerated prior to the publishing date of the official tables are subject to\nchange. The enclosed data are based upon the latest information available as of\nthe date of your request. Tide and Tidal Current predictions generated may\ndiffer from the official predictions if information for the station requested\nhas been updated since the publishing date of the official tables.\n\nWARNING:\n* Queries for data MUST include stationID=, time>= and time<=.\n  Queries MUST be for less than 30 days worth of data.\n* This dataset only returns data for the MLLW (Mean Lower-Low Water) datum.\n* The data source isn't completely reliable. If your request returns no data\n  when you think it should:\n  * Try revising the request (e.g., a different time range).\n  * The list of stations offering this data may be incorrect.\n  * Sometimes a station or the entire data service is unavailable.\n    Wait a while and try again.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstationID (Station ID)\nstationName (Station Name)\nstate\ndateEstablished (Date Established, seconds since 1970-01-01T00:00:00Z)\nshefID (SHEF ID)\ndeployment (Deployment Designation)\nlongitude (degrees_east)\n... (4 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosCoopsWLTP60_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosCoopsWLTP60_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosCoopsWLTP60/index.json", "http://tidesandcurrents.noaa.gov/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosCoopsWLTP60.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosCoopsWLTP60&showErrors=false&email=", "NOAA NOS CO-OPS", "nosCoopsWLTP60"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLV6.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLV6", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLV6.graph", "", "", "public", "NOS CO-OPS Water Level Data, Verified, 6-Minute", "This dataset has verified (quality-controlled), 6-minute, water level (tide)\ndata from NOAA NOS Center for Operational Oceanographic Products and Services\n(CO-OPS).  This is a delayed dataset, not a near-real-time dataset.\n\nWARNING:\n* Queries for data MUST include stationID=, datum=, time>=, and time<=.\n* Queries MUST be for less than 30 days worth of data.\n* Different stations support different datums.\n  Use ERDDAP's Subset web page to find out which datums a given station supports.\n* The data source isn't completely reliable. If your request returns no data\n  when you think it should:\n  * Make sure the station you specified supports the datum you specified.\n  * Try revising the request (e.g., a different datum or a different time range).\n  * The list of stations offering this data (or the list of datums) may be incorrect.\n  * Sometimes a station or the entire data service is unavailable.\n    Wait a while and try again.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstationID (Station ID)\nstationName (Station Name)\nstate\ndateEstablished (Date Established, seconds since 1970-01-01T00:00:00Z)\nshefID (SHEF ID)\ndeployment (Deployment Designation)\nlongitude (degrees_east)\nlatitude (degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\ndatum\nwaterLevel (Water Level, m)\nsigma (Standard Deviation of Water Level, m)\n... (4 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosCoopsWLV6_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosCoopsWLV6_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosCoopsWLV6/index.json", "http://tidesandcurrents.noaa.gov/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosCoopsWLV6.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosCoopsWLV6&showErrors=false&email=", "NOAA NOS CO-OPS", "nosCoopsWLV6"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLVHL.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLVHL", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLVHL.graph", "", "", "public", "NOS CO-OPS Water Level Data, Verified, High Low", "This dataset has verified (quality-controlled), daily, high low water level\n(tide) data from NOAA NOS Center for Operational Oceanographic Products and\nServices (CO-OPS). This is a delayed dataset, not a near-real-time dataset.\n\nWARNING:\n* Queries for data MUST include stationID=, datum=, time>=, and time<=.\n* Queries MUST be for less than 30 days worth of data.\n* Different stations support different datums.\n  Use ERDDAP's Subset web page to find out which datums a given station supports.\n* The data source isn't completely reliable. If your request returns no data\n  when you think it should:\n  * Make sure the station you specified supports the datum you specified.\n  * Try revising the request (e.g., a different datum or a different time range).\n  * The list of stations offering this data (or the list of datums) may be incorrect.\n  * Sometimes a station or the entire data service is unavailable.\n    Wait a while and try again.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstationID (Station ID)\nstationName (Station Name)\nstate\ndateEstablished (Date Established, seconds since 1970-01-01T00:00:00Z)\nshefID (SHEF ID)\ndeployment (Deployment Designation)\nlongitude (degrees_east)\nlatitude (degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\ndatum\nwaterLevel (Water Level, m)\ntype (Designation of Water level Height)\nI (Inferred Flag)\nL (Limit Flag)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosCoopsWLVHL_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosCoopsWLVHL_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosCoopsWLVHL/index.json", "http://tidesandcurrents.noaa.gov/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosCoopsWLVHL.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosCoopsWLVHL&showErrors=false&email=", "NOAA NOS CO-OPS", "nosCoopsWLVHL"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLV60.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLV60", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nosCoopsWLV60.graph", "", "", "public", "NOS CO-OPS Water Level Data, Verified, Hourly", "This dataset has verified (quality-controlled), hourly, water level (tide) data\nfrom NOAA NOS Center for Operational Oceanographic Products and Services\n(CO-OPS).   This is a delayed dataset, not a near-real-time dataset.\n\nWARNING:\n* Queries for data MUST include stationID=, datum=, time>=, and time<=.\n* Queries MUST be for less than 30 days worth of data.\n* Different stations support different datums.\n  Use ERDDAP's Subset web page to find out which datums a given station supports.\n* The data source isn't completely reliable. If your request returns no data\n  when you think it should:\n  * Make sure the station you specified supports the datum you specified.\n  * Try revising the request (e.g., a different datum or a different time range).\n  * The list of stations offering this data (or the list of datums) may be incorrect.\n  * Sometimes a station or the entire data service is unavailable.\n    Wait a while and try again.\n\ncdm_data_type = TimeSeries\nVARIABLES:\nstationID (Station ID)\nstationName (Station Name)\nstate\ndateEstablished (Date Established, seconds since 1970-01-01T00:00:00Z)\nshefID (SHEF ID)\ndeployment (Deployment Designation)\nlongitude (degrees_east)\nlatitude (degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\ndatum\nwaterLevel (Water Level, m)\nsigma (Standard Deviation of Water Level, m)\nI (Inferred Flag)\nL (Limit Flag)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nosCoopsWLV60_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nosCoopsWLV60_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nosCoopsWLV60/index.json", "http://tidesandcurrents.noaa.gov/", "http://upwell.pfeg.noaa.gov/erddap/rss/nosCoopsWLV60.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nosCoopsWLV60&showErrors=false&email=", "NOAA NOS CO-OPS", "nosCoopsWLV60"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ntas_flux_62fc_9a20_1432.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ntas_flux_62fc_9a20_1432", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ntas_flux_62fc_9a20_1432.graph", "", "", "public", "OceanSITES NTAS surface mooring fluxes calculated with Coare 3.0 algorithm", "OceanSites time-series FLUX  data from NTAS station\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\nQB (sensible heat flux, W/m2)\nQH (latent heat flux, W/m2)\nQN (net heat flux, W/m2)\nQL (net longwave, W/m2)\nQS (net shortwave, W/m2)\nTAUDIR (wind stress direction, degree N)\nTAUMAG (wind stress magnitude, N/m^2)\nTSKIN (SST adjusted to skin, degree)\nWS_H (wind speed adjusted to 10m, m/s)\nQQ_H (specific humidity adjusted to 2m, g/kg)\nTA_H (air temperature adjusted to 2m, degree_C)\nTAUE (east wind stress, N/m^2)\nTAUN (north wind stress, N/m^2)\nSTABILITY (stability parameter, 1)\ndepth (depth coordinate of tskin, m)\nwmo_platform_code\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/ntas_flux_62fc_9a20_1432_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/ntas_flux_62fc_9a20_1432_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/ntas_flux_62fc_9a20_1432/index.json", "http://uop.whoi.edu/projects/stratus", "http://upwell.pfeg.noaa.gov/erddap/rss/ntas_flux_62fc_9a20_1432.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=ntas_flux_62fc_9a20_1432&showErrors=false&email=", "WHOI", "ntas_flux_62fc_9a20_1432"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ntas_met_8d73_1bc1_ec8a.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ntas_met_8d73_1bc1_ec8a", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ntas_met_8d73_1bc1_ec8a.graph", "", "", "public", "OceanSITES NTAS surface mooring MET data", "OceanSites time-series MET data from NTAS station\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\nAIRT (air temperature, degree_C)\nRELH (relative humidity, percent)\nATMS (barometric pressure, millibars)\nLW (surface downwelling longwave radiation, W m-2)\nSW (shortwave radiation, W m-2)\nRAIN (precipitation rate, mm/hour)\nUWND (Wind Velocity East, meters/second)\nVWND (wind velocity north, meters/second)\nTEMP (sea temperature, degree_C)\nPSAL (sea water practical salinity, 1)\nCNDC (conductivity, S m-1)\nUCUR (Eastward Sea Water Velocity, S m-1)\nVCUR (Northward Sea Water Velocity, S m-1)\nlatitude (approximate latitude, degrees_north)\nlongitude (approximate longitude, degrees_east)\nwmo_platform_code\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/ntas_met_8d73_1bc1_ec8a_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/ntas_met_8d73_1bc1_ec8a_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/ntas_met_8d73_1bc1_ec8a/index.json", "http://uop.whoi.edu/projects/stratus", "http://upwell.pfeg.noaa.gov/erddap/rss/ntas_met_8d73_1bc1_ec8a.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=ntas_met_8d73_1bc1_ec8a&showErrors=false&email=", "WHOI", "ntas_met_8d73_1bc1_ec8a"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/rama_3c15_3410_780a.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/rama_3c15_3410_780a", "https://upwell.pfeg.noaa.gov/erddap/tabledap/rama_3c15_3410_780a.graph", "", "", "public", "OceanSITES RAMA daily in-situ data", "OceanSITES daily in-situ data. OceanSITES Global Tropical Moored Buoy Array Research Moored Array for African-Asian-Australian Monsoon Analysis and Prediction (RAMA) data from Pacific Marine Environmental Laboratory (PMEL)\n\ncdm_data_type = TimeSeries\nVARIABLES:\nwmo_platform_code\nsite_code\nsite_id (OceanSITES station ID)\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (Latitude of each location, degrees_north)\nlongitude (Longitude of each location, degrees_east)\ndepcur (Depth of each measurement, meters)\nUCUR (zonal current, cm/s)\nVCUR (meridional current, cm/s)\nCSPD (current speed, cm/s)\nCSPD_QC (quality flag)\nCSPD_DM (method of data processing)\nCDIR (current direction (oceanographic convention, flowing to), degree)\nCDIR_QC (quality flag)\nCDIR_DM (method of data processing)\nTEMP (temperature, degree_Celsius)\nTEMP_QC (quality flag)\ndepth (Depth of each measurement, m)\ndeppsal (Depth of each measurement, meters)\nPSAL (salinity, PSU)\nPSAL_QC (quality flag)\nPSAL_DM (method of data processing)\ndepden (Depth of each measurement, meters)\nDEN (sigma-theta (potential density), kg/m**3)\nDEN_QC (quality flag)\n... (37 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/rama_3c15_3410_780a_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/rama_3c15_3410_780a_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/rama_3c15_3410_780a/index.json", "https://www.pmel.noaa.gov/gtmba/", "http://upwell.pfeg.noaa.gov/erddap/rss/rama_3c15_3410_780a.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=rama_3c15_3410_780a&showErrors=false&email=", "PMEL Global Tropical Moored Buoy Array", "rama_3c15_3410_780a"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/stratus_flux_9770_7f18_b314.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/stratus_flux_9770_7f18_b314", "https://upwell.pfeg.noaa.gov/erddap/tabledap/stratus_flux_9770_7f18_b314.graph", "", "", "public", "OceanSITES Stratus surface mooring fluxes calculated with Coare 3.0 algorithm", "OceanSites time-series flux data from Stratus station\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\nQB (sensible heat flux, W/m2)\nQH (latent heat flux, W/m2)\nQN (net heat flux, W/m2)\nQL (net longwave, W/m2)\nQS (net shortwave, W/m2)\nTAUDIR (wind stress direction, degree N)\nTAUMAG (wind stress magnitude, N/m^2)\nTSKIN (SST adjusted to skin, degree)\nWS_H (wind speed adjusted to 10m, m/s)\nQQ_H (specific humidity adjusted to 2m, g/kg)\nTA_H (air temperature adjusted to 2m, degree_C)\nTAUE (east wind stress, N/m^2)\nTAUN (north wind stress, N/m^2)\nSTABILITY (stability parameter, 1)\ndepth (depth coordinate of tskin, m)\nwmo_platform_code\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/stratus_flux_9770_7f18_b314_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/stratus_flux_9770_7f18_b314_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/stratus_flux_9770_7f18_b314/index.json", "http://uop.whoi.edu/projects/stratus", "http://upwell.pfeg.noaa.gov/erddap/rss/stratus_flux_9770_7f18_b314.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=stratus_flux_9770_7f18_b314&showErrors=false&email=", "WHOI", "stratus_flux_9770_7f18_b314"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/stratus_met_ab43_e62a_5494.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/stratus_met_ab43_e62a_5494", "https://upwell.pfeg.noaa.gov/erddap/tabledap/stratus_met_ab43_e62a_5494.graph", "", "", "public", "OceanSITES Stratus surface mooring MET data", "OceanSites time-series data from Stratus station\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\nAIRT (air temperature, degree_C)\nRELH (relative humidity, percent)\nATMS (barometric pressure, millibars)\nLW (surface downwelling longwave radiation, W m-2)\nSW (shortwave radiation, W m-2)\nRAIN (precipitation rate, mm/hour)\nUWND (Wind Velocity East, meters/second)\nVWND (wind velocity north, meters/second)\nTEMP (sea temperature, degree_C)\nPSAL (sea water practical salinity, .001)\nCNDC (conductivity, S m-1)\nUCUR (Eastward Sea Water Velocity, S m-1)\nVCUR (Northward Sea Water Velocity, S m-1)\nlatitude (approximate latitude, degrees_north)\nlongitude (approximate longitude, degrees_east)\nwmo_platform_code\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/stratus_met_ab43_e62a_5494_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/stratus_met_ab43_e62a_5494_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/stratus_met_ab43_e62a_5494/index.json", "http://uop.whoi.edu/projects/stratus", "http://upwell.pfeg.noaa.gov/erddap/rss/stratus_met_ab43_e62a_5494.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=stratus_met_ab43_e62a_5494&showErrors=false&email=", "WHOI", "stratus_met_ab43_e62a_5494"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/whots_flux_f82f_4684_a74f.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/whots_flux_f82f_4684_a74f", "https://upwell.pfeg.noaa.gov/erddap/tabledap/whots_flux_f82f_4684_a74f.graph", "", "", "public", "OceanSITES WHOTS surface mooring fluxes calculated with Coare 3.0 algorithm", "OceanSites time-series FLUX  data from WHOTS station\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\nQB (sensible heat flux, W/m2)\nQH (latent heat flux, W/m2)\nQN (net heat flux, W/m2)\nQL (net longwave, W/m2)\nQS (net shortwave, W/m2)\nTAUDIR (wind stress direction, degree N)\nTAUMAG (wind stress magnitude, N/m^2)\nTSKIN (SST adjusted to skin, degree)\nWS_H (wind speed adjusted to 10m, m/s)\nQQ_H (specific humidity adjusted to 2m, g/kg)\nTA_H (air temperature adjusted to 2m, degree_C)\nTAUE (east wind stress, N/m^2)\nTAUN (north wind stress, N/m^2)\nSTABILITY (stability parameter, 1)\ndepth (depth coordinate of tskin, m)\nwmo_platform_code\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/whots_flux_f82f_4684_a74f_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/whots_flux_f82f_4684_a74f_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/whots_flux_f82f_4684_a74f/index.json", "http://uop.whoi.edu/projects/stratus", "http://upwell.pfeg.noaa.gov/erddap/rss/whots_flux_f82f_4684_a74f.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=whots_flux_f82f_4684_a74f&showErrors=false&email=", "WHOI", "whots_flux_f82f_4684_a74f"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/whots_met_f183_ee06_8b63.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/whots_met_f183_ee06_8b63", "https://upwell.pfeg.noaa.gov/erddap/tabledap/whots_met_f183_ee06_8b63.graph", "", "", "public", "OceanSITES WHOTS surface mooring MET data", "OceanSites time-series MET  data from WHOTS station\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\nAIRT (air temperature, degree_C)\nRELH (relative humidity, percent)\nATMS (barometric pressure, millibars)\nLW (surface downwelling longwave radiation, W m-2)\nSW (shortwave radiation, W m-2)\nRAIN (precipitation rate, mm/hour)\nUWND (Wind Velocity East, meters/second)\nVWND (wind velocity north, meters/second)\nTEMP (sea temperature, degree_C)\nPSAL (sea water practical salinity, .001)\nCNDC (conductivity, S m-1)\nUCUR (Eastward Sea Water Velocity, S m-1)\nVCUR (Northward Sea Water Velocity, S m-1)\nlatitude (approximate latitude, degrees_north)\nlongitude (approximate longitude, degrees_east)\nwmo_platform_code\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/whots_met_f183_ee06_8b63_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/whots_met_f183_ee06_8b63_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/whots_met_f183_ee06_8b63/index.json", "http://uop.whoi.edu/projects/stratus", "http://upwell.pfeg.noaa.gov/erddap/rss/whots_met_f183_ee06_8b63.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=whots_met_f183_ee06_8b63&showErrors=false&email=", "WHOI", "whots_met_f183_ee06_8b63"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/OSMC_PROFILERS.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/OSMC_PROFILERS", "https://upwell.pfeg.noaa.gov/erddap/tabledap/OSMC_PROFILERS.graph", "", "", "public", "OSMC Argo Profile data", "OSMC Argo Profile data\n\ncdm_data_type = Profile\nVARIABLES:\nplatform_code\norganization_name\ncountry_name\nplatform_type_name\ntime (OBSERVATION DATE, seconds since 1970-01-01T00:00:00Z)\nparameter_name\ndaily_obs_count\nobservation_depth\nobservation_value\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/OSMC_PROFILERS_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/OSMC_PROFILERS_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/OSMC_PROFILERS/index.json", "www.osmc.noaa.gov", "http://upwell.pfeg.noaa.gov/erddap/rss/OSMC_PROFILERS.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=OSMC_PROFILERS&showErrors=false&email=", "OSMC", "OSMC_PROFILERS"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/OSMC_flattened.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/OSMC_flattened", "https://upwell.pfeg.noaa.gov/erddap/tabledap/OSMC_flattened.graph", "", "", "public", "OSMC flattened observations from GTS", "OSMC flattened observations from GTS, providing tupled data availability\n\ncdm_data_type = Point\nVARIABLES:\nplatform_id\nplatform_code\nplatform_type\ncountry\ntime (observation date, seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nobservation_depth\nsst (sea surface temperature, Deg C)\natmp (air temperature, Deg C)\nprecip (precipitation, mm)\nztmp (profile water temperature, Deg C)\nzsal (profile salinity)\nslp (sea level pressure, hPa)\nwindspd (wind speed, m/s)\nwinddir (wind from direction, Deg true)\nwvht (sea surface wave significant height, m)\nwaterlevel (m)\nclouds (cloud cover, oktas)\ndewpoint (dew point temperature, Deg C)\nuo (eastward sea water velocity, m s-1)\nvo (northward sea water velocity, m s-1)\nwo (upward sea water velocity, m s-1)\nrainfall_rate (m s-1)\nhur (relative humidity)\nsea_water_elec_conductivity (sea water electrical conductivity, S m-1)\nsea_water_pressure (dbar)\n... (7 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/OSMC_flattened_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/OSMC_flattened_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/OSMC_flattened/index.json", "www.osmc.noaa.gov", "http://upwell.pfeg.noaa.gov/erddap/rss/OSMC_flattened.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=OSMC_flattened&showErrors=false&email=", "OSMC", "OSMC_flattened"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/OSMC_Points.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/OSMC_Points", "https://upwell.pfeg.noaa.gov/erddap/tabledap/OSMC_Points.graph", "", "", "public", "OSMC normalized observations from GTS", "OSMC normalized In-situ Real time GTS data\n\ncdm_data_type = Point\nVARIABLES:\nPLATFORM_CODE (Station ID)\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\nplatform\nparameter\nOBSERVATION_VALUE\nOBSERVATION_DEPTH\nCOUNTRY_NAME\norganization_name\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/OSMC_Points_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/OSMC_Points_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/OSMC_Points/index.json", "https://www.osmc.noaa.gov", "http://upwell.pfeg.noaa.gov/erddap/rss/OSMC_Points.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=OSMC_Points&showErrors=false&email=", "OSMC", "OSMC_Points"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/OSMCV4_DUO_PROFILES.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/OSMCV4_DUO_PROFILES", "https://upwell.pfeg.noaa.gov/erddap/tabledap/OSMCV4_DUO_PROFILES.graph", "", "", "public", "OSMC Profiles", "OSMC profiles from GTS\n\ncdm_data_type = Profile\nVARIABLES:\nplatform_code\nplatform_type\ncountry\ntime (OBSERVATION DATE, seconds since 1970-01-01T00:00:00Z)\nlongitude (degrees_east)\nlatitude (degrees_north)\ndepth (OBSERVATION DEPTH, m)\nztmp (profile water temperature, Deg C)\nzsal (Sea Water Salinity)\nsea_water_elec_conductivity (Sea Water Electrical Conductivity, S m-1)\nsea_water_pressure (dbar)\nnorthward_sea_water_velocity (m s-1)\neastward_sea_water_velocity (m s-1)\nupward_sea_water_velocity (m s-1)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/OSMCV4_DUO_PROFILES_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/OSMCV4_DUO_PROFILES_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/OSMCV4_DUO_PROFILES/index.json", "www.osmc.noaa.gov", "http://upwell.pfeg.noaa.gov/erddap/rss/OSMCV4_DUO_PROFILES.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=OSMCV4_DUO_PROFILES&showErrors=false&email=", "OSMC", "OSMCV4_DUO_PROFILES"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/OSMCV4_DUO_SURFACE_TRAJECTORY.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/OSMCV4_DUO_SURFACE_TRAJECTORY", "https://upwell.pfeg.noaa.gov/erddap/tabledap/OSMCV4_DUO_SURFACE_TRAJECTORY.graph", "", "", "public", "OSMC surface trajectory data", "Surface trajectory data from GTS\n\ncdm_data_type = Trajectory\nVARIABLES:\nplatform_id\nplatform_code\nplatform_type\ncountry\ntime (OBSERVATION DATE, seconds since 1970-01-01T00:00:00Z)\nlongitude (degrees_east)\nlatitude (degrees_north)\nobservation_depth\nsst (sea surface temperature, Deg C)\natmp (air temperature, Deg C)\nprecip (precipitation, mm)\nztmp (profile water temperature, Deg C)\nzsal (profile salinity)\nsss\nslp (sea level pressure, hPa)\nwindspd (wind speed, m/s)\nwinddir (Wind From Direction, Deg true)\nwvht (Sea Surface Wave Significant Height, m)\nwaterlevel (m)\nclouds (cloud cover, oktas)\ndewpoint (dew point temperature, Deg C)\neastward_sea_water_velocity (m s-1)\nnorthward_sea_water_velocity (m s-1)\nupward_sea_water_velocity (m s-1)\nrainfall_rate (m s-1)\nrelative_humidity\nsea_water_electrical_cond (sea water electrical conductivity, S m-1)\n... (8 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/OSMCV4_DUO_SURFACE_TRAJECTORY_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/OSMCV4_DUO_SURFACE_TRAJECTORY_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/OSMCV4_DUO_SURFACE_TRAJECTORY/index.json", "www.osmc.noaa.gov", "http://upwell.pfeg.noaa.gov/erddap/rss/OSMCV4_DUO_SURFACE_TRAJECTORY.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=OSMCV4_DUO_SURFACE_TRAJECTORY&showErrors=false&email=", "OSMC", "OSMCV4_DUO_SURFACE_TRAJECTORY"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/OSMCV4_DUO_TIME_SERIES.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/OSMCV4_DUO_TIME_SERIES", "https://upwell.pfeg.noaa.gov/erddap/tabledap/OSMCV4_DUO_TIME_SERIES.graph", "", "", "public", "OSMC TimeSeries data", "OSMC TimeSeries data\n\ncdm_data_type = TimeSeries\nVARIABLES:\nplatform_id\nplatform_code\nplatform_type (PLATFOR TYPE)\ncountry\ntime (OBSERVATION DATE, seconds since 1970-01-01T00:00:00Z)\nobservation_depth\nsst\natmp\nprecip\nztmp\nzsal (Sea Water Salinity)\nsss (Sea Water Salinity)\nslp (Surface Air Pressure)\nwindspd\nwinddir (Wind From Direction)\nwvht (Sea Surface Wave Significant Height)\nwaterlevel\nclouds\ndewpoint\neastward_sea_water_vel\nnorthward_sea_water_vel\nupward_sea_water_vel\nrainfall_rate\nrelative_humidity\nsea_water_electrical_cond\nsea_water_pressure\nsurface_dwnwelling_lngwave\n... (7 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/OSMCV4_DUO_TIME_SERIES_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/OSMCV4_DUO_TIME_SERIES_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/OSMCV4_DUO_TIME_SERIES/index.json", "www.osmc.noaa.gov", "http://upwell.pfeg.noaa.gov/erddap/rss/OSMCV4_DUO_TIME_SERIES.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=OSMCV4_DUO_TIME_SERIES&showErrors=false&email=", "OSMC", "OSMCV4_DUO_TIME_SERIES"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/BEACHCAM-001", "https://upwell.pfeg.noaa.gov/erddap/tabledap/BEACHCAM-001.graph", "", "", "public", "PacIOOS Beach Camera 001: Waikiki, Oahu, Hawaii", "A digital camera on top of the Sheraton Waikiki hotel was used to photograph the shoreline of Waikiki beach along the South Shore of the island of Oahu in the State of Hawaii. The oblique camera view presented here captures the shoreline leading southeast towards Diamond Head crater. It operated for over 4.5 years between February 5, 2009 and October 13, 2013. Capturing hourly snapshots at a set vantage point during the local daytime hours of 6:00 AM or 7:00 AM to 5:00 PM, these images are useful for tracking beach dynamics such as wave run-up, sand movement, and turbidity plumes over time. The camera was mounted on top of a 3 meter wall extending above the roof surface for a total height of 93 meters above ground level or 96 meters above mean sea level. See also BEACHCAM-002 for an alternate camera view from the same location pointing directly downwards.\n\ncdm_data_type = Other\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\naltitude (m)\naboveGround (Height, m)\nurl\nname (File Name)\nsize (bytes)\nfileType (File Type)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/BEACHCAM-001_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/BEACHCAM-001_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/BEACHCAM-001/index.json", "http://www.pacioos.hawaii.edu", "http://upwell.pfeg.noaa.gov/erddap/rss/BEACHCAM-001.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=BEACHCAM-001&showErrors=false&email=", "University of Hawaii", "BEACHCAM-001"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg114_3", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg114_3.graph", "", "", "public", "PacIOOS Ocean Gliders: SeaGlider 114: Mission 3", "As a part of PacIOOS, ocean gliders provide very detailed information about the physical and chemical condition of the waters around the Hawaiian Islands. Additionally, these data get used in computer models to make predictions about currents. Ocean gliders are small, free-swimming, unmanned vehicles that can cruise the ocean for several months gathering information about the temperature, salinity, and other water properties between the surface and 1000 m depth. A pressure sensor on the glider is able to record the depth throughout the dive. Because gliders are unmanned, they communicate with scientists on land when they are at the surface using an antenna on the end of the glider. The SeaGlider autonomous underwater vehicle (AUV) was designed at the University of Washington (UW) Applied Physics Laboratory (APL). These data are taken from Mission 3 of SeaGlider 114.\n\ncdm_data_type = Trajectory\nVARIABLES:\ntrajectory\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nlatitude (degrees_north)\nlongitude (degrees_east)\ntemperature (sea_water_temperature, Celsius)\nconductivity (sea_water_electrical_conductivity, S m-1)\nsalinity (sea_water_salinity, 1e-3)\ndensity (sea_water_density, kg m-3)\npressure (sea_water_pressure, dbar)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/sg114_3_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/sg114_3_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/sg114_3/index.json", "http://hahana.soest.hawaii.edu/seagliders/", "http://upwell.pfeg.noaa.gov/erddap/rss/sg114_3.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=sg114_3&showErrors=false&email=", "Pacific Islands Ocean Observing System (PacIOOS)", "sg114_3"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg114_4", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg114_4.graph", "", "", "public", "PacIOOS Ocean Gliders: SeaGlider 114: Mission 4", "As a part of PacIOOS, ocean gliders provide very detailed information about the physical and chemical condition of the waters around the Hawaiian Islands. Additionally, these data get used in computer models to make predictions about currents. Ocean gliders are small, free-swimming, unmanned vehicles that can cruise the ocean for several months gathering information about the temperature, salinity, and other water properties between the surface and 1000 m depth. A pressure sensor on the glider is able to record the depth throughout the dive. Because gliders are unmanned, they communicate with scientists on land when they are at the surface using an antenna on the end of the glider. The SeaGlider autonomous underwater vehicle (AUV) was designed at the University of Washington (UW) Applied Physics Laboratory (APL). These data are taken from Mission 4 of SeaGlider 114.\n\ncdm_data_type = Trajectory\nVARIABLES:\ntrajectory\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nlatitude (degrees_north)\nlongitude (degrees_east)\ntemperature (sea_water_temperature, Celsius)\nconductivity (sea_water_electrical_conductivity, S m-1)\nsalinity (sea_water_salinity, 1e-3)\ndensity (sea_water_density, kg m-3)\npressure (sea_water_pressure, dbar)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/sg114_4_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/sg114_4_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/sg114_4/index.json", "http://hahana.soest.hawaii.edu/seagliders/", "http://upwell.pfeg.noaa.gov/erddap/rss/sg114_4.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=sg114_4&showErrors=false&email=", "Pacific Islands Ocean Observing System (PacIOOS)", "sg114_4"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg139_1", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg139_1.graph", "", "", "public", "PacIOOS Ocean Gliders: SeaGlider 139: Mission 1", "As a part of PacIOOS, ocean gliders provide very detailed information about the physical and chemical condition of the waters around the Hawaiian Islands. Additionally, these data get used in computer models to make predictions about currents. Ocean gliders are small, free-swimming, unmanned vehicles that can cruise the ocean for several months gathering information about the temperature, salinity, and other water properties between the surface and 1000 m depth. A pressure sensor on the glider is able to record the depth throughout the dive. Because gliders are unmanned, they communicate with scientists on land when they are at the surface using an antenna on the end of the glider. The SeaGlider autonomous underwater vehicle (AUV) was designed at the University of Washington (UW) Applied Physics Laboratory (APL). These data are taken from Mission 1 of SeaGlider 139.\n\ncdm_data_type = Trajectory\nVARIABLES:\ntrajectory\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nlatitude (degrees_north)\nlongitude (degrees_east)\ntemperature (sea_water_temperature, Celsius)\nconductivity (sea_water_electrical_conductivity, S m-1)\nsalinity (sea_water_salinity, 1e-3)\ndensity (sea_water_density, kg m-3)\npressure (sea_water_pressure, dbar)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/sg139_1_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/sg139_1_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/sg139_1/index.json", "http://hahana.soest.hawaii.edu/seagliders/", "http://upwell.pfeg.noaa.gov/erddap/rss/sg139_1.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=sg139_1&showErrors=false&email=", "Pacific Islands Ocean Observing System (PacIOOS)", "sg139_1"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg139_2", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg139_2.graph", "", "", "public", "PacIOOS Ocean Gliders: SeaGlider 139: Mission 2", "As a part of PacIOOS, ocean gliders provide very detailed information about the physical and chemical condition of the waters around the Hawaiian Islands. Additionally, these data get used in computer models to make predictions about currents. Ocean gliders are small, free-swimming, unmanned vehicles that can cruise the ocean for several months gathering information about the temperature, salinity, and other water properties between the surface and 1000 m depth. A pressure sensor on the glider is able to record the depth throughout the dive. Because gliders are unmanned, they communicate with scientists on land when they are at the surface using an antenna on the end of the glider. The SeaGlider autonomous underwater vehicle (AUV) was designed at the University of Washington (UW) Applied Physics Laboratory (APL). These data are taken from Mission 2 of SeaGlider 139.\n\ncdm_data_type = Trajectory\nVARIABLES:\ntrajectory\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nlatitude (degrees_north)\nlongitude (degrees_east)\ntemperature (sea_water_temperature, Celsius)\nconductivity (sea_water_electrical_conductivity, S m-1)\nsalinity (sea_water_salinity, 1e-3)\ndensity (sea_water_density, kg m-3)\npressure (sea_water_pressure, dbar)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/sg139_2_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/sg139_2_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/sg139_2/index.json", "http://hahana.soest.hawaii.edu/seagliders/", "http://upwell.pfeg.noaa.gov/erddap/rss/sg139_2.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=sg139_2&showErrors=false&email=", "Pacific Islands Ocean Observing System (PacIOOS)", "sg139_2"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg139_3", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg139_3.graph", "", "", "public", "PacIOOS Ocean Gliders: SeaGlider 139: Mission 3", "As a part of PacIOOS, ocean gliders provide very detailed information about the physical and chemical condition of the waters around the Hawaiian Islands. Additionally, these data get used in computer models to make predictions about currents. Ocean gliders are small, free-swimming, unmanned vehicles that can cruise the ocean for several months gathering information about the temperature, salinity, and other water properties between the surface and 1000 m depth. A pressure sensor on the glider is able to record the depth throughout the dive. Because gliders are unmanned, they communicate with scientists on land when they are at the surface using an antenna on the end of the glider. The SeaGlider autonomous underwater vehicle (AUV) was designed at the University of Washington (UW) Applied Physics Laboratory (APL). These data are taken from Mission 3 of SeaGlider 139.\n\ncdm_data_type = Trajectory\nVARIABLES:\ntrajectory\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nlatitude (degrees_north)\nlongitude (degrees_east)\ntemperature (sea_water_temperature, Celsius)\nconductivity (sea_water_electrical_conductivity, S m-1)\nsalinity (sea_water_salinity, 1e-3)\ndensity (sea_water_density, kg m-3)\npressure (sea_water_pressure, dbar)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/sg139_3_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/sg139_3_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/sg139_3/index.json", "http://hahana.soest.hawaii.edu/seagliders/", "http://upwell.pfeg.noaa.gov/erddap/rss/sg139_3.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=sg139_3&showErrors=false&email=", "Pacific Islands Ocean Observing System (PacIOOS)", "sg139_3"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg139_6", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg139_6.graph", "", "", "public", "PacIOOS Ocean Gliders: SeaGlider 139: Mission 6", "As a part of PacIOOS, ocean gliders provide very detailed information about the physical and chemical condition of the waters around the Hawaiian Islands. Additionally, these data get used in computer models to make predictions about currents. Ocean gliders are small, free-swimming, unmanned vehicles that can cruise the ocean for several months gathering information about the temperature, salinity, and other water properties between the surface and 1000 m depth. A pressure sensor on the glider is able to record the depth throughout the dive. Because gliders are unmanned, they communicate with scientists on land when they are at the surface using an antenna on the end of the glider. The SeaGlider autonomous underwater vehicle (AUV) was designed at the University of Washington (UW) Applied Physics Laboratory (APL). These data are taken from Mission 6 of SeaGlider 139.\n\ncdm_data_type = Trajectory\nVARIABLES:\ntrajectory\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nlatitude (degrees_north)\nlongitude (degrees_east)\ntemperature (sea_water_temperature, Celsius)\nconductivity (sea_water_electrical_conductivity, S m-1)\nsalinity (sea_water_salinity, 1e-3)\ndensity (sea_water_density, kg m-3)\npressure (sea_water_pressure, dbar)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/sg139_6_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/sg139_6_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/sg139_6/index.json", "http://hahana.soest.hawaii.edu/seagliders/", "http://upwell.pfeg.noaa.gov/erddap/rss/sg139_6.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=sg139_6&showErrors=false&email=", "Pacific Islands Ocean Observing System (PacIOOS)", "sg139_6"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg139_7", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg139_7.graph", "", "", "public", "PacIOOS Ocean Gliders: SeaGlider 139: Mission 7", "As a part of PacIOOS, ocean gliders provide very detailed information about the physical and chemical condition of the waters around the Hawaiian Islands. Additionally, these data get used in computer models to make predictions about currents. Ocean gliders are small, free-swimming, unmanned vehicles that can cruise the ocean for several months gathering information about the temperature, salinity, and other water properties between the surface and 1000 m depth. A pressure sensor on the glider is able to record the depth throughout the dive. Because gliders are unmanned, they communicate with scientists on land when they are at the surface using an antenna on the end of the glider. The SeaGlider autonomous underwater vehicle (AUV) was designed at the University of Washington (UW) Applied Physics Laboratory (APL). These data are taken from Mission 7 of SeaGlider 139.\n\ncdm_data_type = Trajectory\nVARIABLES:\ntrajectory\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nlatitude (degrees_north)\nlongitude (degrees_east)\ntemperature (sea_water_temperature, Celsius)\nconductivity (sea_water_electrical_conductivity, S m-1)\nsalinity (sea_water_salinity, 1e-3)\ndensity (sea_water_density, kg m-3)\npressure (sea_water_pressure, dbar)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/sg139_7_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/sg139_7_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/sg139_7/index.json", "http://hahana.soest.hawaii.edu/seagliders/", "http://upwell.pfeg.noaa.gov/erddap/rss/sg139_7.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=sg139_7&showErrors=false&email=", "Pacific Islands Ocean Observing System (PacIOOS)", "sg139_7"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg139_8", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg139_8.graph", "", "", "public", "PacIOOS Ocean Gliders: SeaGlider 139: Mission 8", "As a part of PacIOOS, ocean gliders provide very detailed information about the physical and chemical condition of the waters around the Hawaiian Islands. Additionally, these data get used in computer models to make predictions about currents. Ocean gliders are small, free-swimming, unmanned vehicles that can cruise the ocean for several months gathering information about the temperature, salinity, and other water properties between the surface and 1000 m depth. A pressure sensor on the glider is able to record the depth throughout the dive. Because gliders are unmanned, they communicate with scientists on land when they are at the surface using an antenna on the end of the glider. The SeaGlider autonomous underwater vehicle (AUV) was designed at the University of Washington (UW) Applied Physics Laboratory (APL). These data are taken from Mission 8 of SeaGlider 139.\n\ncdm_data_type = Trajectory\nVARIABLES:\ntrajectory\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nlatitude (degrees_north)\nlongitude (degrees_east)\ntemperature (sea_water_temperature, Celsius)\nconductivity (sea_water_electrical_conductivity, S m-1)\nsalinity (sea_water_salinity, 1e-3)\ndensity (sea_water_density, kg m-3)\npressure (sea_water_pressure, dbar)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/sg139_8_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/sg139_8_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/sg139_8/index.json", "http://hahana.soest.hawaii.edu/seagliders/", "http://upwell.pfeg.noaa.gov/erddap/rss/sg139_8.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=sg139_8&showErrors=false&email=", "Pacific Islands Ocean Observing System (PacIOOS)", "sg139_8"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg139_9", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg139_9.graph", "", "", "public", "PacIOOS Ocean Gliders: SeaGlider 139: Mission 9", "As a part of PacIOOS, ocean gliders provide very detailed information about the physical and chemical condition of the waters around the Hawaiian Islands. Additionally, these data get used in computer models to make predictions about currents. Ocean gliders are small, free-swimming, unmanned vehicles that can cruise the ocean for several months gathering information about the temperature, salinity, and other water properties between the surface and 1000 m depth. A pressure sensor on the glider is able to record the depth throughout the dive. Because gliders are unmanned, they communicate with scientists on land when they are at the surface using an antenna on the end of the glider. The SeaGlider autonomous underwater vehicle (AUV) was designed at the University of Washington (UW) Applied Physics Laboratory (APL). These data are taken from Mission 9 of SeaGlider 139.\n\ncdm_data_type = Trajectory\nVARIABLES:\ntrajectory\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nlatitude (degrees_north)\nlongitude (degrees_east)\ntemperature (sea_water_temperature, Celsius)\nconductivity (sea_water_electrical_conductivity, S m-1)\nsalinity (sea_water_salinity, 1e-3)\ndensity (sea_water_density, kg m-3)\npressure (sea_water_pressure, dbar)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/sg139_9_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/sg139_9_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/sg139_9/index.json", "http://hahana.soest.hawaii.edu/seagliders/", "http://upwell.pfeg.noaa.gov/erddap/rss/sg139_9.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=sg139_9&showErrors=false&email=", "Pacific Islands Ocean Observing System (PacIOOS)", "sg139_9"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg523_1", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg523_1.graph", "", "", "public", "PacIOOS Ocean Gliders: SeaGlider 523: Mission 1", "As a part of PacIOOS, ocean gliders provide very detailed information about the physical and chemical condition of the waters around the Hawaiian Islands. Additionally, these data get used in computer models to make predictions about currents. Ocean gliders are small, free-swimming, unmanned vehicles that can cruise the ocean for several months gathering information about the temperature, salinity, and other water properties between the surface and 1000 m depth. A pressure sensor on the glider is able to record the depth throughout the dive. Because gliders are unmanned, they communicate with scientists on land when they are at the surface using an antenna on the end of the glider. The SeaGlider autonomous underwater vehicle (AUV) was designed at the University of Washington (UW) Applied Physics Laboratory (APL). These data are taken from Mission 1 of SeaGlider 523.\n\ncdm_data_type = Trajectory\nVARIABLES:\ntrajectory\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nlatitude (degrees_north)\nlongitude (degrees_east)\ntemperature (sea_water_temperature, Celsius)\nconductivity (sea_water_electrical_conductivity, S m-1)\nsalinity (sea_water_salinity, 1e-3)\ndensity (sea_water_density, kg m-3)\npressure (sea_water_pressure, dbar)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/sg523_1_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/sg523_1_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/sg523_1/index.json", "http://hahana.soest.hawaii.edu/seagliders/", "http://upwell.pfeg.noaa.gov/erddap/rss/sg523_1.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=sg523_1&showErrors=false&email=", "Pacific Islands Ocean Observing System (PacIOOS)", "sg523_1"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg523_3", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg523_3.graph", "", "", "public", "PacIOOS Ocean Gliders: SeaGlider 523: Mission 3", "As a part of PacIOOS, ocean gliders provide very detailed information about the physical and chemical condition of the waters around the Hawaiian Islands. Additionally, these data get used in computer models to make predictions about currents. Ocean gliders are small, free-swimming, unmanned vehicles that can cruise the ocean for several months gathering information about the temperature, salinity, and other water properties between the surface and 1000 m depth. A pressure sensor on the glider is able to record the depth throughout the dive. Because gliders are unmanned, they communicate with scientists on land when they are at the surface using an antenna on the end of the glider. The SeaGlider autonomous underwater vehicle (AUV) was designed at the University of Washington (UW) Applied Physics Laboratory (APL). These data are taken from Mission 3 of SeaGlider 523.\n\ncdm_data_type = Trajectory\nVARIABLES:\ntrajectory\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nlatitude (degrees_north)\nlongitude (degrees_east)\ntemperature (sea_water_temperature, Celsius)\nconductivity (sea_water_electrical_conductivity, S m-1)\nsalinity (sea_water_salinity, 1e-3)\ndensity (sea_water_density, kg m-3)\npressure (sea_water_pressure, dbar)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/sg523_3_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/sg523_3_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/sg523_3/index.json", "http://hahana.soest.hawaii.edu/seagliders/", "http://upwell.pfeg.noaa.gov/erddap/rss/sg523_3.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=sg523_3&showErrors=false&email=", "Pacific Islands Ocean Observing System (PacIOOS)", "sg523_3"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg523_4", "https://upwell.pfeg.noaa.gov/erddap/tabledap/sg523_4.graph", "", "", "public", "PacIOOS Ocean Gliders: SeaGlider 523: Mission 4", "As a part of PacIOOS, ocean gliders provide very detailed information about the physical and chemical condition of the waters around the Hawaiian Islands. Additionally, these data get used in computer models to make predictions about currents. Ocean gliders are small, free-swimming, unmanned vehicles that can cruise the ocean for several months gathering information about the temperature, salinity, and other water properties between the surface and 1000 m depth. A pressure sensor on the glider is able to record the depth throughout the dive. Because gliders are unmanned, they communicate with scientists on land when they are at the surface using an antenna on the end of the glider. The SeaGlider autonomous underwater vehicle (AUV) was designed at the University of Washington (UW) Applied Physics Laboratory (APL). These data are taken from Mission 4 of SeaGlider 523.\n\ncdm_data_type = Trajectory\nVARIABLES:\ntrajectory\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nlatitude (degrees_north)\nlongitude (degrees_east)\ntemperature (sea_water_temperature, Celsius)\nconductivity (sea_water_electrical_conductivity, S m-1)\nsalinity (sea_water_salinity, 1e-3)\ndensity (sea_water_density, kg m-3)\npressure (sea_water_pressure, dbar)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/sg523_4_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/sg523_4_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/sg523_4/index.json", "http://hahana.soest.hawaii.edu/seagliders/", "http://upwell.pfeg.noaa.gov/erddap/rss/sg523_4.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=sg523_4&showErrors=false&email=", "Pacific Islands Ocean Observing System (PacIOOS)", "sg523_4"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/WQB-04.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/WQB-04", "https://upwell.pfeg.noaa.gov/erddap/tabledap/WQB-04.graph", "", "", "public", "PacIOOS Water Quality Buoy 04: Hilo Bay, Big Island, Hawaii", "The water quality buoys are part of the Pacific Islands Ocean Observing System (PacIOOS) and are designed to measure a variety of ocean parameters at fixed points. WQB-04 is located in Hilo Bay on the east side of the Big Island. Continuous sampling of this area provides a record of baseline conditions of the chemical and biological environment for comparison when there are pollution events such as storm runoff or a sewage spill.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\ndepth (Distance below mean sea level, m)\nstation_name (WQB-04: PacIOOS Water Quality Buoy 04: Hilo Bay, Big Island, Hawaii)\ntemperature (water temperature (processed), Celsius)\nsalinity (salinity PSU (processed), 1)\nturbidity (turbidity NTU (processed), 1)\nchlorophyll (chlorophyll (processed), ug/L)\noxygen (dissolved oxygen concentration (processed), mg/L)\noxygen_saturation (dissolved oxygen saturation (processed), %)\nph (pH (processed), 1)\ntemperature_raw (water temperature (raw), Celsius)\ntemperature_dm_qd (water temperature delayed-mode quality descriptor, 0)\ntemperature_qc_agg (QARTOD Aggregate/Rollup Test (processed), 0)\ntemperature_qc_gap (QARTOD Gap Test (processed), 0)\ntemperature_qc_syn (QARTOD Syntax Test (processed), 0)\ntemperature_qc_loc (QARTOD Location Test (processed), 0)\ntemperature_qc_rng (QARTOD Gross Range Test (processed), 0)\ntemperature_qc_clm (QARTOD Climatology Test (processed), 0)\ntemperature_qc_spk (QARTOD Spike Test (processed), 0)\ntemperature_qc_rtc (QARTOD Rate of Change Test (processed), 0)\ntemperature_qc_flt (QARTOD Flat Line Test (processed), 0)\n... (94 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/WQB-04_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/WQB-04_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/WQB-04/index.json", "https://www.pacioos.hawaii.edu/water/wqbuoy-hilo/", "http://upwell.pfeg.noaa.gov/erddap/rss/WQB-04.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=WQB-04&showErrors=false&email=", "Pacific Islands Ocean Observing System (PacIOOS)", "WQB-04"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/WQB-05.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/WQB-05", "https://upwell.pfeg.noaa.gov/erddap/tabledap/WQB-05.graph", "", "", "public", "PacIOOS Water Quality Buoy 05: Pelekane Bay, Big Island, Hawaii", "The water quality buoys are part of the Pacific Islands Ocean Observing System (PacIOOS) and are designed to measure a variety of ocean parameters at fixed points. WQB-05 is located in Pelekane Bay near Kawaihae Harbor on the west side of the Big Island. Continuous sampling of this area provides a record of baseline conditions of the chemical and biological environment for comparison when there are pollution events such as storm runoff or a sewage spill.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\ndepth (Distance below mean sea level, m)\nstation_name (WQB-05: PacIOOS Water Quality Buoy 05: Pelekane Bay, Big Island, Hawaii)\ntemperature (water temperature (processed), Celsius)\nsalinity (salinity PSU (processed), 1)\nturbidity (turbidity NTU (processed), 1)\nchlorophyll (chlorophyll (processed), ug/L)\noxygen (dissolved oxygen concentration (processed), mg/L)\noxygen_saturation (dissolved oxygen saturation (processed), %)\nph (pH (processed), 1)\ntemperature_raw (water temperature (raw), Celsius)\ntemperature_dm_qd (water temperature delayed-mode quality descriptor, 0)\ntemperature_qc_agg (QARTOD Aggregate/Rollup Test (processed), 0)\ntemperature_qc_gap (QARTOD Gap Test (processed), 0)\ntemperature_qc_syn (QARTOD Syntax Test (processed), 0)\ntemperature_qc_loc (QARTOD Location Test (processed), 0)\ntemperature_qc_rng (QARTOD Gross Range Test (processed), 0)\ntemperature_qc_clm (QARTOD Climatology Test (processed), 0)\ntemperature_qc_spk (QARTOD Spike Test (processed), 0)\ntemperature_qc_rtc (QARTOD Rate of Change Test (processed), 0)\ntemperature_qc_flt (QARTOD Flat Line Test (processed), 0)\n... (94 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/WQB-05_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/WQB-05_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/WQB-05/index.json", "https://www.pacioos.hawaii.edu/water/wqbuoy-pelekane/", "http://upwell.pfeg.noaa.gov/erddap/rss/WQB-05.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=WQB-05&showErrors=false&email=", "Pacific Islands Ocean Observing System (PacIOOS)", "WQB-05"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/AWS-HNLPier1.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/AWS-HNLPier1", "https://upwell.pfeg.noaa.gov/erddap/tabledap/AWS-HNLPier1.graph", "", "", "public", "PacIOOS Weather Station: Honolulu Harbor Entrance, Oahu, Hawaii", "The Pacific Islands Ocean Observing System (PacIOOS) operates a Davis Instruments automatic weather station (AWS) near the entrance to Honolulu Harbor on the leeward (western) coast of Oahu in Hawaii to aid with navigation. The station records measurements every 5 minutes of air temperature, wind speed and direction, precipitation, relative humidity, and air pressure. Sensors are located at Pier 1, installed on a tower at an elevation of 64 feet (19.5 meters) above sea level. The station is owned by the Hawaii Pilots Association (HPA). PacIOOS maintains the station and provides data access.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\naltitude (Distance above mean sea level, m)\nstation_name (AWS-HNLPier1: PacIOOS Weather Station: Honolulu Harbor Entrance, Oahu, Hawaii)\nair_temperature (air temperature (processed), Celsius)\nwind_speed (wind speed (processed), m/s)\ngust_speed (gust speed (processed), m/s)\nwind_from_direction (wind direction (processed), degrees)\nrainfall_rate (rain rate (processed), mm/h)\nrelative_humidity (relative humidity (processed), %)\nair_pressure (air pressure (processed), millibars)\nair_temperature_raw (air temperature (raw), Celsius)\nair_temperature_dm_qd (air temperature delayed-mode quality descriptor, 0)\nair_temperature_qc_agg (QARTOD Aggregate/Rollup Test (processed), 0)\nair_temperature_qc_gap (QARTOD Gap Test (processed), 0)\nair_temperature_qc_syn (QARTOD Syntax Test (processed), 0)\nair_temperature_qc_loc (QARTOD Location Test (processed), 0)\nair_temperature_qc_rng (QARTOD Gross Range Test (processed), 0)\nair_temperature_qc_clm (QARTOD Climatology Test (processed), 0)\nair_temperature_qc_spk (QARTOD Spike Test (processed), 0)\n... (92 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/AWS-HNLPier1_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/AWS-HNLPier1_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/AWS-HNLPier1/index.json", "https://www.pacioos.hawaii.edu/weather/obs-honolulu/", "http://upwell.pfeg.noaa.gov/erddap/rss/AWS-HNLPier1.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=AWS-HNLPier1&showErrors=false&email=", "Pacific Islands Ocean Observing System (PacIOOS)", "AWS-HNLPier1"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ChukchiSea_454a_037a_fcf4.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ChukchiSea_454a_037a_fcf4", "https://upwell.pfeg.noaa.gov/erddap/tabledap/ChukchiSea_454a_037a_fcf4.graph", "", "", "public", "PMEL EcoFOCI Chukchi Sea profile data, 2010-2012", "Pacific Marine Environmental Laboratory (PMEL) Fisheries-Oceanography Cooperative Investigations (FOCI) Chukchi Sea. PMEL EcoFOCI data from a local source.\n\ncdm_data_type = Profile\nVARIABLES:\nprof\nid (profile id)\ncast (cast number)\ncruise (Cruise name)\ntime (seconds since 1970-01-01T00:00:00Z)\nlongitude (station longitude, degrees_east)\nlon360 (station longitude 360, degrees_east)\nlatitude (station latitude, degrees_north)\ndepth (m)\nocean_temperature_1 (Temperature 1\r, Degree_C)\nocean_temperature_2 (Temperature 2\r, Degree_C)\nocean_dissolved_oxygen_concentration_1_mLperL (dissolved oxygen concentration 1 mL/L\r, mL/L)\nocean_dissolved_oxygen_concentration_2_mLperL (dissolved oxygen concentration 2 mL/L\r, mL/L)\nphotosynthetically_active_radiation (Photosynthetically Active Radiation\r, microEin cm-2 s-1)\nocean_chlorophyll_a_concentration_factoryCal (Chlorophyll a Concentration (Factory Calibration)\r, micrograms/L)\nocean_chlorophyll_fluorescence_raw (Raw Chlorophyll Flourescence\r, volts)\nocean_practical_salinity_1 (Salinity 1 (PSU PSS-78)\r, PSU)\nocean_practical_salinity_2 (Salinity 2 (PSU PSS-78)\r, PSU)\nocean_sigma_t (Sigma-T, kg m-3)\nsea_water_nutrient_bottle_number (Nutrients Niskin Bottle Number\r, number)\nsea_water_phosphate_concentration (PO4, micromoles/kg)\nsea_water_silicate_concentration (SI, micromoles/kg)\nsea_water_nitrate_concentration (NO3, micromoles/kg)\nsea_water_nitrite_concentration (NO2, micromoles/kg)\nsea_water_ammonium_concentration (NH4, micromoles/kg)\nocean_dissolved_oxygen_concentration_1_mMperkg (Dissolved Oxygen Concentration 1 mMoles/kg\r, micromoles/kg)\nocean_dissolved_oxygen_concentration_2_mMperkg (Dissolved Oxygen Concentration 2 mMoles/kg\r, micromoles/kg)\nocean_oxygen_saturation_1 (Oxygen Percent Saturation 1\r, percent saturation)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/ChukchiSea_454a_037a_fcf4_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/ChukchiSea_454a_037a_fcf4_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/ChukchiSea_454a_037a_fcf4/index.json", "www.ecofoci.noaa.gov", "http://upwell.pfeg.noaa.gov/erddap/rss/ChukchiSea_454a_037a_fcf4.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=ChukchiSea_454a_037a_fcf4&showErrors=false&email=", "PMEL EcoFOCI", "ChukchiSea_454a_037a_fcf4"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/arcticRescueData_e5bf_cef8_3f72.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/arcticRescueData_e5bf_cef8_3f72", "https://upwell.pfeg.noaa.gov/erddap/tabledap/arcticRescueData_e5bf_cef8_3f72.graph", "", "", "public", "PMEL EcoFOCI Early Arctic Data, 1986-1991", "Pacific Marine Environmental Laboratory (PMEL) Fisheries-Oceanography Cooperative Investigations (FOCI) Early Arctic Data, 1987 - 1991\n\ncdm_data_type = Profile\nVARIABLES:\nprof\nid (profile id)\ncast (cast number)\ncruise (Cruise name)\ntime (seconds since 1970-01-01T00:00:00Z)\nlongitude (station longitude, degrees_east)\nlon360 (station longitude 360, degrees_east)\nlatitude (station latitude, degrees_north)\ndepth (m)\nocean_temperature_1 (Temperature 1\r, Degree_C)\nocean_cox_salinity_1 (sea_water_practical_salinity, PSU)\nocean_practical_salinity_1 (Salinity 1 (PSU PSS-78)\r, PSU)\nocean_sigma_t (Sigma-T, kg m-3)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/arcticRescueData_e5bf_cef8_3f72_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/arcticRescueData_e5bf_cef8_3f72_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/arcticRescueData_e5bf_cef8_3f72/index.json", "www.ecofoci.noaa.gov", "http://upwell.pfeg.noaa.gov/erddap/rss/arcticRescueData_e5bf_cef8_3f72.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=arcticRescueData_e5bf_cef8_3f72&showErrors=false&email=", "PMEL EcoFOCI", "arcticRescueData_e5bf_cef8_3f72"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/Shelikof_line8_3695_0ada_d066.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/Shelikof_line8_3695_0ada_d066", "https://upwell.pfeg.noaa.gov/erddap/tabledap/Shelikof_line8_3695_0ada_d066.graph", "", "", "public", "PMEL EcoFOCI Shelikof Line 8 Data, 1981-open", "Pacific Marine Environmental Laboratory (PMEL) Fisheries-Oceanography Cooperative Investigations (FOCI) Shelikof Line 8 Data\n\ncdm_data_type = Profile\nVARIABLES:\nprof\nid (profile id)\ncast (cast number)\ncruise (Cruise name)\ntime (seconds since 1970-01-01T00:00:00Z)\nlongitude (station longitude, degrees_east)\nlon360 (station longitude 360, degrees_east)\nlatitude (station latitude, degrees_north)\ndepth (m)\nocean_temperature_1 (Temperature 1\r, Degree_C)\nocean_cox_salinity_1 (sea_water_practical_salinity, PSU)\nocean_chlorophyll_fluorescence_raw (Raw Chlorophyll Flourescence\r, volts)\nphotosynthetically_active_radiation (Photosynthetically Active Radiation\r, microEin cm-2 s-1)\nocean_sigma_t (Sigma-T, kg m-3)\nocean_chlorophyll_a_concentration_factoryCal (Chlorophyll a Concentration (Factory Calibration)\r, micrograms/L)\nocean_dissolved_oxygen_concentration_1_mMperkg (Dissolved Oxygen Concentration 1 mMoles/kg\r, micromoles/kg)\nocean_dissolved_oxygen_concentration_2_mMperkg (mole_concentration_of_dissolved_molecular_oxygen_in_sea_water, micromoles/kg)\nocean_dynamic_height (Dynamic Height, dynamic meters)\nocean_oxygen_saturation_1 (Oxygen Percent Saturation 1\r, percent saturation)\nocean_practical_salinity_1 (Salinity 1 (PSU PSS-78)\r, PSU)\nocean_practical_salinity_2 (Salinity 2 (PSU PSS-78)\r, PSU)\nocean_temperature_2 (Temperature 2\r, Degree_C)\nphotosynthetically_active_radiation_raw (Raw Photosynthetically Active Radiation\r, volts)\ntransmittance_percentage (Percent Light Transmittance, percent)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/Shelikof_line8_3695_0ada_d066_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/Shelikof_line8_3695_0ada_d066_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/Shelikof_line8_3695_0ada_d066/index.json", "www.ecofoci.noaa.gov", "http://upwell.pfeg.noaa.gov/erddap/rss/Shelikof_line8_3695_0ada_d066.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=Shelikof_line8_3695_0ada_d066&showErrors=false&email=", "PMEL EcoFOCI", "Shelikof_line8_3695_0ada_d066"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWDC9417nrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWDC9417nrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWDC9417nrt.graph", "", "", "public", "Research Ship Atlantic Explorer Underway Meteorological Data, Quality Controlled", "Research Ship Atlantic Explorer Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n flag=~\"ZZZ........Z.*\"\nin your query.\n'=~' indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data.\nThe '.'s say to match any character.\nThe '*' says to match the previous character 0 or more times.\n(Don't include backslashes in your query.)\nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\n... (19 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuResearchShipWDC9417nrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuResearchShipWDC9417nrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuResearchShipWDC9417nrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuResearchShipWDC9417nrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuResearchShipWDC9417nrt&showErrors=false&email=", "FSU", "fsuResearchShipWDC9417nrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipKAQP.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipKAQP", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipKAQP.graph", "", "", "public", "Research Ship Atlantis Underway Meteorological Data, Quality Controlled", "Research Ship Atlantis Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n flag=~\"ZZZ........Z.*\"\nin your query.\n'=~' indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data.\nThe '.'s say to match any character.\nThe '*' says to match the previous character 0 or more times.\n(Don't include backslashes in your query.)\nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\n... (33 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuResearchShipKAQP_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuResearchShipKAQP_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuResearchShipKAQP/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuResearchShipKAQP.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuResearchShipKAQP&showErrors=false&email=", "FSU", "fsuResearchShipKAQP"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipKAQPnrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipKAQPnrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipKAQPnrt.graph", "", "", "public", "Research Ship Atlantis Underway Meteorological Data, Quality Controlled", "Research Ship Atlantis Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n flag=~\"ZZZ........Z.*\"\nin your query.\n'=~' indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data.\nThe '.'s say to match any character.\nThe '*' says to match the previous character 0 or more times.\n(Don't include backslashes in your query.)\nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\n... (33 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuResearchShipKAQPnrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuResearchShipKAQPnrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuResearchShipKAQPnrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuResearchShipKAQPnrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuResearchShipKAQPnrt&showErrors=false&email=", "FSU", "fsuResearchShipKAQPnrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipNEPP.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipNEPP", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipNEPP.graph", "", "", "public", "Research Ship Healy Underway Meteorological Data, Quality Controlled", "Research Ship Healy Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n flag=~\"ZZZ........Z.*\"\nin your query.\n'=~' indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data.\nThe '.'s say to match any character.\nThe '*' says to match the previous character 0 or more times.\n(Don't include backslashes in your query.)\nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\n... (22 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuResearchShipNEPP_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuResearchShipNEPP_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuResearchShipNEPP/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuResearchShipNEPP.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuResearchShipNEPP&showErrors=false&email=", "FSU", "fsuResearchShipNEPP"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWDA7827nrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWDA7827nrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWDA7827nrt.graph", "", "", "public", "Research Ship Kilo Moana Underway Meteorological Data, Quality Controlled", "Research Ship Kilo Moana Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n flag=~\"ZZZ........Z.*\"\nin your query.\n'=~' indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data.\nThe '.'s say to match any character.\nThe '*' says to match the previous character 0 or more times.\n(Don't include backslashes in your query.)\nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\n... (20 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuResearchShipWDA7827nrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuResearchShipWDA7827nrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuResearchShipWDA7827nrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuResearchShipWDA7827nrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuResearchShipWDA7827nrt&showErrors=false&email=", "FSU", "fsuResearchShipWDA7827nrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipKCEJ.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipKCEJ", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipKCEJ.graph", "", "", "public", "Research Ship Knorr Underway Meteorological Data, Quality Controlled", "Research Ship Knorr Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n flag=~\"ZZZ........Z.*\"\nin your query.\n'=~' indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data.\nThe '.'s say to match any character.\nThe '*' says to match the previous character 0 or more times.\n(Don't include backslashes in your query.)\nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\n... (33 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuResearchShipKCEJ_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuResearchShipKCEJ_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuResearchShipKCEJ/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuResearchShipKCEJ.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuResearchShipKCEJ&showErrors=false&email=", "FSU", "fsuResearchShipKCEJ"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWCX7445nrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWCX7445nrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWCX7445nrt.graph", "", "", "public", "Research Ship Laurence M. Gould Underway Meteorological Data, Quality Controlled", "Research Ship Laurence M. Gould Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n flag=~\"ZZZ........Z.*\"\nin your query.\n'=~' indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data.\nThe '.'s say to match any character.\nThe '*' says to match the previous character 0 or more times.\n(Don't include backslashes in your query.)\nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\n... (21 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuResearchShipWCX7445nrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuResearchShipWCX7445nrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuResearchShipWCX7445nrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuResearchShipWCX7445nrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuResearchShipWCX7445nrt&showErrors=false&email=", "FSU", "fsuResearchShipWCX7445nrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWECBnrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWECBnrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWECBnrt.graph", "", "", "public", "Research Ship Melville Underway Meteorological Data, Quality Controlled", "Research Ship Melville Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n flag=~\"ZZZ........Z.*\"\nin your query.\n'=~' indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data.\nThe '.'s say to match any character.\nThe '*' says to match the previous character 0 or more times.\n(Don't include backslashes in your query.)\nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\n... (19 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuResearchShipWECBnrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuResearchShipWECBnrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuResearchShipWECBnrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuResearchShipWECBnrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuResearchShipWECBnrt&showErrors=false&email=", "FSU", "fsuResearchShipWECBnrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWBP3210.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWBP3210", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWBP3210.graph", "", "", "public", "Research Ship Nathaniel B. Palmer Underway Meteorological Data, Quality Controlled", "Research Ship Nathaniel B. Palmer Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n flag=~\"ZZZ........Z.*\"\nin your query.\n'=~' indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data.\nThe '.'s say to match any character.\nThe '*' says to match the previous character 0 or more times.\n(Don't include backslashes in your query.)\nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\n... (18 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuResearchShipWBP3210_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuResearchShipWBP3210_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuResearchShipWBP3210/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuResearchShipWBP3210.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuResearchShipWBP3210&showErrors=false&email=", "FSU", "fsuResearchShipWBP3210"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWBP3210nrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWBP3210nrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWBP3210nrt.graph", "", "", "public", "Research Ship Nathaniel B. Palmer Underway Meteorological Data, Quality Controlled", "Research Ship Nathaniel B. Palmer Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n flag=~\"ZZZ........Z.*\"\nin your query.\n'=~' indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data.\nThe '.'s say to match any character.\nThe '*' says to match the previous character 0 or more times.\n(Don't include backslashes in your query.)\nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\n... (18 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuResearchShipWBP3210nrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuResearchShipWBP3210nrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuResearchShipWBP3210nrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuResearchShipWBP3210nrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuResearchShipWBP3210nrt&showErrors=false&email=", "FSU", "fsuResearchShipWBP3210nrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWKWBnrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWKWBnrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWKWBnrt.graph", "", "", "public", "Research Ship New Horizon Underway Meteorological Data, Quality Controlled", "Research Ship New Horizon Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n flag=~\"ZZZ........Z.*\"\nin your query.\n'=~' indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data.\nThe '.'s say to match any character.\nThe '*' says to match the previous character 0 or more times.\n(Don't include backslashes in your query.)\nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\n... (25 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuResearchShipWKWBnrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuResearchShipWKWBnrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuResearchShipWKWBnrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuResearchShipWKWBnrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuResearchShipWKWBnrt&showErrors=false&email=", "FSU", "fsuResearchShipWKWBnrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWXAQ.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWXAQ", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWXAQ.graph", "", "", "public", "Research Ship Oceanus Underway Meteorological Data, Quality Controlled", "Research Ship Oceanus Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n flag=~\"ZZZ........Z.*\"\nin your query.\n'=~' indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data.\nThe '.'s say to match any character.\nThe '*' says to match the previous character 0 or more times.\n(Don't include backslashes in your query.)\nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\n... (29 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuResearchShipWXAQ_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuResearchShipWXAQ_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuResearchShipWXAQ/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuResearchShipWXAQ.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuResearchShipWXAQ&showErrors=false&email=", "FSU", "fsuResearchShipWXAQ"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWSQ2674nrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWSQ2674nrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipWSQ2674nrt.graph", "", "", "public", "Research Ship Robert Gordon Sproul Underway Meteorological Data, Quality Controlled", "Research Ship Robert Gordon Sproul Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n flag=~\"ZZZ........Z.*\"\nin your query.\n'=~' indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data.\nThe '.'s say to match any character.\nThe '*' says to match the previous character 0 or more times.\n(Don't include backslashes in your query.)\nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\n... (7 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuResearchShipWSQ2674nrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuResearchShipWSQ2674nrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuResearchShipWSQ2674nrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuResearchShipWSQ2674nrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuResearchShipWSQ2674nrt&showErrors=false&email=", "FSU", "fsuResearchShipWSQ2674nrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipKAOUnrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipKAOUnrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipKAOUnrt.graph", "", "", "public", "Research Ship Roger Revelle Underway Meteorological Data, Quality Controlled", "Research Ship Roger Revelle Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n flag=~\"ZZZ........Z.*\"\nin your query.\n'=~' indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data.\nThe '.'s say to match any character.\nThe '*' says to match the previous character 0 or more times.\n(Don't include backslashes in your query.)\nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\n... (20 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuResearchShipKAOUnrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuResearchShipKAOUnrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuResearchShipKAOUnrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuResearchShipKAOUnrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuResearchShipKAOUnrt&showErrors=false&email=", "FSU", "fsuResearchShipKAOUnrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipVLHJ.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipVLHJ", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipVLHJ.graph", "", "", "public", "Research Ship Southern Surveyor Underway Meteorological Data, Quality Controlled", "Research Ship Southern Surveyor Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n flag=~\"ZZZ........Z.*\"\nin your query.\n'=~' indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data.\nThe '.'s say to match any character.\nThe '*' says to match the previous character 0 or more times.\n(Don't include backslashes in your query.)\nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\n... (27 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuResearchShipVLHJ_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuResearchShipVLHJ_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuResearchShipVLHJ/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuResearchShipVLHJ.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuResearchShipVLHJ&showErrors=false&email=", "FSU", "fsuResearchShipVLHJ"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipKTDQnrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipKTDQnrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipKTDQnrt.graph", "", "", "public", "Research Ship T. G. Thompson Underway Meteorological Data, Quality Controlled", "Research Ship T. G. Thompson Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n flag=~\"ZZZ........Z.*\"\nin your query.\n'=~' indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data.\nThe '.'s say to match any character.\nThe '*' says to match the previous character 0 or more times.\n(Don't include backslashes in your query.)\nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\n... (17 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuResearchShipKTDQnrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuResearchShipKTDQnrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuResearchShipKTDQnrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuResearchShipKTDQnrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuResearchShipKTDQnrt&showErrors=false&email=", "FSU", "fsuResearchShipKTDQnrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipZMFRnrt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipZMFRnrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/fsuResearchShipZMFRnrt.graph", "", "", "public", "Research Ship Tangaroa Underway Meteorological Data, Quality Controlled", "Research Ship Tangaroa Underway Meteorological Data (delayed ~10 days for quality control) are from the Shipboard Automated Meteorological and Oceanographic System (SAMOS) program.\n\nIMPORTANT: ALWAYS USE THE QUALITY FLAG DATA! Each data variable's metadata includes a qcindex attribute which indicates a character number in the flag data.  ALWAYS check the flag data for each row of data to see which data is good (flag='Z') and which data isn't.  For example, to extract just data where time (qcindex=1), latitude (qcindex=2), longitude (qcindex=3), and airTemperature (qcindex=12) are 'good' data, include this constraint in your ERDDAP query:\n flag=~\"ZZZ........Z.*\"\nin your query.\n'=~' indicates this is a regular expression constraint.\nThe 'Z's are literal characters.  In this dataset, 'Z' indicates 'good' data.\nThe '.'s say to match any character.\nThe '*' says to match the previous character 0 or more times.\n(Don't include backslashes in your query.)\nSee the tutorial for regular expressions at\nhttps://www.vogella.com/tutorials/JavaRegularExpressions/article.html\n\ncdm_data_type = Point\nVARIABLES:\ncruise_id\nexpocode\nfacility\nID\nIMO\nplatform\nplatform_version\nsite\ntime (seconds since 1970-01-01T00:00:00Z)\nlatitude (degrees_north)\nlongitude (degrees_east)\n... (17 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/fsuResearchShipZMFRnrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/fsuResearchShipZMFRnrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/fsuResearchShipZMFRnrt/index.json", "https://samos.coaps.fsu.edu/html/", "http://upwell.pfeg.noaa.gov/erddap/rss/fsuResearchShipZMFRnrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=fsuResearchShipZMFRnrt&showErrors=false&email=", "FSU", "fsuResearchShipZMFRnrt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/FED_Rockfish_Catch.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/FED_Rockfish_Catch", "https://upwell.pfeg.noaa.gov/erddap/tabledap/FED_Rockfish_Catch.graph", "", "", "public", "Rockfish Recruitment and Ecosystem Assessment Survey, Catch Data", "The Fisheries Ecology Division (FED, https://swfsc.noaa.gov/GroundfishAnalysis/) of the Southwest Fisheries Science Center (SWFSC) has conducted a midwater trawl survey off central California since 1983 with the primary goal of developing pre-recruit indices for young-of-the-year (YOY) rockfish (Sebastes spp.). The survey also samples numerous other components of the epipelagic micronekton, including other YOY groundfish (such as Pacific hake, Merluccius productus, and sanddab, Citharichthys spp ), coastal pelagic fishes (such as Pacific sardine, Sardinops sagax, and northern anchovy, Engraulis mordax) and other forage species.  Additional details regarding the survey methods and results are described in Ralston et al. (2015) and Sakuma et al. (http://calcofi.org/publications/calcofireports/v57/Vol57-Sakuma_pages.163-183.pdf). Ralston, S., J.C. Field and K.S. Sakuma. 2015. Longterm variation in a central California pelagic forage assemblage. Journal of Marine Systems 146: 26-37. https://dx.doi.org/10.1016/j.jmarsys.2014.06.013. Sakuma, K.M., J.C. Field, B.B. Marinovic, C.N. Carrion, N.J. Mantua and S. Ralston. In revision. Anomalous epipelagic micronekton assemblage patterns in the neritic waters of the California Current in spring 2015 during a period of extreme ocean conditions. CalCOFI Reports.\n\ncdm_data_type = Point\nVARIABLES:\ntime (Net-in time, seconds since 1970-01-01T00:00:00Z)\nlatitude (Net-in Latitude, degrees_north)\nlongitude (Net-in Longitude, degrees_east)\ncruise\nhaul_no (Haul Number)\nvessel\nstation (Station Number)\ncatch\nspecies_code\ncommon_name\nsci_name (Scientific name)\nspecies_group\nmaturity\nspecies_notes\n... (14 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/FED_Rockfish_Catch_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/FED_Rockfish_Catch_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/FED_Rockfish_Catch/index.json", "http://calcofi.org/publications/calcofireports/v57/Vol57-Sakuma_pages.163-183.pdf", "http://upwell.pfeg.noaa.gov/erddap/rss/FED_Rockfish_Catch.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=FED_Rockfish_Catch&showErrors=false&email=", "NOAA NMFS SWFSC FED", "FED_Rockfish_Catch"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/rtcctdCMAysi", "https://upwell.pfeg.noaa.gov/erddap/tabledap/rtcctdCMAysi.graph", "", "", "public", "RTC Carqinez YSI Archived data", "Archived CMA data - unedited variable names\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\ntemperature (Water Temperature, degrees C)\nspcond (uS/cm)\ncond (uS/cm)\nresist (Ohm*cm)\nTDS (g/L)\nsalinity (ppt)\npressure (psir)\ndepth (m)\nph\nphmv (pH, mV)\nchl (ug/L)\nchlrfu (chl, RFU)\nturbid (Turbid+, NTU)\nodosat (%)\nodo (mg/L)\nbatt (battery, volts)\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/rtcctdCMAysi_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/rtcctdCMAysi_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/rtcctdCMAysi/index.json", "https://sfbeams.sfsu.edu/", "http://upwell.pfeg.noaa.gov/erddap/rss/rtcctdCMAysi.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=rtcctdCMAysi&showErrors=false&email=", "RTC", "rtcctdCMAysi"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/rtcctdCMAysirt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/rtcctdCMAysirt.graph", "", "", "public", "RTC Carqinez YSI Raw data", "Test of installing ERDDAP on top of YSI output.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\ntemperature (Water Temperature, degrees C)\nspcond (uS/cm)\ncond (uS/cm)\nresist (Ohm*cm)\nTDS (g/L)\nsalinity (ppt)\npressure (psir)\ndepth (m)\nph\nphmv (pH, mV)\nchl (ug/L)\nchlrfu (chl, RFU)\nturbid (Turbid+, NTU)\nodosat (%)\nodo (mg/L)\nbatt (battery, volts)\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/rtcctdCMAysirt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/rtcctdCMAysirt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/rtcctdCMAysirt/index.json", "https://sfbeams.sfsu.edu/", "http://upwell.pfeg.noaa.gov/erddap/rss/rtcctdCMAysirt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=rtcctdCMAysirt&showErrors=false&email=", "RTC", "rtcctdCMAysirt"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/rtcmet", "https://upwell.pfeg.noaa.gov/erddap/tabledap/rtcmet.graph", "", "", "public", "RTC MetStation Archived data", "Archived RTC Met data - unedited variable names\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\nAirT_AVG (Air Temperature, degrees C)\nRH (Relative Humidity, %)\nBP_AVG (Barometric Pressure, mbar)\nSlrW_AVG (watts s-1m-2)\nPAR_Den_AVG (\u00c2\u00b5mol s-1m-2)\nRain_TOT (mm)\nWS_S_WVT (m/s)\nWS_U_WVT (m/s)\nWindDir_DU_WVT (deg)\nWindDir_SDU_WVT (deg)\nWS_MAX (m/s)\nPAR_Den_2_AVG (\u00c2\u00b5mol s-1m-2)\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/rtcmet_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/rtcmet_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/rtcmet/index.json", "https://sfbeams.sfsu.edu/", "http://upwell.pfeg.noaa.gov/erddap/rss/rtcmet.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=rtcmet&showErrors=false&email=", "RTC", "rtcmet"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/rtcmetrt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/rtcmetrt.graph", "", "", "public", "RTC MetStation real time data", "Real Time RTC Met data - unedited variable names\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\nAirT_AVG (Air Temperature, degrees C)\nRH (Relative Humidity, %)\nBP_AVG (Barometric Pressure, mbar)\nSlrW_AVG (watts s-1m-2)\nPAR_Den_AVG (\u00b5mol s-1m-2)\nRain_TOT (mm)\nWS_S_WVT (m/s)\nWS_U_WVT (m/s)\nWindDir_DU_WVT (deg)\nWindDir_SDU_WVT (deg)\nWS_MAX (m/s)\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/rtcmetrt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/rtcmetrt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/rtcmetrt/index.json", "https://sfbeams.sfsu.edu/", "http://upwell.pfeg.noaa.gov/erddap/rss/rtcmetrt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=rtcmetrt&showErrors=false&email=", "RTC", "rtcmetrt"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/rtcctdSeabird", "https://upwell.pfeg.noaa.gov/erddap/tabledap/rtcctdSeabird.graph", "", "", "public", "RTC Seabird Archived data", "Archived RTC Seabird data - unedited variable names\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\ntemperature (Water Temperature, degrees C)\ncond (uS/cm)\npressure (psir)\nskufa1 (V)\nskufa2 (V)\nxmis (%)\npar (microMol*m-2*s-1)\nsalinity (pss)\nsigma (kg/m3)\ninst_SN (Instrument Serial Number)\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/rtcctdSeabird_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/rtcctdSeabird_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/rtcctdSeabird/index.json", "https://sfbeams.sfsu.edu/", "http://upwell.pfeg.noaa.gov/erddap/rss/rtcctdSeabird.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=rtcctdSeabird&showErrors=false&email=", "RTC", "rtcctdSeabird"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/rtcctdRTCysi", "https://upwell.pfeg.noaa.gov/erddap/tabledap/rtcctdRTCysi.graph", "", "", "public", "RTC YSI Archived data", "Archived RTC data - unedited variable names\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\ntemperature (Water Temperature, degrees C)\nspcond (uS/cm)\ncond (uS/cm)\nresist (Ohm*cm)\nTDS (g/L)\nsalinity (ppt)\npressure (psir)\ndepth (m)\nph\nphmv (pH, mV)\nchl (ug/L)\nchlrfu (chl, RFU)\nturbid (Turbid+, NTU)\nodosat (%)\nodo (mg/L)\nbatt (battery, volts)\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/rtcctdRTCysi_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/rtcctdRTCysi_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/rtcctdRTCysi/index.json", "https://sfbeams.sfsu.edu/", "http://upwell.pfeg.noaa.gov/erddap/rss/rtcctdRTCysi.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=rtcctdRTCysi&showErrors=false&email=", "RTC", "rtcctdRTCysi"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/rtcctdRTCysirt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/rtcctdRTCysirt.graph", "", "", "public", "RTC YSI Raw data", "Test of installing ERDDAP on top of YSI output.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (seconds since 1970-01-01T00:00:00Z)\ntemperature (Water Temperature, degrees C)\nspcond (uS/cm)\ncond (uS/cm)\nresist (Ohm*cm)\nTDS (g/L)\nsalinity (ppt)\npressure (psir)\ndepth (m)\nph\nphmv (pH, mV)\nchl (ug/L)\nchlrfu (chl, RFU)\nturbid (Turbid+, NTU)\nodosat (%)\nodo (mg/L)\nbatt (battery, volts)\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/rtcctdRTCysirt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/rtcctdRTCysirt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/rtcctdRTCysirt/index.json", "https://sfbeams.sfsu.edu/", "http://upwell.pfeg.noaa.gov/erddap/rss/rtcctdRTCysirt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=rtcctdRTCysirt&showErrors=false&email=", "RTC", "rtcctdRTCysirt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/gomoosBuoy.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/gomoosBuoy", "https://upwell.pfeg.noaa.gov/erddap/tabledap/gomoosBuoy.graph", "", "", "public", "Sensor Data from the GoMOOS SOS Server, 2000-present", "The OCEANS IE -- formally approved as an OGC Interoperability\nExperiment in December 2006 -- engages data managers and scientists\nin the Ocean-Observing community to advance their understanding and\napplication of various OGC specifications, solidify demonstrations\nfor Ocean Science application areas, harden software\nimplementations, and produce candidate OGC Best Practices documents\nthat can be used to inform the broader ocean-observing community.\n\nBecause of the nature of SOS requests, requests for data MUST\ninclude constraints for the longitude, latitude, time, and/or\nstation_id variables.\n\nInitiators: SURA (lead), Texas A&M University, MBARI, GoMOOS and\nUnidata.\n\nSpecific goals:\n* Compare Sensor Observation Service (SOS) from the OGC's Sensor\n  Web Enablement (SWE) initiative to the Web Feature Service (WFS)\n  as applied to ocean data in a variety of data formats including\n  text files, netCDF files, relational databases, and possibly\n  native sensor output; (see Experiment #1 for details)\n* Make use of semantic mediation via Semantic Web technologies to\n  allow plurality of identification for source types (platforms\n  and sensors) and phenomena types;\n* Test aggregation services and caching strategies to provide\n  efficient queries;\n* Explore possible enhancements of THREDDS server, so that THREDDS\n  resident data sources might be made available via SOS or WFS;\n\ncdm_data_type = TimeSeries\nVARIABLES:\nlongitude (degrees_east)\n... (19 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/gomoosBuoy_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/gomoosBuoy_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/gomoosBuoy/index.json", "https://tidesandcurrents.noaa.gov/gomoos.html", "http://upwell.pfeg.noaa.gov/erddap/rss/gomoosBuoy.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=gomoosBuoy&showErrors=false&email=", "GoMOOS", "gomoosBuoy"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/neracoosSos.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/neracoosSos", "https://upwell.pfeg.noaa.gov/erddap/tabledap/neracoosSos.graph", "", "", "public", "Sensor Data from the NERACOOS SOS Server, 2000-present", "Northeastern Regional Association of Coastal Ocean\n        Observing Systems (NERACOOS) Sensor Observation Service (SOS)\n        The OCEANS IE -- formally approved as an OGC Interoperability\nExperiment in December 2006 -- engages data managers and scientists\nin the Ocean-Observing community to advance their understanding and\napplication of various OGC specifications, solidify demonstrations\nfor Ocean Science application areas, harden software\nimplementations, and produce candidate OGC Best Practices documents\nthat can be used to inform the broader ocean-observing community.\n\nBecause of the nature of SOS requests, requests for data MUST\ninclude constraints for the longitude, latitude, time, and/or\nstation_id variables.\n\nInitiators: SURA (lead), Texas A&M University, MBARI, GoMOOS and\nUnidata.\n\nSpecific goals:\n* Compare Sensor Observation Service (SOS) from the OGC's Sensor\n  Web Enablement (SWE) initiative to the Web Feature Service (WFS)\n  as applied to ocean data in a variety of data formats including\n  text files, netCDF files, relational databases, and possibly\n  native sensor output; (see Experiment #1 for details)\n* Make use of semantic mediation via Semantic Web technologies to\n  allow plurality of identification for source types (platforms\n  and sensors) and phenomena types;\n* Test aggregation services and caching strategies to provide\n  efficient queries;\n* Explore possible enhancements of THREDDS server, so that THREDDS\n  resident data sources might be made available via SOS or WFS;\n\ncdm_data_type = TimeSeries\nVARIABLES:\nlongitude (degrees_east)\n... (19 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/neracoosSos_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/neracoosSos_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/neracoosSos/index.json", "http://www.neracoos.org/", "http://upwell.pfeg.noaa.gov/erddap/rss/neracoosSos.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=neracoosSos&showErrors=false&email=", "NERACOOS", "neracoosSos"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdFedRockfishCtd.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdFedRockfishCtd", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdFedRockfishCtd.graph", "", "", "public", "SWFSC FED Mid Water Trawl Juvenile Rockfish Survey, CTD Data, 1987-2015", "SWFSC FED Mid Water Trawl Juvenile Rockfish Survey: CTD Data.\nSurveys have been conducted along the central California coast in May/June \nevery year since 1983. In 2004 the survey area was expanded to cover the \nentire coast from San Diego to Cape Mendocino.  The survey samples a series \nof fixed trawl stations using a midwater trawl. The midwater trawl survey \ngear captures significant numbers of approximately 10 rockfish species during\ntheir pelagic juvenile stage (i.e., 50-150 days old), by which time annual\nreproductive success has been established. Catch-per-unit-effort data from\nthe survey are analyzed and serve as the basis for predicting future \nrecruitment to rockfish fisheries. Results for several species (e.g., \nbocaccio, chilipepper [S. goodei], and widow rockfish [S. entomelas]) have\nshown that the survey data can be useful in predicting year-class strength\nin age-based stock assessments.\n\nThe survey's data on YOY Pacific whiting has also been used in the stock\nassessment process. To assist in obtaining additional northward spatial\ncoverage of YOY Pacific whiting off Oregon and Washington, in 2001 the\nPacific Whiting Conservation Cooperative in cooperation with the NOAA NMFS\nNorthwest Fisheries Science Center began a midwater trawl survey patterned\nafter the NOAA NMFS SWFSC Fisheries Ecology Division's (FED) existing survey. \nBoth surveys work cooperatively together each year in order to resolve \ninterannual abundance patterns of YOY rockfish and Pacific whiting on a \ncoastwide basis, which provides expedient, critical information that can be \nused in the fisheries management process.\n\nThe large quantity of physical data collected during the surveys (e.g., CTD\nwith attached transimissometer and fluorometer, thermosalinometer, and ADCP)\nhave provided a better understanding of the hydrographic conditions off the\nCalifornia coast and analysis of these data have been distributed through the\npublication of NOAA NMFS Technical Memoranda.\n\nFor more information, see https://swfsc.noaa.gov/GroundfishAnalysis/ and\nhttp://www.sanctuarysimon.org/projects/project_info.php?projectID=100118\n\ncdm_data_type = TrajectoryProfile\nVARIABLES:\ncruise\n... (17 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdFedRockfishCtd_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdFedRockfishCtd_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdFedRockfishCtd/index.json", "https://swfsc.noaa.gov/GroundfishAnalysis/", "http://upwell.pfeg.noaa.gov/erddap/rss/erdFedRockfishCtd.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdFedRockfishCtd&showErrors=false&email=", "NOAA SWFSC FED", "erdFedRockfishCtd"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdFedRockfishStation.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdFedRockfishStation", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdFedRockfishStation.graph", "", "", "public", "SWFSC FED Mid Water Trawl Juvenile Rockfish Survey, Surface Data, 1987-2015", "SWFSC FED Mid Water Trawl Juvenile Rockfish Survey: Station Information and Surface Data.\nSurveys have been conducted along the central California coast in May/June \nevery year since 1983. In 2004 the survey area was expanded to cover the \nentire coast from San Diego to Cape Mendocino.  The survey samples a series \nof fixed trawl stations using a midwater trawl. The midwater trawl survey \ngear captures significant numbers of approximately 10 rockfish species during\ntheir pelagic juvenile stage (i.e., 50-150 days old), by which time annual\nreproductive success has been established. Catch-per-unit-effort data from\nthe survey are analyzed and serve as the basis for predicting future \nrecruitment to rockfish fisheries. Results for several species (e.g., \nbocaccio, chilipepper [S. goodei], and widow rockfish [S. entomelas]) have\nshown that the survey data can be useful in predicting year-class strength\nin age-based stock assessments.\n\nThe survey's data on YOY Pacific whiting has also been used in the stock\nassessment process. To assist in obtaining additional northward spatial\ncoverage of YOY Pacific whiting off Oregon and Washington, in 2001 the\nPacific Whiting Conservation Cooperative in cooperation with the NOAA NMFS\nNorthwest Fisheries Science Center began a midwater trawl survey patterned\nafter the NOAA NMFS SWFSC Fisheries Ecology Division's (FED) existing survey. \nBoth surveys work cooperatively together each year in order to resolve \ninterannual abundance patterns of YOY rockfish and Pacific whiting on a \ncoastwide basis, which provides expedient, critical information that can be \nused in the fisheries management process.\n\nThe large quantity of physical data collected during the surveys (e.g., CTD\nwith attached transimissometer and fluorometer, thermosalinometer, and ADCP)\nhave provided a better understanding of the hydrographic conditions off the\nCalifornia coast and analysis of these data have been distributed through the\npublication of NOAA NMFS Technical Memoranda.\n\nFor more information, see https://swfsc.noaa.gov/GroundfishAnalysis/ and\nhttp://www.sanctuarysimon.org/projects/project_info.php?projectID=100118\n\ncdm_data_type = Trajectory\nVARIABLES:\ncruise\n... (11 more variables)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdFedRockfishStation_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdFedRockfishStation_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdFedRockfishStation/index.json", "https://swfsc.noaa.gov/GroundfishAnalysis/", "http://upwell.pfeg.noaa.gov/erddap/rss/erdFedRockfishStation.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdFedRockfishStation&showErrors=false&email=", "NOAA SWFSC FED", "erdFedRockfishStation"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdPrdCtd.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdPrdCtd", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdPrdCtd.graph", "", "", "public", "SWFSC Protected Resources Division CTD Data", "Data from NOAA SWFSC Protected Resources Division (PRD).\n\ncdm_data_type = Trajectory\nVARIABLES:\ntrajectory\nship_station (Ship and Station)\nlongitude (degrees_east)\nlatitude (degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\nchloro (Surface Chlorophyll, ug L-1)\nphaeo (Surface Phaeophytin, ug L-1)\nproductivity (Integrated Euphotic Zone Productivity, mg Carbon m-2 day-1)\nsst (Sea Surface Temperature, degree_C)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdPrdCtd_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdPrdCtd_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdPrdCtd/index.json", "https://swfsc.noaa.gov/main.aspx?Division=PRD&ParentMenuId=147&id=1221", "http://upwell.pfeg.noaa.gov/erddap/rss/erdPrdCtd.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdPrdCtd&showErrors=false&email=", "NOAA SWFSC PRD", "erdPrdCtd"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayIso.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayIso", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayIso.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1977-present, 20C Isotherm Depth", "This dataset has 5-day 20C Isotherm Depth data (the depth at which the ocean temperature is 20C) from the \nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nISO_6 (20C Isotherm Depth, m)\nQI_5006 (20C Depth Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayIso_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayIso_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayIso/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayIso.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayIso&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayIso"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayAirt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayAirt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayAirt.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1977-present, Air Temperature", "This dataset has 5-day Air Temperature data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nAT_21 (Air Temperature, degree_C)\nQAT_5021 (Air Temperature Quality)\nSAT_6021 (Air Temperature Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayAirt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayAirt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayAirt/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayAirt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayAirt&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayAirt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayCur.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayCur", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayCur.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1977-present, Currents", "This dataset has 5-day Currents data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nU_320 (Eastward Sea Water Velocity, cm s-1)\nV_321 (Northward Sea Water Velocity, cm s-1)\nCS_300 (Sea Water Velocity, cm s-1)\nCD_310 (Direction of Sea Water Velocity, degrees_true)\nQCS_5300 (Current Speed Quality)\nQCD_5310 (Current Direction Quality)\nSCS_6300 (Current Speed Source)\nCIC_7300 (Current Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayCur_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayCur_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayCur/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayCur.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayCur&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayCur"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5daySst.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5daySst", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5daySst.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1977-present, Sea Surface Temperature", "This dataset has 5-day Sea Surface Temperature (SST) data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nT_25 (Sea Surface Temperature, degree_C)\nQT_5025 (Sea Surface Temperature Quality)\nST_6025 (Sea Surface Temperature Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5daySst_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5daySst_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5daySst/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5daySst.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5daySst&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5daySst"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayT.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayT", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayT.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1977-present, Temperature", "This dataset has 5-day Temperature data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nT_20 (Sea Water Temperature, degree_C)\nQT_5020 (Temperature Quality)\nST_6020 (Temperature Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayT_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayT_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayT/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayT.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayT&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayT"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayW.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayW", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayW.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1977-present, Wind", "This dataset has 5-day Wind data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nWU_422 (Zonal Wind, m s-1)\nWV_423 (Meridional Wind, m s-1)\nWS_401 (Wind Speed, m s-1)\nQWS_5401 (Wind Speed Quality)\nSWS_6401 (Wind Speed Source)\nWD_410 (Wind Direction, degrees_true)\nQWD_5410 (Wind Direction Quality)\nSWD_6410 (Wind Direction Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayW_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayW_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayW/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayW.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayW&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayW"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayDyn.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayDyn", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayDyn.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1980-present, Dynamic Height", "This dataset has 5-day Dynamic Height data (a measure of the elevation of the sea level, calculated by integrating the specific volume anomaly of the sea water between the sea surface and 500 m depth) from the \nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nDYN_13 (Dynamic Height, dyn-cm)\nQD_5013 (Dynamic Height Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayDyn_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayDyn_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayDyn/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayDyn.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayDyn&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayDyn"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayHeat.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayHeat", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayHeat.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1980-present, Heat Content", "This dataset has 5-day Heat Content data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nHTC_130 (Heat Content, 10**10 J m-2)\nHTC_5130 (Heat Content Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayHeat_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayHeat_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayHeat/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayHeat.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayHeat&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayHeat"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayPos.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayPos", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayPos.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1980-present, Position", "This dataset has 5-day Position data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nLON_502 (Precise Longitude, degree_east)\nQX_5502 (Longitude Quality)\nLAT_500 (Precise Latitude, degree_north)\nQY_5500 (Latitude Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayPos_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayPos_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayPos/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayPos.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayPos&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayPos"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayD.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayD", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayD.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1987-present, Potential Density Anomaly", "This dataset has 5-day Potential Density Anomaly (sigma-theta) data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nSTH_71 (Sigma-Theta, kg m-3)\nQST_5071 (Sigma-Theta Quality)\nSST_6071 (Sigma-Theta Source)\nDIC_7071 (Sigma-Theta Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayD_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayD_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayD/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayD.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayD&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayD"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayS.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayS", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayS.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1987-present, Salinity", "This dataset has 5-day Salinity data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nS_41 (Sea Water Practical Salinity, PSU)\nQS_5041 (Salinity Quality)\nSS_6041 (Salinity Source)\nSIC_8041 (Salinity Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayS_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayS_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayS/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayS.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayS&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayS"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayAdcp.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayAdcp", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayAdcp.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1988-2017, ADCP", "This dataset has 5-day Acoustic Doppler Current Profiler (ADCP) water currents data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  ADCP data are available only after mooring recoveries, which are scheduled on an annual basis.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nu_1205 (Eastward Sea Water Velocity, cm/s)\nQU_5205 (Eastward Sea Water Velocity Quality)\nv_1206 (Northward Sea Water Velocity, cm/s)\nQV_5206 (Northward Sea Water Velocity Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayAdcp_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayAdcp_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayAdcp/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayAdcp.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayAdcp&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayAdcp"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayEvap.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayEvap", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayEvap.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1989-present, Evaporation", "This dataset has 5-day Evaporation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nE_250 (Evaporation, MM/HR)\nQE_5250 (Evaporation Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayEvap_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayEvap_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayEvap/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayEvap.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayEvap&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayEvap"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayQlat.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayQlat", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayQlat.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1989-present, Latent Heat Flux", "This dataset has 5-day Latent Heat Flux data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQL_137 (Latent Heat Flux, W m-2)\nQQL_5137 (Latent Heat Flux Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayQlat_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayQlat_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayQlat/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayQlat.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayQlat&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayQlat"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayRh.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayRh", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayRh.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1989-present, Relative Humidity", "This dataset has 5-day Relative Humidity data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nRH_910 (Relative Humidity, percent)\nQRH_5910 (Relative Humidity Quality)\nSRH_6910 (Relative Humidity Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayRh_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayRh_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayRh/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayRh.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayRh&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayRh"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayQsen.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayQsen", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayQsen.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1989-present, Sensible Heat Flux", "This dataset has 5-day Sensible Heat Flux data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQS_138 (Sensible Heat Flux, W m-2)\nQQS_5138 (Sensible Heat Flux Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayQsen_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayQsen_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayQsen/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayQsen.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayQsen&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayQsen"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayTau.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayTau", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayTau.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1989-present, Wind Stress", "This dataset has 5-day Wind Stress data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nTX_442 (Zonal Wind Stress, N/m2)\nTY_443 (Meridional Wind Stress, N/m2)\nTAU_440 (Wind Stress, N/m2)\nTD_445 (Wind Stress Direction, degrees_true)\nQTAU_5440 (Wind Stress Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayTau_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayTau_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayTau/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayTau.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayTau&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayTau"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayRad.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayRad", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayRad.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1991-present, Downgoing Shortwave Radiation", "This dataset has 5-day Downgoing Shortwave Radiation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nRD_495 (Downgoing Shortwave Radiation, W/M**2)\nQSW_5495 (Shortwave Radiation Quality)\nSSW_6495 (Shortwave Radiation Source)\nRDS_496 (Shortwave Radiation Standard Deviation, W/M**2)\nRDP_497 (Shortwave Radiation Peak, W/M**2)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayRad_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayRad_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayRad/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayRad.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayRad&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayRad"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5daySwnet.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5daySwnet", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5daySwnet.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1991-present, Net Shortwave Radiation", "This dataset has 5-day Net Shortwave Radiation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nSWN_1495 (Net Shortwave Radiation, W/M**2)\nQSW_5495 (Shortwave Radiation Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5daySwnet_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5daySwnet_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5daySwnet/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5daySwnet.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5daySwnet&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5daySwnet"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5daySss.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5daySss", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5daySss.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1992-present, Sea Surface Salinity", "This dataset has 5-day Sea Surface Salinity data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nS_41 (Sea Water Practical Salinity, PSU)\nQS_5041 (Salinity Quality)\nSS_6041 (Salinity Source)\nSIC_7041 (Salinity Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5daySss_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5daySss_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5daySss/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5daySss.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5daySss&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5daySss"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5daySsd.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5daySsd", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5daySsd.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1992-present, Sigma-Theta", "This dataset has 5-day Sigma-Theta (Potential Density Anomaly) data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nSTH_71 (Sigma-Theta, kg m-3)\nQST_5071 (Sigma-Theta Quality)\nSST_6071 (Sigma-Theta Source)\nDIC_7071 (Sigma-Theta Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5daySsd_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5daySsd_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5daySsd/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5daySsd.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5daySsd&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5daySsd"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayEmp.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayEmp", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayEmp.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1997-present, Evaporation Minus Precipitation", "This dataset has 5-day Evaporation Minus Precipitation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nEMP_251 (Evaporation Minus Precipitation, mm/hr)\nQEMP_5251 (Evaporation Minus Precipitation Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayEmp_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayEmp_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayEmp/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayEmp.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayEmp&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayEmp"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayRf.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayRf", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayRf.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1997-present, Heat Flux Due To Rain", "This dataset has 5-day Heat Flux Due To Rain data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQR_139 (Heat Flux Due To Rain, W m-2)\nQQR_5139 (Heat Flux Due To Rain Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayRf_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayRf_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayRf/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayRf.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayRf&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayRf"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayRain.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayRain", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayRain.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1997-present, Precipitation", "This dataset has 5-day Precipitation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nRN_485 (Precipitation, MM/HR)\nQRN_5485 (Precipitation Quality)\nSRN_6485 (Precipitation Source)\nRNS_486 (Precipitation Standard Deviation, MM/HR)\nRNP_487 (Percent Time Raining, percent)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayRain_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayRain_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayRain/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayRain.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayRain&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayRain"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayBp.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayBp", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayBp.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 1998-present, Barometric (Air) Pressure", "This dataset has 5-day Barometric (Air) Pressure data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nBP_915 (Barometric (Air) Pressure, hPa)\nQBP_5915 (Barometric (Air) Pressure Quality)\nSBP_6915 (Barometric (Air) Pressure Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayBp_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayBp_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayBp/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayBp.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayBp&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayBp"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayBf.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayBf", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayBf.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 2000-present, Buoyancy Flux", "This dataset has 5-day Buoyancy Flux data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nBF_191 (Buoyancy Flux, 10**6 kg m-2 s-1)\nQBF_5191 (Buoyancy Flux Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayBf_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayBf_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayBf/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayBf.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayBf&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayBf"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayLw.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayLw", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayLw.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 2000-present, Longwave Radiation", "This dataset has 5-day Incoming Longwave Radiation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQl_136 (Incoming Longwave Radiation, W m-2)\nQLW_5136 (Longwave Radiation Quality)\nSLW_6136 (Longwave Radiation Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayLw_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayLw_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayLw/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayLw.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayLw&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayLw"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayLwnet.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayLwnet", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayLwnet.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 2000-present, Net Longwave Radiation", "This dataset has 5-day Net Longwave Radiation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nLWN_1136 (Net Longwave Radiation, W m-2)\nQLW_5136 (Longwave Radiation Quality)\nSLW_6136 (Longwave Radiation Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayLwnet_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayLwnet_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayLwnet/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayLwnet.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayLwnet&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayLwnet"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayQnet.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayQnet", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTao5dayQnet.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, 5-Day, 2000-present, Total Heat Flux", "This dataset has 5-day Total Heat Flux data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  5-day data is an average of daily values collected during consecutive five day intervals.  A minimum of 2 daily values are required to compute a 5-day average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQT_210 (Total Heat Flux, W/M**2)\nQQ0_5210 (Total Heat Flux Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTao5dayQnet_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTao5dayQnet_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTao5dayQnet/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTao5dayQnet.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTao5dayQnet&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTao5dayQnet"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyIso.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyIso", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyIso.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1977-present, 20C Isotherm Depth", "This dataset has daily 20C Isotherm Depth data (the depth at which the ocean temperature is 20C) from the \nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nISO_6 (20C Isotherm Depth, m)\nQI_5006 (20C Depth Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyIso_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyIso_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyIso/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyIso.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyIso&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyIso"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyAirt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyAirt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyAirt.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1977-present, Air Temperature", "This dataset has daily Air Temperature data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nAT_21 (Air Temperature, degree_C)\nQAT_5021 (Air Temperature Quality)\nSAT_6021 (Air Temperature Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyAirt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyAirt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyAirt/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyAirt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyAirt&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyAirt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyCur.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyCur", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyCur.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1977-present, Currents", "This dataset has daily Currents data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nU_320 (Eastward Sea Water Velocity, cm s-1)\nV_321 (Northward Sea Water Velocity, cm s-1)\nCS_300 (Sea Water Velocity, cm s-1)\nCD_310 (Direction of Sea Water Velocity, degrees_true)\nQCS_5300 (Current Speed Quality)\nQCD_5310 (Current Direction Quality)\nSCS_6300 (Current Speed Source)\nCIC_7300 (Current Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyCur_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyCur_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyCur/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyCur.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyCur&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyCur"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDySst.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDySst", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDySst.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1977-present, Sea Surface Temperature", "This dataset has daily Sea Surface Temperature (SST) data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nT_25 (Sea Surface Temperature, degree_C)\nQT_5025 (Sea Surface Temperature Quality)\nST_6025 (Sea Surface Temperature Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDySst_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDySst_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDySst/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDySst.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDySst&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDySst"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyT.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyT", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyT.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1977-present, Temperature", "This dataset has daily Temperature data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nT_20 (Sea Water Temperature, degree_C)\nQT_5020 (Temperature Quality)\nST_6020 (Temperature Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyT_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyT_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyT/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyT.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyT&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyT"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyW.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyW", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyW.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1977-present, Wind", "This dataset has daily Wind data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nWU_422 (Zonal Wind, m s-1)\nWV_423 (Meridional Wind, m s-1)\nWS_401 (Wind Speed, m s-1)\nQWS_5401 (Wind Speed Quality)\nSWS_6401 (Wind Speed Source)\nWD_410 (Wind Direction, degrees_true)\nQWD_5410 (Wind Direction Quality)\nSWD_6410 (Wind Direction Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyW_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyW_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyW/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyW.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyW&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyW"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyDyn.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyDyn", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyDyn.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1980-present, Dynamic Height", "This dataset has daily Dynamic Height data (a measure of the elevation of the sea level, calculated by integrating the specific volume anomaly of the sea water between the sea surface and 500 m depth) from the \nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nDYN_13 (Dynamic Height, dyn-cm)\nQD_5013 (Dynamic Height Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyDyn_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyDyn_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyDyn/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyDyn.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyDyn&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyDyn"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyHeat.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyHeat", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyHeat.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1980-present, Heat Content", "This dataset has daily Heat Content data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nHTC_130 (Heat Content, 10**10 J m-2)\nHTC_5130 (Heat Content Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyHeat_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyHeat_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyHeat/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyHeat.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyHeat&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyHeat"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyPos.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyPos", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyPos.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1980-present, Position", "This dataset has daily Position data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nLON_502 (Precise Longitude, degree_east)\nQX_5502 (Longitude Quality)\nLAT_500 (Precise Latitude, degree_north)\nQY_5500 (Latitude Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyPos_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyPos_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyPos/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyPos.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyPos&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyPos"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyD.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyD", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyD.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1987-present, Potential Density Anomaly", "This dataset has daily Potential Density Anomaly (sigma-theta) data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nSTH_71 (Sigma-Theta, kg m-3)\nQST_5071 (Sigma-Theta Quality)\nSST_6071 (Sigma-Theta Source)\nDIC_7071 (Sigma-Theta Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyD_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyD_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyD/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyD.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyD&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyD"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyS.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyS", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyS.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1987-present, Salinity", "This dataset has daily Salinity data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nS_41 (Sea Water Practical Salinity, PSU)\nQS_5041 (Salinity Quality)\nSS_6041 (Salinity Source)\nSIC_8041 (Salinity Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyS_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyS_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyS/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyS.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyS&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyS"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyAdcp.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyAdcp", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyAdcp.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1988-2017, ADCP", "This dataset has daily Acoustic Doppler Current Profiler (ADCP) water currents data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  ADCP data are available only after mooring recoveries, which are scheduled on an annual basis.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nu_1205 (Eastward Sea Water Velocity, cm/s)\nQU_5205 (Eastward Sea Water Velocity Quality)\nv_1206 (Northward Sea Water Velocity, cm/s)\nQV_5206 (Northward Sea Water Velocity Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyAdcp_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyAdcp_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyAdcp/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyAdcp.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyAdcp&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyAdcp"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyEvap.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyEvap", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyEvap.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1989-present, Evaporation", "This dataset has daily Evaporation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nE_250 (Evaporation, MM/HR)\nQE_5250 (Evaporation Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyEvap_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyEvap_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyEvap/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyEvap.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyEvap&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyEvap"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyQlat.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyQlat", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyQlat.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1989-present, Latent Heat Flux", "This dataset has daily Latent Heat Flux data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQL_137 (Latent Heat Flux, W m-2)\nQQL_5137 (Latent Heat Flux Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyQlat_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyQlat_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyQlat/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyQlat.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyQlat&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyQlat"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyRh.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyRh", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyRh.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1989-present, Relative Humidity", "This dataset has daily Relative Humidity data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nRH_910 (Relative Humidity, percent)\nQRH_5910 (Relative Humidity Quality)\nSRH_6910 (Relative Humidity Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyRh_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyRh_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyRh/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyRh.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyRh&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyRh"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyQsen.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyQsen", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyQsen.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1989-present, Sensible Heat Flux", "This dataset has daily Sensible Heat Flux data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQS_138 (Sensible Heat Flux, W m-2)\nQQS_5138 (Sensible Heat Flux Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyQsen_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyQsen_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyQsen/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyQsen.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyQsen&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyQsen"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyTau.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyTau", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyTau.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1989-present, Wind Stress", "This dataset has daily Wind Stress data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nTX_442 (Zonal Wind Stress, N/m2)\nTY_443 (Meridional Wind Stress, N/m2)\nTAU_440 (Wind Stress, N/m2)\nTD_445 (Wind Stress Direction, degrees_true)\nQTAU_5440 (Wind Stress Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyTau_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyTau_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyTau/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyTau.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyTau&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyTau"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyRad.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyRad", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyRad.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1991-present, Downgoing Shortwave Radiation", "This dataset has daily Downgoing Shortwave Radiation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nRD_495 (Downgoing Shortwave Radiation, W/M**2)\nQSW_5495 (Shortwave Radiation Quality)\nSSW_6495 (Shortwave Radiation Source)\nRDS_496 (Shortwave Radiation Standard Deviation, W/M**2)\nRDP_497 (Shortwave Radiation Peak, W/M**2)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyRad_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyRad_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyRad/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyRad.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyRad&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyRad"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDySwnet.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDySwnet", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDySwnet.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1991-present, Net Shortwave Radiation", "This dataset has daily Net Shortwave Radiation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nSWN_1495 (Net Shortwave Radiation, W/M**2)\nQSW_5495 (Shortwave Radiation Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDySwnet_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDySwnet_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDySwnet/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDySwnet.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDySwnet&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDySwnet"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDySss.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDySss", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDySss.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1992-present, Sea Surface Salinity", "This dataset has daily Sea Surface Salinity data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nS_41 (Sea Water Practical Salinity, PSU)\nQS_5041 (Salinity Quality)\nSS_6041 (Salinity Source)\nSIC_7041 (Salinity Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDySss_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDySss_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDySss/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDySss.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDySss&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDySss"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDySsd.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDySsd", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDySsd.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1992-present, Sigma-Theta", "This dataset has daily Sigma-Theta (Potential Density Anomaly) data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nSTH_71 (Sigma-Theta, kg m-3)\nQST_5071 (Sigma-Theta Quality)\nSST_6071 (Sigma-Theta Source)\nDIC_7071 (Sigma-Theta Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDySsd_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDySsd_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDySsd/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDySsd.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDySsd&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDySsd"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyEmp.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyEmp", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyEmp.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1997-present, Evaporation Minus Precipitation", "This dataset has daily Evaporation Minus Precipitation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nEMP_251 (Evaporation Minus Precipitation, mm/hr)\nQEMP_5251 (Evaporation Minus Precipitation Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyEmp_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyEmp_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyEmp/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyEmp.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyEmp&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyEmp"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyRf.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyRf", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyRf.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1997-present, Heat Flux Due To Rain", "This dataset has daily Heat Flux Due To Rain data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQR_139 (Heat Flux Due To Rain, W m-2)\nQQR_5139 (Heat Flux Due To Rain Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyRf_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyRf_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyRf/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyRf.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyRf&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyRf"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyRain.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyRain", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyRain.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1997-present, Precipitation", "This dataset has daily Precipitation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nRN_485 (Precipitation, MM/HR)\nQRN_5485 (Precipitation Quality)\nSRN_6485 (Precipitation Source)\nRNS_486 (Precipitation Standard Deviation, MM/HR)\nRNP_487 (Percent Time Raining, percent)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyRain_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyRain_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyRain/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyRain.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyRain&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyRain"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyBp.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyBp", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyBp.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 1998-present, Barometric (Air) Pressure", "This dataset has daily Barometric (Air) Pressure data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nBP_915 (Barometric (Air) Pressure, hPa)\nQBP_5915 (Barometric (Air) Pressure Quality)\nSBP_6915 (Barometric (Air) Pressure Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyBp_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyBp_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyBp/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyBp.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyBp&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyBp"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyBf.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyBf", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyBf.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 2000-present, Buoyancy Flux", "This dataset has daily Buoyancy Flux data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nBF_191 (Buoyancy Flux, 10**6 kg m-2 s-1)\nQBF_5191 (Buoyancy Flux Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyBf_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyBf_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyBf/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyBf.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyBf&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyBf"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyLw.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyLw", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyLw.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 2000-present, Longwave Radiation", "This dataset has daily Incoming Longwave Radiation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQl_136 (Incoming Longwave Radiation, W m-2)\nQLW_5136 (Longwave Radiation Quality)\nSLW_6136 (Longwave Radiation Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyLw_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyLw_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyLw/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyLw.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyLw&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyLw"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyLwnet.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyLwnet", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyLwnet.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 2000-present, Net Longwave Radiation", "This dataset has daily Net Longwave Radiation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nLWN_1136 (Net Longwave Radiation, W m-2)\nQLW_5136 (Longwave Radiation Quality)\nSLW_6136 (Longwave Radiation Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyLwnet_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyLwnet_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyLwnet/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyLwnet.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyLwnet&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyLwnet"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyQnet.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyQnet", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoDyQnet.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Daily, 2000-present, Total Heat Flux", "This dataset has daily Total Heat Flux data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Daily averages are computed starting at 00:00Z and are assigned an observation 'time' of 12:00Z.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQT_210 (Total Heat Flux, W/M**2)\nQQ0_5210 (Total Heat Flux Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoDyQnet_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoDyQnet_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoDyQnet/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoDyQnet.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoDyQnet&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoDyQnet"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonIso.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonIso", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonIso.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1977-present, 20C Isotherm Depth", "This dataset has monthly 20C Isotherm Depth data (the depth at which the ocean temperature is 20C) from the \nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nISO_6 (20C Isotherm Depth, m)\nQI_5006 (20C Depth Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonIso_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonIso_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonIso/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonIso.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonIso&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonIso"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonAirt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonAirt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonAirt.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1977-present, Air Temperature", "This dataset has monthly Air Temperature data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nAT_21 (Air Temperature, degree_C)\nQAT_5021 (Air Temperature Quality)\nSAT_6021 (Air Temperature Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonAirt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonAirt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonAirt/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonAirt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonAirt&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonAirt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonCur.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonCur", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonCur.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1977-present, Currents", "This dataset has monthly Currents data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nU_320 (Eastward Sea Water Velocity, cm s-1)\nV_321 (Northward Sea Water Velocity, cm s-1)\nCS_300 (Sea Water Velocity, cm s-1)\nCD_310 (Direction of Sea Water Velocity, degrees_true)\nQCS_5300 (Current Speed Quality)\nQCD_5310 (Current Direction Quality)\nSCS_6300 (Current Speed Source)\nCIC_7300 (Current Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonCur_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonCur_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonCur/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonCur.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonCur&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonCur"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonSst.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonSst", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonSst.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1977-present, Sea Surface Temperature", "This dataset has monthly Sea Surface Temperature (SST) data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nT_25 (Sea Surface Temperature, degree_C)\nQT_5025 (Sea Surface Temperature Quality)\nST_6025 (Sea Surface Temperature Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonSst_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonSst_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonSst/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonSst.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonSst&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonSst"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonT.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonT", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonT.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1977-present, Temperature", "This dataset has monthly Temperature data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nT_20 (Sea Water Temperature, degree_C)\nQT_5020 (Temperature Quality)\nST_6020 (Temperature Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonT_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonT_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonT/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonT.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonT&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonT"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonW.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonW", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonW.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1977-present, Wind", "This dataset has monthly Wind data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nWU_422 (Zonal Wind, m s-1)\nWV_423 (Meridional Wind, m s-1)\nWS_401 (Wind Speed, m s-1)\nQWS_5401 (Wind Speed Quality)\nSWS_6401 (Wind Speed Source)\nWD_410 (Wind Direction, degrees_true)\nQWD_5410 (Wind Direction Quality)\nSWD_6410 (Wind Direction Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonW_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonW_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonW/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonW.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonW&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonW"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonDyn.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonDyn", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonDyn.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1980-present, Dynamic Height", "This dataset has monthly Dynamic Height data (a measure of the elevation of the sea level, calculated by integrating the specific volume anomaly of the sea water between the sea surface and 500 m depth) from the \nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nDYN_13 (Dynamic Height, dyn-cm)\nQD_5013 (Dynamic Height Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonDyn_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonDyn_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonDyn/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonDyn.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonDyn&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonDyn"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonHeat.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonHeat", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonHeat.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1980-present, Heat Content", "This dataset has monthly Heat Content data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nHTC_130 (Heat Content, 10**10 J m-2)\nHTC_5130 (Heat Content Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonHeat_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonHeat_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonHeat/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonHeat.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonHeat&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonHeat"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonPos.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonPos", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonPos.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1980-present, Position", "This dataset has monthly Position data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nLON_502 (Precise Longitude, degree_east)\nQX_5502 (Longitude Quality)\nLAT_500 (Precise Latitude, degree_north)\nQY_5500 (Latitude Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonPos_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonPos_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonPos/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonPos.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonPos&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonPos"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonD.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonD", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonD.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1987-present, Potential Density Anomaly", "This dataset has monthly Potential Density Anomaly (sigma-theta) data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nSTH_71 (Sigma-Theta, kg m-3)\nQST_5071 (Sigma-Theta Quality)\nSST_6071 (Sigma-Theta Source)\nDIC_7071 (Sigma-Theta Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonD_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonD_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonD/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonD.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonD&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonD"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonS.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonS", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonS.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1987-present, Salinity", "This dataset has monthly Salinity data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nS_41 (Sea Water Practical Salinity, PSU)\nQS_5041 (Salinity Quality)\nSS_6041 (Salinity Source)\nSIC_8041 (Salinity Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonS_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonS_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonS/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonS.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonS&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonS"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonAdcp.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonAdcp", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonAdcp.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1988-2017, ADCP", "This dataset has monthly Acoustic Doppler Current Profiler (ADCP) water currents data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  ADCP data are available only after mooring recoveries, which are scheduled on an annual basis.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nu_1205 (Eastward Sea Water Velocity, cm/s)\nQU_5205 (Eastward Sea Water Velocity Quality)\nv_1206 (Northward Sea Water Velocity, cm/s)\nQV_5206 (Northward Sea Water Velocity Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonAdcp_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonAdcp_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonAdcp/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonAdcp.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonAdcp&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonAdcp"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonEvap.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonEvap", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonEvap.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1989-present, Evaporation", "This dataset has monthly Evaporation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nE_250 (Evaporation, MM/HR)\nQE_5250 (Evaporation Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonEvap_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonEvap_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonEvap/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonEvap.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonEvap&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonEvap"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonQlat.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonQlat", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonQlat.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1989-present, Latent Heat Flux", "This dataset has monthly Latent Heat Flux data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQL_137 (Latent Heat Flux, W m-2)\nQQL_5137 (Latent Heat Flux Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonQlat_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonQlat_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonQlat/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonQlat.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonQlat&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonQlat"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonRh.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonRh", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonRh.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1989-present, Relative Humidity", "This dataset has monthly Relative Humidity data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nRH_910 (Relative Humidity, percent)\nQRH_5910 (Relative Humidity Quality)\nSRH_6910 (Relative Humidity Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonRh_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonRh_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonRh/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonRh.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonRh&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonRh"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonQsen.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonQsen", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonQsen.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1989-present, Sensible Heat Flux", "This dataset has monthly Sensible Heat Flux data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQS_138 (Sensible Heat Flux, W m-2)\nQQS_5138 (Sensible Heat Flux Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonQsen_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonQsen_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonQsen/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonQsen.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonQsen&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonQsen"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonTau.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonTau", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonTau.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1989-present, Wind Stress", "This dataset has monthly Wind Stress data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nTX_442 (Zonal Wind Stress, N/m2)\nTY_443 (Meridional Wind Stress, N/m2)\nTAU_440 (Wind Stress, N/m2)\nTD_445 (Wind Stress Direction, degrees_true)\nQTAU_5440 (Wind Stress Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonTau_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonTau_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonTau/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonTau.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonTau&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonTau"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonRad.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonRad", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonRad.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1991-present, Downgoing Shortwave Radiation", "This dataset has monthly Downgoing Shortwave Radiation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nRD_495 (Downgoing Shortwave Radiation, W/M**2)\nQSW_5495 (Shortwave Radiation Quality)\nSSW_6495 (Shortwave Radiation Source)\nRDS_496 (Shortwave Radiation Standard Deviation, W/M**2)\nRDP_497 (Shortwave Radiation Peak, W/M**2)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonRad_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonRad_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonRad/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonRad.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonRad&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonRad"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonSwnet.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonSwnet", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonSwnet.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1991-present, Net Shortwave Radiation", "This dataset has monthly Net Shortwave Radiation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nSWN_1495 (Net Shortwave Radiation, W/M**2)\nQSW_5495 (Shortwave Radiation Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonSwnet_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonSwnet_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonSwnet/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonSwnet.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonSwnet&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonSwnet"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonSss.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonSss", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonSss.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1992-present, Sea Surface Salinity", "This dataset has monthly Sea Surface Salinity data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nS_41 (Sea Water Practical Salinity, PSU)\nQS_5041 (Salinity Quality)\nSS_6041 (Salinity Source)\nSIC_7041 (Salinity Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonSss_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonSss_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonSss/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonSss.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonSss&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonSss"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonSsd.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonSsd", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonSsd.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1992-present, Sigma-Theta", "This dataset has monthly Sigma-Theta (Potential Density Anomaly) data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nSTH_71 (Sigma-Theta, kg m-3)\nQST_5071 (Sigma-Theta Quality)\nSST_6071 (Sigma-Theta Source)\nDIC_7071 (Sigma-Theta Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonSsd_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonSsd_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonSsd/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonSsd.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonSsd&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonSsd"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonEmp.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonEmp", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonEmp.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1997-present, Evaporation Minus Precipitation", "This dataset has monthly Evaporation Minus Precipitation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nEMP_251 (Evaporation Minus Precipitation, mm/hr)\nQEMP_5251 (Evaporation Minus Precipitation Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonEmp_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonEmp_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonEmp/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonEmp.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonEmp&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonEmp"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonRf.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonRf", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonRf.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1997-present, Heat Flux Due To Rain", "This dataset has monthly Heat Flux Due To Rain data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQR_139 (Heat Flux Due To Rain, W m-2)\nQQR_5139 (Heat Flux Due To Rain Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonRf_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonRf_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonRf/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonRf.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonRf&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonRf"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonRain.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonRain", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonRain.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1997-present, Precipitation", "This dataset has monthly Precipitation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nRN_485 (Precipitation, MM/HR)\nQRN_5485 (Precipitation Quality)\nSRN_6485 (Precipitation Source)\nRNS_486 (Precipitation Standard Deviation, MM/HR)\nRNP_487 (Percent Time Raining, percent)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonRain_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonRain_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonRain/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonRain.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonRain&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonRain"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonBp.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonBp", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonBp.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 1998-present, Barometric (Air) Pressure", "This dataset has monthly Barometric (Air) Pressure data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nBP_915 (Barometric (Air) Pressure, hPa)\nQBP_5915 (Barometric (Air) Pressure Quality)\nSBP_6915 (Barometric (Air) Pressure Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonBp_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonBp_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonBp/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonBp.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonBp&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonBp"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonBf.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonBf", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonBf.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 2000-present, Buoyancy Flux", "This dataset has monthly Buoyancy Flux data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nBF_191 (Buoyancy Flux, 10**6 kg m-2 s-1)\nQBF_5191 (Buoyancy Flux Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonBf_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonBf_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonBf/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonBf.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonBf&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonBf"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonLw.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonLw", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonLw.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 2000-present, Longwave Radiation", "This dataset has monthly Incoming Longwave Radiation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQl_136 (Incoming Longwave Radiation, W m-2)\nQLW_5136 (Longwave Radiation Quality)\nSLW_6136 (Longwave Radiation Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonLw_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonLw_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonLw/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonLw.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonLw&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonLw"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonLwnet.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonLwnet", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonLwnet.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 2000-present, Net Longwave Radiation", "This dataset has monthly Net Longwave Radiation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nLWN_1136 (Net Longwave Radiation, W m-2)\nQLW_5136 (Longwave Radiation Quality)\nSLW_6136 (Longwave Radiation Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonLwnet_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonLwnet_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonLwnet/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonLwnet.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonLwnet&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonLwnet"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonQnet.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonQnet", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoMonQnet.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Monthly, 2000-present, Total Heat Flux", "This dataset has monthly Total Heat Flux data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Monthly data is an average of daily values collected during a month.  A minimum of 15 daily values are required to compute a monthly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQT_210 (Total Heat Flux, W/M**2)\nQQ0_5210 (Total Heat Flux Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoMonQnet_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoMonQnet_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoMonQnet/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoMonQnet.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoMonQnet&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoMonQnet"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtRad.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtRad", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtRad.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1901-present, Downgoing Shortwave Radiation", "This dataset has quarterly Downgoing Shortwave Radiation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nRD_495 (Downgoing Shortwave Radiation, W/M**2)\nQSW_5495 (Shortwave Radiation Quality)\nSSW_6495 (Shortwave Radiation Source)\nRDS_496 (Shortwave Radiation Standard Deviation, W/M**2)\nRDP_497 (Shortwave Radiation Peak, W/M**2)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtRad_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtRad_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtRad/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtRad.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtRad&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtRad"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtIso.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtIso", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtIso.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1977-present, 20C Isotherm Depth", "This dataset has quarterly 20C Isotherm Depth data (the depth at which the ocean temperature is 20C) from the \nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nISO_6 (20C Isotherm Depth, m)\nQI_5006 (20C Depth Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtIso_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtIso_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtIso/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtIso.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtIso&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtIso"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtAirt.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtAirt", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtAirt.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1977-present, Air Temperature", "This dataset has quarterly Air Temperature data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nAT_21 (Air Temperature, degree_C)\nQAT_5021 (Air Temperature Quality)\nSAT_6021 (Air Temperature Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtAirt_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtAirt_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtAirt/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtAirt.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtAirt&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtAirt"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtCur.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtCur", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtCur.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1977-present, Currents", "This dataset has quarterly Currents data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nU_320 (Eastward Sea Water Velocity, cm s-1)\nV_321 (Northward Sea Water Velocity, cm s-1)\nCS_300 (Sea Water Velocity, cm s-1)\nCD_310 (Direction of Sea Water Velocity, degrees_true)\nQCS_5300 (Current Speed Quality)\nQCD_5310 (Current Direction Quality)\nSCS_6300 (Current Speed Source)\nCIC_7300 (Current Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtCur_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtCur_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtCur/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtCur.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtCur&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtCur"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtSst.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtSst", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtSst.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1977-present, Sea Surface Temperature", "This dataset has quarterly Sea Surface Temperature (SST) data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nT_25 (Sea Surface Temperature, degree_C)\nQT_5025 (Sea Surface Temperature Quality)\nST_6025 (Sea Surface Temperature Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtSst_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtSst_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtSst/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtSst.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtSst&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtSst"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtT.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtT", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtT.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1977-present, Temperature", "This dataset has quarterly Temperature data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nT_20 (Sea Water Temperature, degree_C)\nQT_5020 (Temperature Quality)\nST_6020 (Temperature Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtT_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtT_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtT/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtT.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtT&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtT"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtW.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtW", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtW.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1977-present, Wind", "This dataset has quarterly Wind data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nWU_422 (Zonal Wind, m s-1)\nWV_423 (Meridional Wind, m s-1)\nWS_401 (Wind Speed, m s-1)\nQWS_5401 (Wind Speed Quality)\nSWS_6401 (Wind Speed Source)\nWD_410 (Wind Direction, degrees_true)\nQWD_5410 (Wind Direction Quality)\nSWD_6410 (Wind Direction Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtW_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtW_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtW/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtW.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtW&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtW"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtDyn.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtDyn", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtDyn.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1980-present, Dynamic Height", "This dataset has quarterly Dynamic Height data (a measure of the elevation of the sea level, calculated by integrating the specific volume anomaly of the sea water between the sea surface and 500 m depth) from the \nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nDYN_13 (Dynamic Height, dyn-cm)\nQD_5013 (Dynamic Height Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtDyn_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtDyn_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtDyn/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtDyn.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtDyn&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtDyn"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtHeat.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtHeat", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtHeat.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1980-present, Heat Content", "This dataset has quarterly Heat Content data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nHTC_130 (Heat Content, 10**10 J m-2)\nHTC_5130 (Heat Content Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtHeat_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtHeat_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtHeat/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtHeat.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtHeat&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtHeat"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtPos.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtPos", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtPos.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1980-present, Position", "This dataset has quarterly Position data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nLON_502 (Precise Longitude, degree_east)\nQX_5502 (Longitude Quality)\nLAT_500 (Precise Latitude, degree_north)\nQY_5500 (Latitude Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtPos_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtPos_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtPos/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtPos.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtPos&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtPos"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtD.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtD", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtD.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1987-present, Potential Density Anomaly", "This dataset has quarterly Potential Density Anomaly (sigma-theta) data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nSTH_71 (Sigma-Theta, kg m-3)\nQST_5071 (Sigma-Theta Quality)\nSST_6071 (Sigma-Theta Source)\nDIC_7071 (Sigma-Theta Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtD_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtD_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtD/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtD.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtD&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtD"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtS.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtS", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtS.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1987-present, Salinity", "This dataset has quarterly Salinity data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nS_41 (Sea Water Practical Salinity, PSU)\nQS_5041 (Salinity Quality)\nSS_6041 (Salinity Source)\nSIC_8041 (Salinity Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtS_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtS_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtS/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtS.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtS&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtS"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtAdcp.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtAdcp", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtAdcp.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1988-2017, ADCP", "This dataset has quarterly Acoustic Doppler Current Profiler (ADCP) water currents data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  ADCP data are available only after mooring recoveries, which are scheduled on an annual basis.  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nu_1205 (Eastward Sea Water Velocity, cm/s)\nQU_5205 (Eastward Sea Water Velocity Quality)\nv_1206 (Northward Sea Water Velocity, cm/s)\nQV_5206 (Northward Sea Water Velocity Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtAdcp_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtAdcp_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtAdcp/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtAdcp.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtAdcp&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtAdcp"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtEvap.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtEvap", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtEvap.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1989-present, Evaporation", "This dataset has quarterly Evaporation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nE_250 (Evaporation, MM/HR)\nQE_5250 (Evaporation Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtEvap_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtEvap_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtEvap/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtEvap.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtEvap&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtEvap"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtQlat.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtQlat", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtQlat.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1989-present, Latent Heat Flux", "This dataset has quarterly Latent Heat Flux data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQL_137 (Latent Heat Flux, W m-2)\nQQL_5137 (Latent Heat Flux Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtQlat_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtQlat_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtQlat/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtQlat.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtQlat&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtQlat"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtRh.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtRh", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtRh.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1989-present, Relative Humidity", "This dataset has quarterly Relative Humidity data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nRH_910 (Relative Humidity, percent)\nQRH_5910 (Relative Humidity Quality)\nSRH_6910 (Relative Humidity Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtRh_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtRh_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtRh/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtRh.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtRh&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtRh"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtQsen.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtQsen", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtQsen.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1989-present, Sensible Heat Flux", "This dataset has quarterly Sensible Heat Flux data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQS_138 (Sensible Heat Flux, W m-2)\nQQS_5138 (Sensible Heat Flux Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtQsen_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtQsen_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtQsen/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtQsen.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtQsen&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtQsen"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtTau.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtTau", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtTau.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1989-present, Wind Stress", "This dataset has quarterly Wind Stress data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nTX_442 (Zonal Wind Stress, N/m2)\nTY_443 (Meridional Wind Stress, N/m2)\nTAU_440 (Wind Stress, N/m2)\nTD_445 (Wind Stress Direction, degrees_true)\nQTAU_5440 (Wind Stress Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtTau_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtTau_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtTau/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtTau.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtTau&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtTau"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtSwnet.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtSwnet", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtSwnet.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1991-present, Net Shortwave Radiation", "This dataset has quarterly Net Shortwave Radiation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nSWN_1495 (Net Shortwave Radiation, W/M**2)\nQSW_5495 (Shortwave Radiation Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtSwnet_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtSwnet_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtSwnet/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtSwnet.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtSwnet&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtSwnet"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtSss.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtSss", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtSss.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1992-present, Sea Surface Salinity", "This dataset has quarterly Sea Surface Salinity data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nS_41 (Sea Water Practical Salinity, PSU)\nQS_5041 (Salinity Quality)\nSS_6041 (Salinity Source)\nSIC_7041 (Salinity Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtSss_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtSss_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtSss/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtSss.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtSss&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtSss"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtSsd.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtSsd", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtSsd.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1992-present, Sigma-Theta", "This dataset has quarterly Sigma-Theta (Potential Density Anomaly) data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nSTH_71 (Sigma-Theta, kg m-3)\nQST_5071 (Sigma-Theta Quality)\nSST_6071 (Sigma-Theta Source)\nDIC_7071 (Sigma-Theta Instrument Code)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtSsd_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtSsd_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtSsd/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtSsd.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtSsd&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtSsd"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtEmp.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtEmp", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtEmp.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1997-present, Evaporation Minus Precipitation", "This dataset has quarterly Evaporation Minus Precipitation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nEMP_251 (Evaporation Minus Precipitation, mm/hr)\nQEMP_5251 (Evaporation Minus Precipitation Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtEmp_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtEmp_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtEmp/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtEmp.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtEmp&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtEmp"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtRf.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtRf", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtRf.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1997-present, Heat Flux Due To Rain", "This dataset has quarterly Heat Flux Due To Rain data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQR_139 (Heat Flux Due To Rain, W m-2)\nQQR_5139 (Heat Flux Due To Rain Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtRf_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtRf_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtRf/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtRf.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtRf&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtRf"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtRain.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtRain", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtRain.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1997-present, Precipitation", "This dataset has quarterly Precipitation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nRN_485 (Precipitation, MM/HR)\nQRN_5485 (Precipitation Quality)\nSRN_6485 (Precipitation Source)\nRNS_486 (Precipitation Standard Deviation, MM/HR)\nRNP_487 (Percent Time Raining, percent)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtRain_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtRain_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtRain/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtRain.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtRain&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtRain"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtBp.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtBp", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtBp.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 1998-present, Barometric (Air) Pressure", "This dataset has quarterly Barometric (Air) Pressure data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nBP_915 (Barometric (Air) Pressure, hPa)\nQBP_5915 (Barometric (Air) Pressure Quality)\nSBP_6915 (Barometric (Air) Pressure Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtBp_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtBp_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtBp/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtBp.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtBp&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtBp"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtBf.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtBf", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtBf.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 2000-present, Buoyancy Flux", "This dataset has quarterly Buoyancy Flux data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nBF_191 (Buoyancy Flux, 10**6 kg m-2 s-1)\nQBF_5191 (Buoyancy Flux Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtBf_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtBf_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtBf/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtBf.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtBf&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtBf"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtLw.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtLw", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtLw.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 2000-present, Longwave Radiation", "This dataset has quarterly Incoming Longwave Radiation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQl_136 (Incoming Longwave Radiation, W m-2)\nQLW_5136 (Longwave Radiation Quality)\nSLW_6136 (Longwave Radiation Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtLw_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtLw_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtLw/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtLw.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtLw&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtLw"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtLwnet.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtLwnet", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtLwnet.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 2000-present, Net Longwave Radiation", "This dataset has quarterly Net Longwave Radiation data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nLWN_1136 (Net Longwave Radiation, W m-2)\nQLW_5136 (Longwave Radiation Quality)\nSLW_6136 (Longwave Radiation Source)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtLwnet_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtLwnet_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtLwnet/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtLwnet.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtLwnet&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtLwnet"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtQnet.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtQnet", "https://upwell.pfeg.noaa.gov/erddap/tabledap/pmelTaoQrtQnet.graph", "", "", "public", "TAO/TRITON, RAMA, and PIRATA Buoys, Quarterly, 2000-present, Total Heat Flux", "This dataset has quarterly Total Heat Flux data from the\nTAO/TRITON (Pacific Ocean, https://www.pmel.noaa.gov/gtmba/ ),\nRAMA (Indian Ocean, https://www.pmel.noaa.gov/gtmba/pmel-theme/indian-ocean-rama ), and\nPIRATA (Atlantic Ocean, https://www.pmel.noaa.gov/gtmba/pirata/ )\narrays of moored buoys which transmit oceanographic and meteorological data to shore in real-time via the Argos satellite system.  These buoys are major components of the CLIVAR climate analysis project and the GOOS, GCOS, and GEOSS observing systems.  Quarterly data is an average of monthly values collected during a 3 month period.  A minimum of 2 monthly values are required to compute a quarterly average.  This dataset contains realtime and delayed mode data (see the 'source' variable).  For more information, see\nhttps://www.pmel.noaa.gov/gtmba/mission .\n\ncdm_data_type = TimeSeries\nVARIABLES:\narray\nstation\nwmo_platform_code\nlongitude (Nominal Longitude, degrees_east)\nlatitude (Nominal Latitude, degrees_north)\ntime (Centered Time, seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nQT_210 (Total Heat Flux, W/M**2)\nQQ0_5210 (Total Heat Flux Quality)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/pmelTaoQrtQnet_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/pmelTaoQrtQnet_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/pmelTaoQrtQnet/index.json", "https://www.pmel.noaa.gov/gtmba/mission", "http://upwell.pfeg.noaa.gov/erddap/rss/pmelTaoQrtQnet.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=pmelTaoQrtQnet&showErrors=false&email=", "NOAA PMEL, TAO/TRITON, RAMA, PIRATA", "pmelTaoQrtQnet"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI216hr", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI216hr.graph", "", "", "public", "Upwelling Index, 21N 107W, 6-hourly", "Upwelling index computed from 1-degree FNMOC sea level pressure for 15 locations off the North American West Coast at each 3 degrees of latitude from 21N to 60N. The coastal Upwelling Index is an index of the strength of the wind forcing on the ocean which has been used in many studies of the effects of ocean variability on the reproductive and recruitment success of many fish and invertebrate species.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (reference time, seconds since 1970-01-01T00:00:00Z)\nupwelling_index\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdUI216hr_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdUI216hr_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdUI216hr/index.json", "https://oceanview.pfeg.noaa.gov/LAS/docs/wind_from_pressure.nc.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdUI216hr.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdUI216hr&showErrors=false&email=", "NOAA/SWFSC Environmental Research Division", "erdUI216hr"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI246hr", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI246hr.graph", "", "", "public", "Upwelling Index, 24N 113W, 6-hourly", "Upwelling index computed from 1-degree FNMOC sea level pressure for 15 locations off the North American West Coast at each 3 degrees of latitude from 21N to 60N. The coastal Upwelling Index is an index of the strength of the wind forcing on the ocean which has been used in many studies of the effects of ocean variability on the reproductive and recruitment success of many fish and invertebrate species.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (reference time, seconds since 1970-01-01T00:00:00Z)\nupwelling_index\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdUI246hr_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdUI246hr_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdUI246hr/index.json", "https://oceanview.pfeg.noaa.gov/LAS/docs/wind_from_pressure.nc.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdUI246hr.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdUI246hr&showErrors=false&email=", "NOAA/SWFSC Environmental Research Division", "erdUI246hr"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI276hr", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI276hr.graph", "", "", "public", "Upwelling Index, 27N 116W, 6-hourly", "Upwelling index computed from 1-degree FNMOC sea level pressure for 15 locations off the North American West Coast at each 3 degrees of latitude from 21N to 60N. The coastal Upwelling Index is an index of the strength of the wind forcing on the ocean which has been used in many studies of the effects of ocean variability on the reproductive and recruitment success of many fish and invertebrate species.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (reference time, seconds since 1970-01-01T00:00:00Z)\nupwelling_index\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdUI276hr_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdUI276hr_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdUI276hr/index.json", "https://oceanview.pfeg.noaa.gov/LAS/docs/wind_from_pressure.nc.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdUI276hr.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdUI276hr&showErrors=false&email=", "NOAA/SWFSC Environmental Research Division", "erdUI276hr"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI306hr", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI306hr.graph", "", "", "public", "Upwelling Index, 30N 119W, 6-hourly", "Upwelling index computed from 1-degree FNMOC sea level pressure for 15 locations off the North American West Coast at each 3 degrees of latitude from 21N to 60N. The coastal Upwelling Index is an index of the strength of the wind forcing on the ocean which has been used in many studies of the effects of ocean variability on the reproductive and recruitment success of many fish and invertebrate species.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (reference time, seconds since 1970-01-01T00:00:00Z)\nupwelling_index\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdUI306hr_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdUI306hr_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdUI306hr/index.json", "https://oceanview.pfeg.noaa.gov/LAS/docs/wind_from_pressure.nc.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdUI306hr.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdUI306hr&showErrors=false&email=", "NOAA/SWFSC Environmental Research Division", "erdUI306hr"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI336hr", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI336hr.graph", "", "", "public", "Upwelling Index, 33N 119W, 6-hourly", "Upwelling index computed from 1-degree FNMOC sea level pressure for 15 locations off the North American West Coast at each 3 degrees of latitude from 21N to 60N. The coastal Upwelling Index is an index of the strength of the wind forcing on the ocean which has been used in many studies of the effects of ocean variability on the reproductive and recruitment success of many fish and invertebrate species.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (reference time, seconds since 1970-01-01T00:00:00Z)\nupwelling_index\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdUI336hr_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdUI336hr_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdUI336hr/index.json", "https://oceanview.pfeg.noaa.gov/LAS/docs/wind_from_pressure.nc.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdUI336hr.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdUI336hr&showErrors=false&email=", "NOAA/SWFSC Environmental Research Division", "erdUI336hr"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI366hr", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI366hr.graph", "", "", "public", "Upwelling Index, 36N 122W, 6-hourly", "Upwelling index computed from 1-degree FNMOC sea level pressure for 15 locations off the North American West Coast at each 3 degrees of latitude from 21N to 60N. The coastal Upwelling Index is an index of the strength of the wind forcing on the ocean which has been used in many studies of the effects of ocean variability on the reproductive and recruitment success of many fish and invertebrate species.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (reference time, seconds since 1970-01-01T00:00:00Z)\nupwelling_index\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdUI366hr_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdUI366hr_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdUI366hr/index.json", "https://oceanview.pfeg.noaa.gov/LAS/docs/wind_from_pressure.nc.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdUI366hr.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdUI366hr&showErrors=false&email=", "NOAA/SWFSC Environmental Research Division", "erdUI366hr"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI396hr", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI396hr.graph", "", "", "public", "Upwelling Index, 39N 125W, 6-hourly", "Upwelling index computed from 1-degree FNMOC sea level pressure for 15 locations off the North American West Coast at each 3 degrees of latitude from 21N to 60N. The coastal Upwelling Index is an index of the strength of the wind forcing on the ocean which has been used in many studies of the effects of ocean variability on the reproductive and recruitment success of many fish and invertebrate species.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (reference time, seconds since 1970-01-01T00:00:00Z)\nupwelling_index\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdUI396hr_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdUI396hr_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdUI396hr/index.json", "https://oceanview.pfeg.noaa.gov/LAS/docs/wind_from_pressure.nc.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdUI396hr.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdUI396hr&showErrors=false&email=", "NOAA/SWFSC Environmental Research Division", "erdUI396hr"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI426hr", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI426hr.graph", "", "", "public", "Upwelling Index, 42N 125W, 6-hourly", "Upwelling index computed from 1-degree FNMOC sea level pressure for 15 locations off the North American West Coast at each 3 degrees of latitude from 21N to 60N. The coastal Upwelling Index is an index of the strength of the wind forcing on the ocean which has been used in many studies of the effects of ocean variability on the reproductive and recruitment success of many fish and invertebrate species.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (reference time, seconds since 1970-01-01T00:00:00Z)\nupwelling_index\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdUI426hr_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdUI426hr_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdUI426hr/index.json", "https://oceanview.pfeg.noaa.gov/LAS/docs/wind_from_pressure.nc.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdUI426hr.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdUI426hr&showErrors=false&email=", "NOAA/SWFSC Environmental Research Division", "erdUI426hr"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI456hr", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI456hr.graph", "", "", "public", "Upwelling Index, 45N 125W, 6-hourly", "Upwelling index computed from 1-degree FNMOC sea level pressure for 15 locations off the North American West Coast at each 3 degrees of latitude from 21N to 60N. The coastal Upwelling Index is an index of the strength of the wind forcing on the ocean which has been used in many studies of the effects of ocean variability on the reproductive and recruitment success of many fish and invertebrate species.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (reference time, seconds since 1970-01-01T00:00:00Z)\nupwelling_index\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdUI456hr_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdUI456hr_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdUI456hr/index.json", "https://oceanview.pfeg.noaa.gov/LAS/docs/wind_from_pressure.nc.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdUI456hr.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdUI456hr&showErrors=false&email=", "NOAA/SWFSC Environmental Research Division", "erdUI456hr"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI486hr", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI486hr.graph", "", "", "public", "Upwelling Index, 48N 125W, 6-hourly", "Upwelling index computed from 1-degree FNMOC sea level pressure for 15 locations off the North American West Coast at each 3 degrees of latitude from 21N to 60N. The coastal Upwelling Index is an index of the strength of the wind forcing on the ocean which has been used in many studies of the effects of ocean variability on the reproductive and recruitment success of many fish and invertebrate species.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (reference time, seconds since 1970-01-01T00:00:00Z)\nupwelling_index\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdUI486hr_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdUI486hr_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdUI486hr/index.json", "https://oceanview.pfeg.noaa.gov/LAS/docs/wind_from_pressure.nc.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdUI486hr.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdUI486hr&showErrors=false&email=", "NOAA/SWFSC Environmental Research Division", "erdUI486hr"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI516hr", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI516hr.graph", "", "", "public", "Upwelling Index, 51N 131W, 6-hourly", "Upwelling index computed from 1-degree FNMOC sea level pressure for 15 locations off the North American West Coast at each 3 degrees of latitude from 21N to 60N. The coastal Upwelling Index is an index of the strength of the wind forcing on the ocean which has been used in many studies of the effects of ocean variability on the reproductive and recruitment success of many fish and invertebrate species.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (reference time, seconds since 1970-01-01T00:00:00Z)\nupwelling_index\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdUI516hr_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdUI516hr_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdUI516hr/index.json", "https://oceanview.pfeg.noaa.gov/LAS/docs/wind_from_pressure.nc.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdUI516hr.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdUI516hr&showErrors=false&email=", "NOAA/SWFSC Environmental Research Division", "erdUI516hr"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI546hr", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI546hr.graph", "", "", "public", "Upwelling Index, 54N 134W, 6-hourly", "Upwelling index computed from 1-degree FNMOC sea level pressure for 15 locations off the North American West Coast at each 3 degrees of latitude from 21N to 60N. The coastal Upwelling Index is an index of the strength of the wind forcing on the ocean which has been used in many studies of the effects of ocean variability on the reproductive and recruitment success of many fish and invertebrate species.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (reference time, seconds since 1970-01-01T00:00:00Z)\nupwelling_index\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdUI546hr_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdUI546hr_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdUI546hr/index.json", "https://oceanview.pfeg.noaa.gov/LAS/docs/wind_from_pressure.nc.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdUI546hr.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdUI546hr&showErrors=false&email=", "NOAA/SWFSC Environmental Research Division", "erdUI546hr"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI576hr", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI576hr.graph", "", "", "public", "Upwelling Index, 57N 137W, 6-hourly", "Upwelling index computed from 1-degree FNMOC sea level pressure for 15 locations off the North American West Coast at each 3 degrees of latitude from 21N to 60N. The coastal Upwelling Index is an index of the strength of the wind forcing on the ocean which has been used in many studies of the effects of ocean variability on the reproductive and recruitment success of many fish and invertebrate species.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (reference time, seconds since 1970-01-01T00:00:00Z)\nupwelling_index\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdUI576hr_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdUI576hr_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdUI576hr/index.json", "https://oceanview.pfeg.noaa.gov/LAS/docs/wind_from_pressure.nc.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdUI576hr.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdUI576hr&showErrors=false&email=", "NOAA/SWFSC Environmental Research Division", "erdUI576hr"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI606hr", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI606hr.graph", "", "", "public", "Upwelling Index, 60N 146W, 6-hourly", "Upwelling index computed from 1-degree FNMOC sea level pressure for 15 locations off the North American West Coast at each 3 degrees of latitude from 21N to 60N. The coastal Upwelling Index is an index of the strength of the wind forcing on the ocean which has been used in many studies of the effects of ocean variability on the reproductive and recruitment success of many fish and invertebrate species.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (reference time, seconds since 1970-01-01T00:00:00Z)\nupwelling_index\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdUI606hr_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdUI606hr_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdUI606hr/index.json", "https://oceanview.pfeg.noaa.gov/LAS/docs/wind_from_pressure.nc.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdUI606hr.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdUI606hr&showErrors=false&email=", "NOAA/SWFSC Environmental Research Division", "erdUI606hr"],
      ["", "", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI616hr", "https://upwell.pfeg.noaa.gov/erddap/tabledap/erdUI616hr.graph", "", "", "public", "Upwelling Index, 60N 149W, 6-hourly", "Upwelling index computed from 1-degree FNMOC sea level pressure for 15 locations off the North American West Coast at each 3 degrees of latitude from 21N to 60N. The coastal Upwelling Index is an index of the strength of the wind forcing on the ocean which has been used in many studies of the effects of ocean variability on the reproductive and recruitment success of many fish and invertebrate species.\n\ncdm_data_type = TimeSeries\nVARIABLES:\ntime (reference time, seconds since 1970-01-01T00:00:00Z)\nupwelling_index\nstation_id\nlatitude (degrees_north)\nlongitude (degrees_east)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/erdUI616hr_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/erdUI616hr_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/erdUI616hr/index.json", "https://oceanview.pfeg.noaa.gov/LAS/docs/wind_from_pressure.nc.html", "http://upwell.pfeg.noaa.gov/erddap/rss/erdUI616hr.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=erdUI616hr&showErrors=false&email=", "NOAA/SWFSC Environmental Research Division", "erdUI616hr"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nmspWcosAdcpD.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nmspWcosAdcpD", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nmspWcosAdcpD.graph", "", "", "public", "West Coast Observing System (WCOS) ADCP Currents Data, 2004-2008", "The West Coast Observing System (WCOS) project provides access to temperature and currents data collected at four of the five National Marine Sanctuary sites, including Olympic Coast, Gulf of the Farallones, Monterey Bay, and Channel Islands. A semi-automated end-to-end data management system transports and transforms the data from source to archive, making the data acessible for discovery, access and analysis from multiple Internet points of entry.\n\nThe stations (and their code names) are San Miguel North (BAY), Santa Rosa North (BEA), Cuyler Harbor (CUY), Pelican/Prisoners Area (PEL), San Miguel South (SMS), Santa Rosa South (SRS), Valley Anch (VAL).\n\ncdm_data_type = TimeSeriesProfile\nVARIABLES:\nstation\nlongitude (degrees_east)\nlatitude (degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nDataQuality (Data Quality, percent)\nDataQuality_flag (Data Quality Flag)\nEastward (Eastward Current, m s-1)\nEastward_flag\nErrorVelocity (Error Velocity, m s-1)\nErrorVelocity_flag (Error Velocity Flag)\nIntensity (count)\nIntensity_flag\nNorthward (Northward Current, m s-1)\nNorthward_flag\nUpwards (Upward Current, m s-1)\nUpwards_flag\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nmspWcosAdcpD_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nmspWcosAdcpD_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nmspWcosAdcpD/index.json", "ftp://ftp.nodc.noaa.gov/nodc/archive/arc0006/0002039/1.1/about/WCOS_project_document_phaseI_20060317.pdf", "http://upwell.pfeg.noaa.gov/erddap/rss/nmspWcosAdcpD.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nmspWcosAdcpD&showErrors=false&email=", "NOAA NMSP", "nmspWcosAdcpD"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nmspWcosAdcpS.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nmspWcosAdcpS", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nmspWcosAdcpS.graph", "", "", "public", "West Coast Observing System (WCOS) ADCP Station Data, 2004-2008", "The West Coast Observing System (WCOS) project provides access to temperature and currents data collected at four of the five National Marine Sanctuary sites, including Olympic Coast, Gulf of the Farallones, Monterey Bay, and Channel Islands. A semi-automated end-to-end data management system transports and transforms the data from source to archive, making the data acessible for discovery, access and analysis from multiple Internet points of entry.\n\nThe stations (and their code names) are San Miguel North (BAY), Santa Rosa North (BEA), Cuyler Harbor (CUY), Pelican/Prisoners Area (PEL), San Miguel South (SMS), Santa Rosa South (SRS), Valley Anch (VAL).\n\ncdm_data_type = TimeSeriesProfile\nVARIABLES:\nstation\nlongitude (degrees_east)\nlatitude (degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\nPressure (Sea Water Pressure, dbar)\nPressure_flag\nTemperature (Sea Water Temperature, degree_C)\nTemperature_flag\nWaterDepth (Water Depth, m)\nWaterDepth_flag (Water Depth Flag)\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nmspWcosAdcpS_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nmspWcosAdcpS_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nmspWcosAdcpS/index.json", "ftp://ftp.nodc.noaa.gov/nodc/archive/arc0006/0002039/1.1/about/WCOS_project_document_phaseI_20060317.pdf", "http://upwell.pfeg.noaa.gov/erddap/rss/nmspWcosAdcpS.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nmspWcosAdcpS&showErrors=false&email=", "NOAA NMSP", "nmspWcosAdcpS"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nmspWcosTemp.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nmspWcosTemp", "https://upwell.pfeg.noaa.gov/erddap/tabledap/nmspWcosTemp.graph", "", "", "public", "West Coast Observing System (WCOS) Temperature Data, 2004-2011", "The West Coast Observing System (WCOS) project provides access to temperature and currents data collected at four of the five National Marine Sanctuary sites, including Olympic Coast, Gulf of the Farallones, Monterey Bay, and Channel Islands. A semi-automated end-to-end data management system transports and transforms the data from source to archive, making the data acessible for discovery, access and analysis from multiple Internet points of entry.\n\nThe stations (and their code names) are Ano Nuevo (ANO001), San Miguel North (BAY), Santa Rosa North (BEA), Big Creek (BIG001), Bodega Head (BOD001), Cape Alava 15M (CA015), Cape Alava 42M (CA042), Cape Alava 65M (CA065), Cape Alava 100M (CA100), Cannery Row (CAN001), Cape Elizabeth 15M (CE015), Cape Elizabeth 42M (CE042), Cape Elizabeth 65M (CE065), Cape Elizabeth 100M (CE100), Cuyler Harbor (CUY), Esalen (ESA001), Point Joe (JOE001), Kalaloch 15M (KL015), Kalaloch 27M (KL027), La Cruz Rock (LAC001), Lopez Rock (LOP001), Makah Bay 15M (MB015), Makah Bay 42M (MB042), Pelican/Prisoners Area (PEL), Pigeon Point (PIG001), Plaskett Rock (PLA001), Southeast Farallon Island (SEF001), San Miguel South (SMS), Santa Rosa South (SRS), Sunset Point (SUN001), Teawhit Head 15M (TH015), Teawhit Head 31M (TH031), Teawhit Head 42M (TH042), Terrace Point 7 (TPT007), Terrace Point 8 (TPT008), Valley Anch (VAL), Weston Beach (WES001).\n\ncdm_data_type = TimeSeriesProfile\nVARIABLES:\nstation\nlongitude (degrees_east)\nlatitude (degrees_north)\ntime (seconds since 1970-01-01T00:00:00Z)\ndepth (m)\nTemperature (Sea Water Temperature, degree_C)\nTemperature_flag\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/nmspWcosTemp_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/nmspWcosTemp_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/nmspWcosTemp/index.json", "ftp://ftp.nodc.noaa.gov/nodc/archive/arc0006/0002039/1.1/about/WCOS_project_document_phaseI_20060317.pdf", "http://upwell.pfeg.noaa.gov/erddap/rss/nmspWcosTemp.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=nmspWcosTemp&showErrors=false&email=", "NOAA NMSP", "nmspWcosTemp"],
      ["", "https://upwell.pfeg.noaa.gov/erddap/tabledap/earthCubeKgsBoreTempWV.subset", "https://upwell.pfeg.noaa.gov/erddap/tabledap/earthCubeKgsBoreTempWV", "https://upwell.pfeg.noaa.gov/erddap/tabledap/earthCubeKgsBoreTempWV.graph", "", "", "public", "West Virginia Borehole Temperatures, AASG State Geothermal Data, 1936-2010", "Borehole temperature measurements in West Virginia\n\ncdm_data_type = Point\nVARIABLES:\nObservationURI (Observation URI)\nWellName (Well Name)\nAPINo\nHeaderURI (Header URI)\nLabel\nOperator\nSpudDate (Spud Date, seconds since 1970-01-01T00:00:00Z)\ntime (Ended Drilling Date, seconds since 1970-01-01T00:00:00Z)\nWellType (Well Type)\nField\nCounty\nState\nlatitude (degrees_north)\nlongitude (degrees_east)\nDrillerTotalDepth (Driller Total Depth, ft)\nDepthReferencePoint (Depth Reference Point)\nWellBoreShape (Well Bore Shape)\nTrueVerticalDepth (True Vertical Depth, ft)\nElevationGL (Elevation GL, ft)\nFormationTD (Formation TD)\nMeasuredTemperature (Measured Temperature, degree_F)\nDepthOfMeasurement (Depth Of Measurement, ft)\nMeasurementFormation (Measurement Formation)\nRelatedResource (Related Resource)\nTimeSinceCirculation (Time Since Circulation, ?)\nOtherName (Other Name)\nLeaseName (Lease Name)\nNotes\n", "https://upwell.pfeg.noaa.gov/erddap/metadata/fgdc/xml/earthCubeKgsBoreTempWV_fgdc.xml", "https://upwell.pfeg.noaa.gov/erddap/metadata/iso19115/xml/earthCubeKgsBoreTempWV_iso19115.xml", "https://upwell.pfeg.noaa.gov/erddap/info/earthCubeKgsBoreTempWV/index.json", "http://www.wvgs.wvnet.edu/", "http://upwell.pfeg.noaa.gov/erddap/rss/earthCubeKgsBoreTempWV.rss", "https://upwell.pfeg.noaa.gov/erddap/subscriptions/add.html?datasetID=earthCubeKgsBoreTempWV&showErrors=false&email=", "West Virginia Geological and Economic Survey", "earthCubeKgsBoreTempWV"]
    ]
  }
}

  recorded_at: 2020-07-15 22:22:35 GMT
  recorded_with: vcr/0.5.4, webmockr/0.6.2
- request:
    method: get
    uri: https://upwell.pfeg.noaa.gov/erddap/tabledap/erdCinpKfmBT.csv?&time%3E%3D2001-07-14&units%28%22STUFF%22%29
    body:
      encoding: ''
      string: ''
    headers:
      User-Agent: libcurl/7.71.1 r-curl/4.3 crul/0.9.4.91
      Accept-Encoding: gzip, deflate
      Accept: application/json, text/xml, application/xml, */*
  response:
    status:
      status_code: '400'
      message: Bad Request
      explanation: Bad request syntax or unsupported method
    headers:
      status: 'HTTP/1.1 400 '
      date: Wed, 15 Jul 2020 22:22:35 GMT
      x-frame-options: SAMEORIGIN
      strict-transport-security: max-age=31536000; includeSubDomains
      last-modified: Wed, 15 Jul 2020 22:22:35 GMT
      xdods-server: dods/3.7
      erddap-server: '2.02'
      content-description: dods-error
      content-encoding: gzip
      vary: accept-encoding
      content-type: text/plain;charset=UTF-8
      connection: close
      transfer-encoding: chunked
    body:
      encoding: ASCII-8BIT
      file: no
      string: RXJyb3IgewogICAgY29kZT00MDA7CiAgICBtZXNzYWdlPSJCYWQgUmVxdWVzdDogUXVlcnkgZXJyb3I6IHRvVW5pdHM9VURVTklUUyBtdXN0IGJlIFVEVU5JVFMgb3IgVUNVTS4iOwp9Cg==
  recorded_at: 2020-07-15 22:22:36 GMT
  recorded_with: vcr/0.5.4, webmockr/0.6.2
